msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Protect Quarkus web application by using an Auth0 OpenID Connect provider"
msgstr "Auth0 OpenID Connectプロバイダーを使用したQuarkus Webアプリケーションの保護"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-architecture.adoc[Quarkus Security] provides comprehensive OpenId Connect (OIDC) and OAuth2 support with its `quarkus-oidc` extension, supporting both xref:security-oidc-code-flow-authentication.adoc[Authorization code flow] and xref:security-oidc-bearer-token-authentication.adoc[Bearer token] authentication mechanisms."
msgstr "xref:security-architecture.adoc[Quarkus Securityは] 、 `quarkus-oidc` 、 xref:security-oidc-code-flow-authentication.adoc[認可コードフローと] xref:security-oidc-bearer-token-authentication.adoc[ベアラートークン] の認証メカニズムの両方をサポートするエクステンションで、包括的なOpenID Connect（OIDC）とOAuth2をサポートしています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "With Quarkus, you can easily configure OIDC providers such as link:https://www.keycloak.org/documentation[Keycloak], link:https://developer.okta.com/[Okta], link:https://auth0.com/docs/[Auth0], and other xref:security-openid-connect-providers.adoc[well-known social OIDC and OAuth2 providers]."
msgstr "Quarkusを使用すると、 link:https://www.keycloak.org/documentation[Keycloak] 、 link:https://developer.okta.com/[Okta] 、 link:https://auth0.com/docs/[Auth0] 、その他の xref:security-openid-connect-providers.adoc[有名なソーシャルOIDCプロバイダーやOAuth2プロバイダーなど] のOIDCプロバイダーを簡単に設定できます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Learn how to use the Quarkus OpenID Connect extension (`quarkus-oidc`) together with the https://auth0.com/docs/[Auth0] OIDC provider to protect your API endpoints."
msgstr "Quarkus OpenID Connectエクステンション（ `quarkus-oidc` ）と link:https://auth0.com/docs/[Auth0] OIDCプロバイダーを使用して、APIエンドポイントを保護する方法について説明します。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Review the following documentation before you begin:"
msgstr "作業を始める前に、以下の文書を確認してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "link:https://auth0.com/docs/[Auth0 docs site]"
msgstr "link:https://auth0.com/docs/[Auth0のドキュメントサイト]"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[Quarkus OpenID Connect Authorization code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護するためのQuarkus OpenID Connect認可コードフローメカニズム]"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[Quarkus OpenID Connect (OIDC) Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[Quarkus OpenID Connect（OIDC）ベアラートークン認証]"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Create an Auth0 application"
msgstr "Auth0アプリケーションの作成"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Go to the Auth0 dashboard and create a regular web application.\n"
"For example, create an Auth0 application called `QuarkusAuth0`."
msgstr "Auth0 ダッシュボードに行き、通常のウェブアプリケーションを作成します。例えば、 `QuarkusAuth0` という Auth0 アプリケーションを作成します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Result"
msgstr "結果"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Your Auth0 application gets created with a client ID, secret, and HTTPS-based domain.\n"
"Make a note of these properties because you will need them to complete the Quarkus configuration in the next step."
msgstr "Auth0アプリケーションは、クライアントID、シークレット、HTTPSベースのドメインとともに作成されます。これらのプロパティは、次のステップでQuarkusの設定を完了するために必要になるので、メモしておいてください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, while still in the Auth0 dashboard, add some users to your application."
msgstr "次に、Auth0ダッシュボードのまま、アプリケーションにユーザーを追加します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Now that you have successfully created and configured your Auth0 application, you are ready to start creating and configuring a Quarkus endpoint.\n"
"In the steps that follow, you will continue to configure and update the Auth0 application as well."
msgstr "Auth0 アプリケーションの作成と設定が完了したら、Quarkus エンドポイントの作成と設定を開始します。この後の手順では、Auth0 アプリケーションの設定と更新を行います。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Create a Quarkus application"
msgstr "Quarkusアプリケーションの作成"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Use the following Maven command to create a Quarkus REST (formerly RESTEasy Reactive) application that can be secured with the Quarkus OIDC extension."
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Create the application workspace and import it into your favorite IDE.\n"
"Let's add a Jakarta REST endpoint that can only be accessed by authenticated users:"
msgstr "アプリケーションのワークスペースを作成し、お気に入りのIDEにインポートします。認証されたユーザーのみがアクセスできる jakarta REST エンドポイントを追加しましょう："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"The injected `JsonWebToken` (JWT) bean has an `@IdToken` qualifier, which means it represents not an access token but OIDC `ID token`.\n"
"`IdToken` provides information in the form of claims about the current user authenticated during the OIDC authorization code flow and you can use `JsonWebToken` API to access these claims."
msgstr "注入された `JsonWebToken` (JWT) Bean には `@IdToken` 修飾子があり、これはアクセストークンではなく OIDC `ID token` を表すことを意味します。 `IdToken` は、OIDC 認可コードフロー中に認証された現在のユーザーに関するクレームの形で情報を提供し、 `JsonWebToken` API を使用してこれらのクレームにアクセスできます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `io.quarkus.security.Authenticated` annotation is added to the `hello()` method, which means that only authenticated users can access it."
msgstr "`hello()` メソッドには `io.quarkus.security.Authenticated` のアノテーションが付加されており、認証されたユーザーのみがアクセスできるようになっています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"The access token acquired during the authorization code flow, alongside the ID token, is not used directly by the endpoint but is used only to access downstream services on behalf of the currently authenticated user.\n"
"More to come on the topic of \"access tokens\", later in this tutorial."
msgstr "認可コードフローで取得されたアクセストークンは、ID トークンと並んで、エンドポイントでは直接使用されません。アクセストークン」については、このチュートリアルの後半で詳しく説明します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Configure OIDC in the Quarkus `application.properties` file  by using the properties from the Auth0 application that you created earlier."
msgstr "先ほど作成したAuth0アプリケーションのプロパティを使用して、Quarkus `application.properties` ファイルでOIDCを設定します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"In completing this step, you have just configured Quarkus to use the domain, client ID, and secret of your Auth0 application.\n"
"Setting the property `quarkus.oidc.application-type=web-app` instructs Quarkus to use the OIDC authorization code flow, but there are also other methods, which are discussed later on in the tutorial."
msgstr "このステップを完了すると、QuarkusがAuth0アプリケーションのドメイン、クライアントID、シークレットを使用するように設定されます。プロパティ `quarkus.oidc.application-type=web-app` を設定すると、QuarkusはOIDC認可コードフローを使用するように指示されますが、チュートリアルで後述する他の方法もあります。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The endpoint address will be  \\http://localhost:8080/hello, which must also be registered as an allowed callback URL in your Auth0 application."
msgstr "エンドポイントアドレスは http://localhost:8080/hello になります。このアドレスも、Auth0 アプリケーションで許可されたコールバック URL として登録する必要があります。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "After completing this step, when you access the Quarkus \\http://localhost:8080/hello endpoint from a browser, Auth0 redirects you back to the same address after the authentication is completed."
msgstr "このステップの完了後、ブラウザからQuarkus http://localhost:8080/hello エンドポイントにアクセスすると、認証完了後にAuth0から同じアドレスにリダイレクトされます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"By default, Quarkus automatically uses the current request path as the callback path.\n"
"But you can override the default behavior and configure a specific callback path by setting the Quarkus `quarkus.oidc.authentication.redirect-path` property."
msgstr "デフォルトでは、Quarkusは自動的に現在のリクエストパスをコールバックパスとして使用します。しかし、Quarkus `quarkus.oidc.authentication.redirect-path` プロパティを設定することで、デフォルトの動作をオーバーライドし、特定のコールバックパスを設定することができます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"In production, your application will most likely have a larger URL space, with multiple endpoint addresses available.\n"
"In such cases, you can set a dedicated callback (redirect) path and register this URL in the provider's dashboard, as outlined in the following configuration example:"
msgstr "本番環境では、アプリケーションは複数のエンドポイントアドレスが利用可能な、より大きなURL空間を持つ可能性が高いでしょう。このような場合、専用のコールバック(リダイレクト)パスを設定し、このURLをプロバイダのダッシュボードに登録することができます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`quarkus.oidc.authentication.redirect-path=/authenticated-welcome`"
msgstr "`quarkus.oidc.authentication.redirect-path=/authenticated-welcome`"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"In the example scenario, Quarkus calls `/authenticated-welcome` after accepting a redirect from Auth0, completing the authorization code flow,  and creating the session cookie.\n"
"Successfully authenticated users are also allowed to access other parts of the secured application space, without needing to authenticate again. For example, the endpoint callback method can use a JAX-RS API to redirect users to other parts of the secured application where a session cookie will be verified."
msgstr "このシナリオ例では、QuarkusはAuth0からのリダイレクトを受け入れ、認可コードフローを完了し、セッションCookieを作成した後、 `/authenticated-welcome` 。認証に成功したユーザーは、再度認証することなく、セキュリティで保護されたアプリケーション空間の他の部分にアクセスすることもできます。例えば、エンドポイントコールバックメソッドは、JAX-RS API を使用して、セッションクッキーが検証されるセキュアなアプリケーションの他の部分にユーザーをリダイレクトすることができます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now you are ready to start testing the endpoint."
msgstr "これでエンドポイントのテストを開始する準備ができました。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Test the Quarkus endpoint"
msgstr "Quarkusエンドポイントのテスト"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Start Quarkus in dev mode:"
msgstr "Quarkusを開発モードで起動します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"This is the only time during this tutorial when you are expected to manually start Quarkus in dev mode.\n"
"The configuration and code update steps in the remaining sections of this tutorial are automatically observed and processed by Quarkus without you needing to restart the application manually."
msgstr "このチュートリアルで、Quarkusを手動でdevモードで起動するのはこのときだけです。このチュートリアルの残りのセクションの設定とコード更新の手順は、Quarkusによって自動的に観察され、処理されます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open the browser and access http://localhost:8080/hello."
msgstr "ブラウザを開き、 link:http://localhost:8080/hello[http://localhost:8080/hello。]"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You will be redirected to Auth0 and prompted to log in:"
msgstr "Auth0にリダイレクトされ、ログインするよう促されます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "and authorize the `QuarkusAuth0` application to access your account:"
msgstr "をクリックし、 `QuarkusAuth0` アプリケーションがお客様のアカウントにアクセスすることを認可します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Finally, you will be redirected back to the Quarkus endpoint which will return the following response:\n"
"`Hello, auth0|60e5a305e8da5a006aef5471`"
msgstr "最後に、Quarkusエンドポイントにリダイレクトされ、次のようなレスポンスが返されます： `Hello, auth0|60e5a305e8da5a006aef5471`"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Notice that the current username does not get returned.\n"
"To learn more about why this behavior occurs, you can use OIDC Dev UI as explained in the xref:security-openid-connect-dev-services.adoc#dev-ui-all-oidc-providers[Dev UI for all OpenID Connect Providers] section of the \"Dev Services and UI for OpenID Connect (OIDC)\" guide and the following section."
msgstr "現在のユーザ名が返されないことに注意してください。この動作が発生する理由については、「OpenID Connect (OIDC)の Dev Services and UI」ガイドの「 xref:security-openid-connect-dev-services.adoc#dev-ui-all-oidc-providers[Dev UI for all OpenID Connect Providers] 」セクションおよび次のセクションで説明されているように、OIDC Dev UI を使用することができます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Looking at Auth0 tokens in the OIDC Dev UI"
msgstr "OIDC Dev UIでAuth0トークンを見る"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Quarkus provides a great xref:dev-ui.adoc[Dev UI] experience.\n"
"Specifically, Quarkus offers built-in support for developing and testing OIDC endpoints with a Keycloak container.\n"
"xref:security-openid-connect-dev-services.adoc#dev-services-for-keycloak[DevService for Keycloak] is automatically started and used if the address of the OIDC provider is not specified for the Quarkus `quarkus.oidc.auth-server-url` configuration property."
msgstr "Quarkusは優れた xref:dev-ui.adoc[開発UI] を提供します。特に、Quarkusには、Keycloakコンテナを使用したOIDCエンドポイントの開発とテストをサポートする機能が組み込まれています。Quarkus `quarkus.oidc.auth-server-url` の設定プロパティにOIDCプロバイダーのアドレスが指定されていない場合、 xref:security-openid-connect-dev-services.adoc#dev-services-for-keycloak[DevService for Keycloak] が自動的に開始され、使用されます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"You can continue using the Quarkus OIDC Dev UI when the provider is already configured.\n"
"Use the following instructions to update your configuration:"
msgstr "プロバイダがすでに設定されている場合は、Quarkus OIDC Dev UIを引き続き使用できます。以下の手順を使用して、設定を更新してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "First, change your Quarkus application type from `web-app` to `hybrid`, as follows:"
msgstr "まず、Quarkusのアプリケーションタイプを `web-app` から `hybrid` に変更します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Application type is changed to `hybrid` because OIDC Dev UI currently supports `SPA` (single-page application) mode only.\n"
"OIDC Dev UI single-page application, using its own Java Script, authenticates users to the OIDC provider and uses the access token as a Bearer token to access the Quarkus endpoint as a service."
msgstr "OIDC Dev UIは現在、 `SPA` （シングルページアプリケーション）モードのみをサポートしているため、アプリケーションタイプは `hybrid` に変更されています。OIDC Dev UIのシングルページアプリケーションは、独自のJavaスクリプトを使用して、OIDCプロバイダーへのユーザー認証を行い、アクセストークンをベアラートークンとして使用して、サービスとしてQuarkusエンドポイントにアクセスします。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Typically, Quarkus must be configured with `quarkus.oidc.application-type=service` to support `Bearer` token authentication, but it also supports a `hybrid` application type, which means it can support both the authorization code and bearer token flows at the same time."
msgstr "通常、Quarkusは `Bearer` トークン認証をサポートするために、 `quarkus.oidc.application-type=service` で設定する必要があります。しかし、Quarkusは `hybrid` アプリケーションタイプもサポートしています。つまり、認可コードフローとベアラートークンフローの両方を同時にサポートすることができます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"You also need to configure the Auth0 application to allow the callbacks to the OIDC Dev UI.\n"
"Use the following URL format:"
msgstr "また、OIDC Dev UI へのコールバックを許可するように Auth0 アプリケーションを設定する必要があります。以下のURLフォーマットを使用してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`http://localhost:8080/q/dev-ui/io.quarkus.quarkus-oidc/${provider-name}-provider`"
msgstr "`http://localhost:8080/q/dev-ui/io.quarkus.quarkus-oidc/${provider-name}-provider`"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Where in this example, the `${provider-name}` is `auth0`"
msgstr "この例では、 `${provider-name}` 。 `auth0`"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Now you are ready to use OIDC Dev UI with Auth0."
msgstr "これでAuth0でOIDC Dev UIを使う準備ができました。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Open http://localhost:8080/q/dev/ in a browser session. An OpenId Connect card that links to an Auth0 provider SPA displays, as follows:"
msgstr "ブラウザセッションで http://localhost:8080/q/dev/ を開きます。以下のように、Auth0 プロバイダ SPA にリンクする OpenId Connect カードが表示されます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Click *Auth0 provider* followed by *Login into Single Page Application*:"
msgstr "*Auth0 プロバイダを* クリックし、 *シングルページアプリケーションにログイン* します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"You will be redirected to Auth0 to log in.\n"
"You will then be redirected to the OIDC Dev UI dashboard, as follows:"
msgstr "ログインするために Auth0 にリダイレクトされます。その後、以下のようにOIDC Dev UIダッシュボードにリダイレクトされます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Here, you can look at both ID and access tokens in the encoded and decoded formats, copy them to the clipboard or use them to test the service endpoint. We will test the endpoint later but for now let's check the ID token:"
msgstr "ここでは、エンコードされた形式とデコードされた形式の両方の ID トークンとアクセストークンを見たり、クリップボードにコピーしたり、サービスのエンドポイントをテストするために使用したりできます。エンドポイントのテストは後で行いますが、今は ID トークンを確認してみましょう："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "As you can see it does not have any claim representing a user name but if you check its `sub` (subject) claim you will see its value matches what you got in the response when you accessed the Quarkus endpoint directly from the browser, `auth0|60e5a305e8da5a006aef5471`."
msgstr "ご覧のように、ユーザー名を表すクレームはありませんが、 `sub` （件名）のクレームをチェックすると、その値が、ブラウザからQuarkusのエンドポイントに直接アクセスしたときのレスポンス（ `auth0|60e5a305e8da5a006aef5471` ）と一致していることがわかります。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Fix it by configuring Quarkus to request a standard OIDC `profile` scope during the authentication process which should result in the ID token including more information:"
msgstr "この問題は、認証プロセス中に標準的なOIDC `profile` スコープを要求するようにQuarkusを設定することで解決します。これにより、IDトークンに詳細な情報が含まれるようになります："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Request `profile` scope in addition to the default `openid` scope."
msgstr "デフォルトの `openid` スコープに加えて、 `profile` スコープをリクエストします。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Go back to http://localhost:8080/q/dev/, repeat the process of logging in to `Auth0` and check the ID token again, now you should see the ID token containing the `name` claim:"
msgstr "link:http://localhost:8080/q/dev/[http://localhost:8080/q/dev/ に戻り、] `Auth0` にログインするプロセスを繰り返し、もう一度 ID トークンを確認してください。今度は、 `name` のクレームを含む ID トークンが表示されるはずです："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You should get the name when you access the Quarkus endpoint directly from the browser. Clear the browser cookie cache, access http://localhost:8080/hello and yet again, you get `Hello, auth0|60e5a305e8da5a006aef5471` returned. Hmm, what is wrong ?"
msgstr "ブラウザからQuarkusエンドポイントに直接アクセスすると、この名前が表示されます。 `Hello, auth0|60e5a305e8da5a006aef5471` ブラウザのクッキーキャッシュをクリアして、 link:http://localhost:8080/hello[http://localhost:8080] /hello。どうしたのでしょうか？"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The answer lies with the specifics of the `org.eclipse.microprofile.jwt.JsonWebToken#getName()` implementation, which, according to the https://github.com/eclipse/microprofile-jwt-auth[MicroProfile MP JWT RBAC  specification], checks an MP JWT specific `upn` claim, trying `preferred_username` next and finally `sub` which explains why you get the `Hello, auth0|60e5a305e8da5a006aef5471` answer even with the ID token containing the `name` claim. We can fix it easily by changing the endpoint `hello()` method's implementation to return a specific claim value:"
msgstr "その答えは `org.eclipse.microprofile.jwt.JsonWebToken#getName()` の実装の仕様にあります。 link:https://github.com/eclipse/microprofile-jwt-auth[MicroProfile MP JWT RBAC 仕様] によると、MP JWT 固有の `upn` クレームをチェックし、次に `preferred_username` を試行し、最後に `sub` を試行します。 `name` クレームを含む ID トークンであっても `Hello, auth0|60e5a305e8da5a006aef5471` の答えが返ってくるのはこのためです。エンドポイント `hello()` メソッドの実装を変更して、特定のクレーム値を返すようにすれば簡単に修正できます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now clear the browser cache, access http://localhost:8080/hello and finally the user name is returned."
msgstr "ブラウザのキャッシュをクリアし、 link:http://localhost:8080/hello[http://localhost:8080] /hello。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Logout support"
msgstr "ログアウトのサポート"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Now that you have the users signing in to Quarkus with the help of Auth0, you probably want to support a user-initiated logout. Quarkus supports https://quarkus.io/guides/security-oidc-code-flow-authentication#logout-and-expiration[RP-initiated and other standard OIDC logout mechanisms, as well as the local session logout]."
msgstr "Auth0を使用してQuarkusにサインインしたユーザーは、ユーザーによるログアウトをサポートしたいと思うでしょう。Quarkusでは、 link:https://quarkus.io/guides/security-oidc-code-flow-authentication#logout-and-expiration[ローカルセッションのログアウトだけでなく、RP-initiated Logoutやその他の標準的なOIDCログアウトメカニズム] もサポートしています。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Currently, Auth0 does not support the standard OIDC RP-initiated logout and does not provide an end session endpoint URL in its discoverable metadata, but it provides its own logout mechanism which works nearly exactly the same as the standard one."
msgstr "現在のところ、Auth0は標準化されたOIDC RP-initiated logoutをサポートしておらず、発見可能なメタデータにセッション終了エンドポイントURLを提供していないが、標準的なものとほぼ同じ動作をする独自のログアウトメカニズムを提供しています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "It is easy to support it with Quarkus OIDC. You must configure an Auth0 end session endpoint URL and have Quarkus include both the `client-id` query parameter and the post logout URL as the `returnTo` query parameter in the RP-initated logout redirect request to Auth0:"
msgstr "Quarkus OIDCで対応するのは簡単です。Auth0のセッション終了エンドポイントURLを設定し、QuarkusがAuth0へのRP-initatedログアウトリダイレクトリクエストの `returnTo` クエリパラメータとして、 `client-id` クエリパラメータとログアウト後のURLの両方を含めるようにする必要があります："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 does not include the end session URL in its metadata, so complement it with manually configuring the Auth0 end session endpoint URL."
msgstr "Auth0はそのメタデータに終了セッションURLを含まないので、手動でAuth0の終了セッションエンドポイントURLを設定して補完してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 will not recognize a standard `post_logout_redirect_uri` query parameter and expects a parameter `returnTo` instead."
msgstr "Auth0は標準の `post_logout_redirect_uri` クエリパラメータを認識せず、代わりに `returnTo` パラメータを要求します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 expects `client-id` in the logout request."
msgstr "Auth0はログアウト要求に `client-id` 。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Authenticated requests to `/logout` path will be treated as RP-inititated logout requests."
msgstr "認証された `/logout` パスへのリクエストは、RPによるログアウトリクエストとして扱われます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This is a public resource to where the logged out user should be returned to."
msgstr "これは、ログアウトしたユーザーを戻すパブリックリソースです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Make sure the `/logout` path is protected."
msgstr "`/logout` のパスが保護されていることを確認してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Here we have customized the Auth0 end session endpoint URL and indicated to Quarkus that an `http://localhost:8080/logout` request must trigger a logout of the currently authenticated user. An interesting thing about the `/logout` path is that it is `virtual`, it is not supported by any method in the JAX-RS endpoint, so for Quarkus OIDC to be able to react to `/logout` requests we attach an `authenticated` https://quarkus.io/guides/security-authorize-web-endpoints-reference#authorization-using-configuration[HTTP security policy] to this path directly in the configuration."
msgstr "ここでは、Auth0エンドセッションエンドポイントのURLをカスタマイズし、Quarkusに対して、リクエストによって現在認証されているユーザーがログアウトする必要があることを示しました。 `http://localhost:8080/logout` リクエストが現在認証されているユーザーのログアウトをトリガーする必要があることをQuarkusに示しています。 `/logout` `virtual` そのため、Quarkus OIDCが `/logout` リクエストに反応できるように、 `authenticated` link:https://quarkus.io/guides/security-authorize-web-endpoints-reference#authorization-using-configuration[HTTPセキュリティポリシー] をこのパスに直接アタッチします。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We also have configured Quarkus to return the logged out user to the public `/hello/post-logout` resource, and this path is included in the logout request as the Auth0 specific `returnTo` query parameter. Finally, the Quarkus application's `client-id` is included in the logout URL as well."
msgstr "また、ログアウトしたユーザーをパブリックリソース（ `/hello/post-logout` ）に返すようにQuarkusを設定しています。このパスは、Auth0固有の `returnTo` クエリパラメーターとしてログアウトリクエストに含まれています。最後に、ログアウトURLにQuarkusアプリケーションの `client-id` 。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Update the endpoint to accept the post logout redirects:"
msgstr "ログアウト後のリダイレクトを受け付けるようにエンドポイントを更新します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Note the addition of the public `/hello/post-logout` resource method."
msgstr "public `/hello/post-logout` リソースメソッドの追加に注目してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Before we test the logout, make sure the `Auth0` application is configured to allow this post logout redirect back to Quarkus after the user has been logged out:"
msgstr "ログアウトをテストする前に、ユーザーがログアウトした後、Quarkusに戻るログアウト後のリダイレクトを許可するように、 `Auth0` アプリケーションが設定されていることを確認してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello, login to Quarkus with Auth0, get the user name returned, and go to `http://localhost:8080/logout`. You'll see the `You were logged out` message displayed in the browser."
msgstr "次に、ブラウザのクッキーキャッシュをクリアし、 link:http://localhost:8080/hello[http://localhost:8080/hello。] Auth0でQuarkusにログインし、返されたユーザー名を取得します。 `http://localhost:8080/logout` .ブラウザに表示される `You were logged out` 。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, go to the http://localhost:8080/q/dev/, login to Auth0 from the Dev UI SPA and notice you can now logout from the OIDC Dev UI too, see the symbol representing the logout next to the `Logged in as Sergey Beryozkin` text:"
msgstr "次に、 link:http://localhost:8080/q/dev/[http://localhost:8080/q/dev/、] Dev UI SPAからAuth0にログインし、OIDC Dev UIからもログアウトできることに気づきます。 `Logged in as Sergey Beryozkin` テキストの横にログアウトを表すシンボルが表示されていることを確認してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "For the logout to work from OIDC DevUI, the Auth0 application's list of allowed logout callbacks has to be updated to include the OIDC DevUI endpoint:"
msgstr "OIDC DevUIからログアウトするためには、Auth0アプリケーションの許可されたログアウトコールバックリストを更新し、OIDC DevUIエンドポイントを含める必要があります："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now logout directly from OIDC Dev UI and login as a new user - add more users to the registered Auth0 application if required."
msgstr "ここで OIDC Dev UI から直接ログアウトし、新規ユーザーとしてログインします。必要に応じて、登録済みの Auth0 アプリケーションにユーザーを追加してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Role-based access control"
msgstr "ロールベースのアクセスコントロール"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We have confirmed that the Quarkus endpoint can be accessed by users who have authenticated with the help of `Auth0`."
msgstr "Quarkus エンドポイントには、 `Auth0` で認証されたユーザーがアクセスできることを確認しています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The next step is to introduce role-based access control (RBAC) to have users in a specific role only, such as `admin`, be able to access the endpoint."
msgstr "次のステップは、ロールベースのアクセス制御（RBAC）を導入して、 `admin` のような特定のロールのユーザーのみがエンドポイントにアクセスできるようにすることです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "See also the <<permission-based-access-control>> section below."
msgstr "以下の <<permission-based-access-control>> のセクションもご参照ください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 tokens do not include any claims containing roles by default, so, first, you must customize the `Login` flow of the `Auth0` application with a custom action which will add the roles to tokens. Select `Actions/Flows/Login` in the `Auth0` dashboard, choose `Add Action/Build Custom`, name it as `AddRoleClaim`:"
msgstr "Auth0 トークンには、デフォルトではロールを含むクレームが含まれないため、まず、トークンにロールを追加するカスタ ムアクションで、 `Auth0` アプリケーションの `Login` フローをカスタマイズする必要があります。 `Auth0` ダッシュボードで `Actions/Flows/Login` を選択し、 `Add Action/Build Custom` を選択して、 `AddRoleClaim` と名前を付けます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Add the following action script to it:"
msgstr "そこに以下のアクションスクリプトを追加します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Note a custom Auth0 claim has to be namespace qualified, so the claim which will contain roles will be named as \"https://quarkus-security.com/roles\". Have a look at the ID token content we analyzed in the previous sections and you will see how this claim is represented, for example:"
msgstr "カスタム Auth0 クレームは名前空間修飾しなければならないので、ロールを含むクレームは \"https://quarkus-security.com/roles\" という名前になります。前のセクションで分析した ID トークンの内容を見てください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `Auth0` Login Flow diagram should look like this now:"
msgstr "`Auth0` ログインフロー図はこのようになります："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You must add a role such as `admin` to the users registered in the `Auth0` application."
msgstr "`Auth0` アプリケーションに登録されているユーザーには、 `admin` などのロールを追加する必要があります。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Create an `admin` role:"
msgstr "`admin` ロールを作成します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "and add it to the registered user:"
msgstr "を作成し、登録ユーザーに追加します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, update the Quarkus endpoint to require that only users with the `admin` role can access the endpoint:"
msgstr "次に、Quarkusエンドポイントを更新して、 `admin` ロールを持つユーザーのみがエンドポイントにアクセスできるようにします："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open http://localhost:8080/hello, authenticate to Auth0 and get `403`. The reason you get `403` is because Quarkus OIDC does not know which claim in the `Auth0` tokens represents the roles information, by default a `groups` claim is checked, while Auth0 tokens are now expected to have an \"https://quarkus-security.com/roles\" claim."
msgstr "http://localhost:8080/hello を開き、Auth0を認証して `403` を取得します。 `403` が表示されるのは、Quarkus OIDCが `Auth0` トークンのどのクレームがロール情報を表しているのかわからないためです。デフォルトでは、 `groups` のクレームがチェックされますが、Auth0 トークンには \"https://quarkus-security.com/roles\" のクレームがあることが期待されます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Fix it by telling Quarkus OIDC which claim must be checked to enforce RBAC:"
msgstr "QuarkusのOIDCに、RBACを実施するためにどのクレームをチェックしなければならないかを指示することで、この問題を解決できます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Point to the custom roles claim. The path to the roles claim is in double quotes because the claim is namespace qualified."
msgstr "カスタム・ロール・クレームを指定します。rolesクレームへのパスは二重引用符で囲まれています。これはクレームが名前空間修飾子であるためです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello again, authenticate to Auth0 and get an expected user name."
msgstr "ここで、ブラウザのクッキーキャッシュをクリアし、 link:http://localhost:8080/hello[http://localhost:8080/hello ] に再度アクセスし、Auth0に認証し、予想されるユーザー名を取得します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Access Quarkus with opaque Auth0 access tokens"
msgstr "不透明なAuth0アクセストークンを使用したQuarkusへのアクセス"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The main goal of this section is to explain how Quarkus can be tuned to accept `opaque` bearer Auth0 access tokens as opposed to Auth0 JWT access tokens because Auth0 access tokens issued during the authorization code flow are opaque by default and they can only be used to request `UserInfo` in addition to the information about the current user which is already available in ID token. Learning how to verify opaque tokens can be useful because many OIDC and OAuth2 providers will issue opaque access tokens only."
msgstr "このセクションの主な目的は、Auth0 JWT アクセストークンではなく、 `opaque` ベアラ Auth0 アクセストークンを受け入れるように Quarkus をチューニングする方法を説明することです。なぜなら、認可コードフロー中に発行された Auth0 アクセストークンは、デフォルトでは不透明であり、ID トークンですでに利用可能な現在のユーザーに関する情報に加えて、 `UserInfo` を要求するためにのみ使用できるからです。多くの OIDC および OAuth2 プロバイダは不透明なアクセストークンのみを発行するため、不透明なトークンの検証方法を学ぶことは有益です。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "For more information on how to configure Auth0 and Quarkus to have authorization code access tokens issued in the JWT format and propagated to service endpoints, see the following <<token-propagation>> and <<jwt-access-tokens>> sections."
msgstr "JWT 形式で発行された認証コードアクセストークンをサービスエンドポイントに伝搬させるための Auth0 および Quarkus の設定方法の詳細については、次の <<token-propagation>> および <<jwt-access-tokens>> セクションを参照してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "So far we have only tested the Quarkus endpoint using OIDC authorization code flow. In this flow you use the browser to access the Quarkus endpoint, Quarkus itself manages the authorization code flow, a user is redirected to Auth0, logs in, is redirected back to Quarkus, Quarkus completes the flow by exchanging the code for the ID, access, and refresh tokens, and works with the ID token representing the successful user authentication. The access token is not relevant at the moment. As mentioned earlier, in the authorization code flow, Quarkus will only use the access token to access downstream services on behalf of the currently authenticated user."
msgstr "これまでのところ、OIDC認可コードフローを使用してQuarkusエンドポイントをテストしたのみです。このフローでは、ブラウザを使ってQuarkusエンドポイントにアクセスし、Quarkus自身が認可コードフローを管理し、ユーザーがAuth0にリダイレクトされ、ログインし、Quarkusにリダイレクトされて戻り、QuarkusがIDトークン、アクセストークン、リフレッシュトークンのコードを交換してフローを完了し、ユーザー認証に成功したIDトークンで動作します。アクセストークンは現時点では関係ありません。前述のとおり、認可コードフローでは、Quarkusはアクセストークンを使用して、現在認証されているユーザーに代わってダウンストリームサービスにアクセスするだけです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Let's imagine though that the Quarkus endpoint we have developed has to accept `Bearer` access tokens too: it may be that the other Quarkus endpoint which is propagating it to this endpoint or it can be SPA which uses the access token to access the Quarkus endpoint. And Quarkus OIDC DevUI SPA which we already used to analyze the ID token fits perfectly for using the access token available to SPA to test the Quarkus endpoint."
msgstr "しかし、私たちが開発したQuarkusエンドポイントも、 `Bearer` アクセストークンを受け入れる必要があるとします。このエンドポイントにアクセストークンを伝播するのは、他のQuarkusエンドポイントかもしれませんし、アクセストークンを使用してQuarkusエンドポイントにアクセスするSPAかもしれません。また、Quarkus OIDC DevUI SPAは、IDトークンを分析するためにすでに使用しており、SPAがQuarkusエンドポイントをテストするために利用可能なアクセストークンを使用するのに適しています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Let's go again to http://localhost:8080/q/dev-ui, select the `OpenId Connect` card, login to Auth0, and check the Access token content:"
msgstr "もう一度 http://localhost:8080/q/dev-ui にアクセス link:http://localhost:8080/q/dev-ui[し、] `OpenId Connect` カードを選択して Auth0 にログインし、アクセストークンの内容を確認してみましょう："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This access token, as opposed to the ID token we looked at earlier, cannot be verified by Quarkus directly. This is because the access token is in `JWE` (encrypted) as opposed to `JWS` (signed) format. You can see from the decoded token headers that it has been encrypted directly with a secret key known to Auth0 only, and therefore its content cannot be decrypted by Quarkus. From the Quarkus's perspective this access token is an `opaque` one, Quarkus cannot use public Auth0 asymmetric verification keys to verify it."
msgstr "このアクセストークンは、先ほど説明したIDトークンとは異なり、Quarkusで直接検証することはできません。これは、アクセストークンが `JWS` （署名）形式ではなく、 `JWE` （暗号化）形式であるためです。復号化されたトークンのヘッダーを見ると、Auth0だけが知っている秘密鍵で直接暗号化されていることがわかります。Quarkusの観点からは、このアクセストークンは `opaque` 、Quarkusは公開されているAuth0の非対称検証鍵を使用して検証することはできません。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "To confirm it, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get the HTTP `401` status:"
msgstr "確認するには、 `Test Service` エリアに `Service Address` として `/hello` を入力し、 `With Access Token` を押すと、HTTP `401` ステータスが表示されます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"For Quarkus be able to accept such access tokens, one of the two options should be available.\n"
"The first option is to introspect the opaque token remotely using a provider's introspection endpoint. Token introspection is typically supported at the `OAuth2` level, and since `OIDC` is built on top of `OAuth2`, some OIDC providers such as Keycloak support the token introspection as well. However, Auth0 does not support the token introspection, you can check it by looking at the publicly available Auth0 metadata, add `/.well-known/openid-configuration` to the address of your configured Auth0 provider, and open the resulting URL, `https://dev-3ve0cgn7.us.auth0.com/.well-known/openid-configuration`. You will see that Auth0 does not have an introspection endpoint:"
msgstr "Quarkusがこのようなアクセストークンを受け入れるには、2つのオプションのうち1つを使用する必要があります。最初のオプションは、プロバイダのイントロスペクションエンドポイントを使用して、リモートで不透 明トークンをイントロスペクションすることです。トークンのイントロスペクションは通常、 `OAuth2` レベルでサポートされています。 `OIDC` は `OAuth2` の上に構築されているため、Keycloak などの一部の OIDC プロバイダーもトークンのイントロスペクションをサポートしています。しかし、Auth0はトークンのイントロスペクションをサポートしていません。公開されているAuth0のメタデータを見て、設定したAuth0プロバイダのアドレスに `/.well-known/openid-configuration` を追加し、結果のURLを開くことで確認できます、 `https://dev-3ve0cgn7.us.auth0.com/.well-known/openid-configuration` .Auth0にはイントロスペクションエンドポイントがないことがわかります："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Therefore the other option, indirect access token verification, where the access token is used to acquire `UserInfo` from Auth0 can be used to accept and verify opaque Auth0 tokens. This option works because OIDC providers have to verify access tokens before they can issue `UserInfo` and Auth0 has a `UserInfo` endpoint."
msgstr "したがって、もう一つのオプションである間接的なアクセストークン検証は、アクセストークンがAuth0から `UserInfo` 、不透明なAuth0トークンを受け入れ検証するために使用できます。OIDC プロバイダは `UserInfo` を発行する前にアクセストークンを検証する必要があり、Auth0 には `UserInfo` エンドポイントがあるため、このオプションは有効です。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "So lets configure Quarkus to request that the access tokens must be verified by using them to acquire `UserInfo`:"
msgstr "そこで、Quarkusを設定して、アクセストークンを使用して `UserInfo` を取得することで、アクセストークンの検証を要求するようにします："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Verify access tokens indirectly by using them to request `UserInfo`."
msgstr "アクセストークンを使用して `UserInfo` をリクエストすることで、間接的にアクセストークンを検証します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Update the endpoint code to expect `UserInfo` as opposed to `ID token`:"
msgstr "`ID token` ではなく `UserInfo` を期待するようにエンドポイントのコードを更新してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This code will now work both for the authorization code and bearer access token flows."
msgstr "このコードは、認可コードフローとベアラアクセストークンフローの両方で機能します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Let's go to the OIDC Dev UI where we looked at the access token, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get `200`:"
msgstr "アクセストークンを見たOIDC Dev UIに移動し、 `Test Service` のエリアに `Service Address` として `/hello` を入力し、 `With Access Token` を押すと、 `200` が表示されます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "To confirm that it really does work, update the test endpoint to allow a `user` role only with `@RolesAllowed(\"user\")`. Try to access the endpoint from OIDC Dev UI again, and you will get the HTTP `403` error. Revert the code back to `@RolesAllowed(\"admin\")` to get the reassuring HTTP `200` status again."
msgstr "本当に動作することを確認するために、テストエンドポイントを更新し、 `@RolesAllowed(\"user\")` で `user` ロールのみを許可するようにしてください。再度 OIDC Dev UI からエンドポイントにアクセスしようとすると、HTTP `403` エラーが表示されます。コードを `@RolesAllowed(\"admin\")` に戻すと、再び安心できる HTTP `200` ステータスが表示されます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "When verifying the opaque access token indirectly, by using it to request `UserInfo`, Quarkus will use `UserInfo` as the source of the roles information, if any. As it happens, Auth0 includes the custom role claim which was created earlier in the `UserInfo` response as well."
msgstr "不透明なアクセストークンを間接的に検証する場合、 `UserInfo` 、Quarkusはロール情報のソースとして `UserInfo` （もしあれば）を使用します。その結果、Auth0は `UserInfo` のレスポンスに、先に作成されたカスタムロールクレームを含みます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "As has already been mentioned in the introduction to this section, the main goal of this section is to explain how Quarkus can verify opaque access tokens. In general, propagating access tokens whose only purpose is to allow retrieving `UserInfo` to services should be avoided unless the front-end JAX-RS endpoint or SPA prefers to delegate UserInfo retrieval to the trusted service."
msgstr "このセクションの冒頭ですでに述べたように、このセクションの主な目的は、Quarkusが不透明なアクセストークンを検証する方法を説明することです。一般的に、 `UserInfo` を取得できるようにすることだけが目的のアクセストークンをサービスに伝播することは、フロントエンドの JAX-RS エンドポイントや SPA が UserInfo の取得を信頼できるサービスに委ねることを好まない限り、避けるべきです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "For a recommended approach of working with Auth0 access tokens, see the following <<token-propagation>> and <<jwt-access-tokens>> sections."
msgstr "Auth0 アクセストークンを使用する推奨の方法については、以下の <<token-propagation>> と <<jwt-access-tokens>> セクションを参照してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Typically one uses access tokens to access remote services but OIDC DevUI SPA dashboard also offers an option to test with the ID token. This option is only available to emulate the cases where SPA delegates to the endpoint to verify and retrieve some information from the ID token for SPA to use - but ID token will still be sent to the endpoint as Bearer token by OIDC DevUI. Prefer testing with the access token in most cases."
msgstr "通常、リモートサービスへのアクセスにはアクセストークンを使用しますが、OIDC DevUI SPAダッシュボードでは、IDトークンでテストするオプションも提供しています。このオプションは、SPAがエンドポイントに委任して、SPAが使用するためにIDトークンからいくつかの情報を検証して取得するケースをエミュレートするためにのみ利用可能です - しかし、IDトークンは依然としてOIDC DevUIによってベアラートークンとしてエンドポイントに送信されます。ほとんどの場合、アクセストークンでテストすることをお勧めします。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"You can use SwaggerUI or GraphQL from OIDC DevUI for testing the service, instead of manually entering the service path to test.\n"
"For example, if you add"
msgstr "テストするサービスパスを手動で入力する代わりに、OIDC DevUIからSwaggerUIまたはGraphQLを使用してサービスをテストすることができます。例えば"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "to your application's pom then you will see a Swagger link in OIDC Dev UI:"
msgstr "をアプリケーションのpomに追加すると、OIDC Dev UIにSwaggerリンクが表示されます："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Click the Swagger link and start testing the service."
msgstr "Swaggerリンクをクリックし、サービスのテストを開始します。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Propagate access tokens to microservices"
msgstr "アクセストークンのマイクロサービスへの伝搬"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now that we have managed to use OIDC authorization code flow and used both ID token and UserInfo to access the user information, the next typical task is to propagate the current Auth0 access token to access the downstream service on behalf of the currently authenticated user."
msgstr "OIDC認可コードフローを使用し、IDトークンとUserInfoの両方を使用してユーザー情報にアクセスすることができたので、次の典型的なタスクは、現在のAuth0アクセストークンを伝播して、現在認証されているユーザーの代わりにダウンストリームサービスにアクセスすることです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In fact, the last code example, showing the injected `UserInfo`, is a concrete example of the access token propagation, in this case, Quarkus propagates the Auth0 access token to the Auth0 `UserInfo` endpoint to acquire `UserInfo`. Quarkus does it without users having to do anything themselves."
msgstr "実際、最後のコード例（注入された `UserInfo` ）は、アクセストークンの伝播の具体例です。この場合、QuarkusはAuth0アクセストークンをAuth0 `UserInfo` エンドポイントに伝播し、 `UserInfo` を取得します。この場合、QuarkusはAuth0アクセストークンをAuth0  エンドポイントに伝播し、 を取得します。Quarkusは、ユーザーが自分で何もしなくても、この処理を実行します。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "But what about propagating access tokens to some custom services ? It is very easy to achieve in Quarkus, both for the authorization code and bearer token flows. All you need to do is to create a REST Client interface for calling the service requiring a Bearer token access and annotate it with `@AccessToken` and the access token arriving to the front-end endpoint as the Auth0 Bearer access token or acquired by Quarkus after completing the Auth0 authorization code flow, will be propagated to the target microservice. This is as easy as it can get."
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"For examples of propagating access tokens, see the following sections in this tutorial.\n"
"For more information about token propagation, see xref:security-openid-connect-client-reference.adoc#reactive-token-propagation[OIDC token propagation]."
msgstr "アクセストークンの伝播の例については、このチュートリアルの以下のセクションを参照してください。トークンの伝播の詳細については、 xref:security-openid-connect-client-reference.adoc#reactive-token-propagation[OIDC トークン] の伝播を参照してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Access tokens in JWT format"
msgstr "JWT形式のアクセストークン"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We have already looked in detail at how Quarkus OIDC can handle <<opaque-access-tokens>>, but we don't want to propagate Auth0 opaque tokens to micro services which do something useful on behalf on the currently authenticated user, beyond checking its UserInfo."
msgstr "Quarkus OIDCがどのように <<opaque-access-tokens>> を処理できるかについてはすでに詳しく見てきましたが、現在認証されているユーザーに代わって、そのUserInfoをチェックする以上の有用なことを行うマイクロサービスには、Auth0の不透明なトークンを伝播したくありません。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "A microservice which the front-end Quarkus application will access by propagating authorization code flow access tokens to it is represented in the Auth0 dashboard as an `API`. Let's add it in the `Applications/APIs`:"
msgstr "フロントエンドの Quarkus アプリケーションが、認証コードフローのアクセストークンを伝播してアクセスするマイクロサービスは、Auth0 ダッシュボードで `API` として表されます。 `Applications/APIs` に追加してみましょう："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `https://quarkus-auth0` identifier of the created `QuarkusAuth0API` will serve as this API's `audience`. Providing this audience as a query parameter in the authorization code flow redirect to Auth0 will ensure that Auth0 issues access tokens in the JWT format."
msgstr "作成された `https://quarkus-auth0` 作成された `QuarkusAuth0API` の識別子は、この API の `audience` として機能します。認可コードフローのリダイレクトのクエリパラメータとしてこのオーディエンスをAuth0に提供することで、Auth0はJWT形式のアクセストークンを確実に発行します。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "API microservice"
msgstr "APIマイクロサービス"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Add the following dependencies to the project to support OIDC token propagation and REST clients:"
msgstr "OIDC トークンの伝播と REST クライアントをサポートするために、以下の依存関係をプロジェクトに追加します："

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Create `ApiEchoService` service class:"
msgstr "`ApiEchoService` サービスクラスを作成する："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"And configure it as an OIDC `service` application which will only fetch public verification keys from Auth0.\n"
"The configuration for this microservice should only have a single line:"
msgstr "そして、OIDC `service` アプリケーションとして構成し、Auth0 からの公開検証キーのみを取得します。このマイクロサービスの設定は1行だけです："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "which is all what is needed for the OIDC `service` application to fetch Auth0 public verification keys and use them to verify Auth0 access tokens in JWT format."
msgstr "これは、OIDC `service` アプリケーションが Auth0 公開検証鍵を取得し、JWT 形式の Auth0 アクセストークンを検証するために必要なものです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In this tutorial you have already configured the OIDC `hybrid` application which can handle both authorization code and bearer token authentication flows. In production you will run microservices as separate servers but for the sake of simplicity `ApiEchoService` will not have to be started as a second server with its own configuration containing `quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com` only, and therefore the current configuration which already has the Auth0 dev tenant address configured will be reused."
msgstr "このチュートリアルでは、認可コードフローとベアラートークン認証フローの両方を処理できる OIDC `hybrid` アプリケーションをすでに構成しています。本番環境では、マイクロサービスを別々のサーバーとして実行しますが、 `ApiEchoService` を、 `quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com` のみを含む独自の構成で 2 つ目のサーバーとして起動する必要はありません。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `hybrid` OIDC application type will ensure that `http://localhost:8080/hello` requests to `GreetingResource` initiate an Authorization code flow while `http://localhost:8080/echo` requests to `ApiEchoService`, initiated by `GreetingResource`, will lead to the authorization code flow tokens being propagated and accepted by `ApiEchoService` as bearer JWT access tokens."
msgstr "`hybrid` OIDCアプリケーションタイプは、以下のことを保証します。 `http://localhost:8080/hello` `GreetingResource` へのリクエストは認可コード・フローを開始し、 によって開始された へのリクエストは、認可コード・フロー・トークンが によって伝搬され、ベアラ JWT アクセストークンが受け入れられることを保証します。 `http://localhost:8080/echo` 一方、 `GreetingResource` によって開始される `ApiEchoService` へのリクエストは、認可コードフロー・トークンが伝搬され、 `ApiEchoService` によってベアラ JWT アクセストークンとして受け入れられることになります。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, add a REST client interface representing `ApiEchoService`:"
msgstr "次に、 `ApiEchoService` を表す REST クライアント・インターフェースを追加します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Propagate access token as an HTTP `Authorization: Bearer accesstoken` header"
msgstr "アクセストークンを HTTP `Authorization: Bearer accesstoken` ヘッダとして送信します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "And update the configuration for the Quarkus front-end application, `GreetingResource`, which has been created earlier, to request that an authorization code flow access token (as opposed to ID token) includes an `aud` (audience) claim targeting `ApiEchoService`, as well as configure the base URL for the `ApiEchoService` REST client:"
msgstr "そして、先に作成されたQuarkusフロントエンドアプリケーション `GreetingResource` 、認可コードフローのアクセストークン（IDトークンではなく）に、 `ApiEchoService` 、 `aud` （オーディエンス）をターゲットとするクレームが含まれるように要求するために、設定を更新します。また、 `ApiEchoService` RESTクライアントのベースURLも設定します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"Pass an extra `audience` query parameter to the Auth0 authorization endpoint during the authorization code flow redirect from Quarkus to Auth0.\n"
"It will ensure that the access token is issued in the JWT format and includes an `aud` (audience) claim which will contain `https://quarkus-auth0`."
msgstr "QuarkusからAuth0への認可コードフローのリダイレクト時に、Auth0の認可エンドポイントに追加の `audience` クエリパラメータを渡します。これにより、アクセストークンがJWT形式で発行され、 `aud` （オーディエンス）クレームが含まれるようになります。 `https://quarkus-auth0` ."

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Point `ApiEchoServiceClient` to the `ApiEchoService` endpoint. HTTP port in the `org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:${port}` property is parameterized to ensure the correct URL is built while using the dev, test and prod modes."
msgstr "`ApiEchoServiceClient` を `ApiEchoService` エンドポイントに指定します。 `org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:${port}` プロパティの HTTP ポートは、dev、test、prod モードを使用しているときに正しい URL がビルドされるようにパラメータ化されています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Finally update `GreetingResource` to request that `ApiEchoService` echoes a user name:"
msgstr "最後に、 `GreetingResource` を更新して、 `ApiEchoService` がユーザー名をエコーするようにリクエストします："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Inject `ApiEchoServiceClient` REST client"
msgstr "`ApiEchoServiceClient` REST クライアントのインジェクト"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Use `ApiEchoServiceClient` to echo the user name."
msgstr "ユーザー名をエコーするには、 `ApiEchoServiceClient` を使用します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open a browser, access http://localhost:8080/hello and get your name displayed in the browser."
msgstr "ブラウザを開き、 link:http://localhost:8080/hello[http://localhost:8080] /hello。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Let's go to http://localhost:8080/q/dev-ui, select the `OpenId Connect` card, login to Auth0, and check the Access token content:"
msgstr "link:http://localhost:8080/q/dev-ui[http://localhost:8080/q/dev-ui にアクセスして、] `OpenId Connect` カードを選択し、Auth0 にログインして、アクセストークンの内容を確認してみましょう："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "As you can see, the access token is no longer encrypted as shown in the <<opaque-access-tokens>> section and indeed it is in the JWT format now."
msgstr "ご覧のように、アクセストークンは <<opaque-access-tokens>> のセクションで示されたように暗号化されなくなり、実際に JWT フォーマットになっています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Permission Based Access Control"
msgstr "権限ベースのアクセス制御"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We have discussed in the <<role-based-access-control>> section how to get Quarkus to check a namespace qualified claim containing user roles and use this information to enforce role-based access control. You have configured Auth0 to add the custom roles claim to both ID and access tokens."
msgstr "<<role-based-access-control>> のセクションで、Quarkusにユーザロールを含む名前空間修飾されたクレームをチェックさせ、この情報を使用してロールベースのアクセス制御を実施する方法について説明しました。IDトークンとアクセストークンの両方にカスタムロールクレームを追加するようにAuth0を設定しました。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "However, Permission Based Access Control is better suited to the case where an access token is propagated by the front-end endpoint to a microservice which will check if a given access token has been authorized for this service to perform a concrete action, as opposed to this token vouching for a user be in a specific role. For example, being in the admin role does not necessarily mean the user is allowed to have a read and write access to some of this microservice's content."
msgstr "しかし、Permission Based Access Control は、アクセストークンがフロントエンドエンドポイントからマイクロサービスに伝搬され、マイクロサービスがアクセストークンがこのサービスに対して認可されているかどうかをチェックする場合に適しています。たとえば、管理者ロールに属しているからといって、そのユーザがマイクロサービスのコンテンツに対して読み書きできるわけではありません。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Let's see how Permission Based Access Control constraints can be applied to `ApiEchoService`."
msgstr "権限ベースのアクセス制御制約を `ApiEchoService` に適用する方法を見てみましょう。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Go to the Auth0 dashboard, add an `echo:name` permission to the `QuarkusAuth0API` API:"
msgstr "Auth0ダッシュボードにアクセスし、 `QuarkusAuth0API` APIに `echo:name` パーミッションを追加します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `echo:name` permission will be included in the access token as a standard OAuth2 `scope` claim value if this scope will also be requested during the authorization code flow. Update the configuration as follows:"
msgstr "このスコープが認可コードフロー中にも要求される場合、 `echo:name` パーミッションは標準 OAuth2 `scope` クレーム値としてアクセストークンに含まれます。以下のように設定を更新します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "An extra `echo:name` scope will be requested during the authorization code flow."
msgstr "認可コードフロー中に `echo:name` スコープが追加で要求されます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now update `ApiEchoService` to enforce Permission Based Access Control:"
msgstr "次に、 `ApiEchoService` を更新して、Permission Based Access Control を適用します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This is all what is needed as Quarkus OIDC automatically associates `scope` claim values as permissions with the current security identity."
msgstr "Quarkus OIDCは、 `scope` のクレーム値を、現在のセキュリティIDに権限として自動的に関連付けるため、必要なのはこれだけです。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You can enforce both Role Based and Permission Based Access Controls in Quarkus by combining `@RolesAllowed` and `@PermissionsAllowed` annotations."
msgstr "Quarkusでは、 `@RolesAllowed` と `@PermissionsAllowed` アノテーションを組み合わせることで、ロールベースとパーミッションベースの両方のアクセスコントロールを実施できます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open a browser, access http://localhost:8080/hello and get the name displayed in the browser."
msgstr "ブラウザを開き、 http://localhost:8080/hello にアクセスし、ブラウザに表示される名前を取得します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "To confirm the permission is correctly enforced, change it to `echo.name`: `@PermissionsAllowed(\"echo.name\")`. Clear the browser cache, access http://localhost:8080/hello again and you will get `403` reported by `ApiEchoService`. Now revert it back to `@PermissionsAllowed(\"echo:name\")`."
msgstr "パーミッションが正しく適用されていることを確認するには、 `echo.name` : `@PermissionsAllowed(\"echo.name\")` に変更してください。ブラウザのキャッシュをクリアし、 link:http://localhost:8080/hello[http://localhost:8080/hello ] に再度アクセスすると、 `403` に `ApiEchoService` が報告されます。 `@PermissionsAllowed(\"echo:name\")` に戻してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Integration testing"
msgstr "統合テスト"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You have already used OIDC DevUI SPA to login to Auth0 and test the Quarkus endpoint with the access token, updating the endpoint code along the way."
msgstr "すでにOIDC DevUI SPAを使用してAuth0にログインし、アクセストークンを使用してQuarkusエンドポイントをテストし、エンドポイントのコードを更新しています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "However, running tests is also essential, lets see how we can test the endpoint and configuration which you have developed during the course of this tutorial, using xref:continuous-testing.adoc[Quarkus Continuous Testing] feature."
msgstr "xref:continuous-testing.adoc[Quarkusの継続的テスト] 機能を使用して、このチュートリアルの過程で開発したエンドポイントと設定をテストする方法を見てみましょう。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Start with the following test code :"
msgstr "次のテスト・コードから始めてください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "If you recall, when the application was started in dev mode, the following could be seen in the CLI window:"
msgstr "思い起こせば、アプリケーションをdevモードで起動したとき、CLIウィンドウには次のように表示されていました："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Press `r` and notice this test failing with `403` which is expected because the test does not send a token to the endpoint:"
msgstr "`r` を押すと、このテストは `403` で失敗します。これは、このテストがエンドポイントにトークンを送信していないためです："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Before fixing the test, let's review the options available for testing Quarkus endpoints secured by OIDC. These options might vary, depending on which flow your application supports and how you prefer to test. Endpoints which use OIDC authorization code flow can be tested using xref:security-oidc-code-flow-authentication#integration-testing[one of these options] and endpoints which use Bearer token authentication can be tested using xref:security-oidc-bearer-token-authentication#integration-testing[one of these options]."
msgstr "テストを修正する前に、OIDCによってセキュリティで保護されたQuarkusエンドポイントをテストするために利用可能なオプションを確認しましょう。これらのオプションは、アプリケーションがどのフローをサポートしているか、またどのようにテストを行うかによって異なります。OIDC 認可コードフローを使用するエンドポイントは、 xref:security-oidc-code-flow-authentication.adoc#integration-testing[これらのオプションのいずれ] かを使用してテストすることができ、ベアラートークン認証を使用するエンドポイントは、 xref:security-oidc-bearer-token-authentication.adoc#integration-testing[これらのオプションのいずれか] を使用してテストすることができます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "As you can see, testing of the endpoints secured with Auth0 can be done with the help of `Wiremock`, or `@TestSecurity` annotation. Experiment with writing such tests on your own and reach out if you encounter any problems."
msgstr "ご覧のように、Auth0 で保護されたエンドポイントのテストは、 `Wiremock` や `@TestSecurity` アノテーションの助けを借りて行うことができます。このようなテストを自分で書いてみて、問題があれば連絡してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In this tutorial though, we will use a recently added `OidcTestClient` to support testing endpoints which use live Auth0 development tenants."
msgstr "しかし、このチュートリアルでは、最近追加された `OidcTestClient` を使って、ライブの Auth0 開発用テナントを使用するテスト用エンドポイントをサポートします。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Here is a related fragment of the configuration:"
msgstr "関連するコンフィギュレーションの一部をご紹介します："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In production, you will distinguish between prod and test level configuration with `%prod.` and `%test.` qualifiers. Let's assume that the above configuration will indeed be prefixed with `%test.` in your real application, with this configuration also including the `%prod.` qualified Auth0 production tenant configuration."
msgstr "本番環境では、 `%prod.` と `%test.` の修飾子で、prod レベルと test レベルの構成を区別します。実際のアプリケーションでは、上記の構成の先頭に `%test.` が付くと仮定します。この構成には、 `%prod.` 修飾のAuth0本番テナント構成も含まれます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Using `OidcTestClient` to test such configuration requires acquiring a token from the Auth0 dev tenant, using either OAuth2 `password` or `client_credentials` grant, we will try a `password` grant. Make sure the application registered in the Auth0 dashboard allows the `password` grant:"
msgstr "このような設定をテストするために `OidcTestClient` を使用するには、OAuth2 `password` または `client_credentials` グラントを使用して Auth0 dev テナントからトークンを取得する必要があります。ここでは `password` グラントを試してみます。Auth0 ダッシュボードに登録されているアプリケーションが `password` グラントを許可していることを確認してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "It is important to clarify that we do not recommend using the deprecated OAuth2 `password` token grant in production. However using it can help testing the endpoint with tokens acquired from the live dev Auth0 tenant."
msgstr "OAuth2 `password` のトークングラントを本番環境で使用することはお勧めしません。しかし、Auth0 テナントから取得したトークンを使ってエンドポイントをテストするのには役立ちます。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`OidcTestClient` should be used to test applications accepting bearer tokens which will work for the endpoint developed in this tutorial as it supports both authorization code flow and bearer token authentication. You would need to use OIDC WireMock or `HtmlUnit` directly against the Auth0 dev tenant if only the authorization code flow was supported - in the latter case `HtmlUnit` test code would have to be aligned with how Auth0 challenges users to enter their credentials. If you like, you can copy the xref:security-oidc-code-flow-authentication#integration-testing-wiremock[HtmlUnit test fragment] from the documentation and experiment with it."
msgstr "`OidcTestClient` は、認可コードフローとベアラートークン認証の両方をサポートしているため、このチュートリアルで開発したエンドポイントで動作するベアラートークンを受け入れるアプリケーションのテストに使用する必要があります。認可コードフローのみをサポートする場合は、OIDC WireMock を使用するか、 を Auth0 dev テナントに対して直接使用する必要があります。後者の場合、 のテストコードを Auth0 がユーザにクレデンシャルを入力させる方法に合わせる必要があります。もしよろしければ、ドキュメントにある `HtmlUnit` `HtmlUnit` xref:security-oidc-code-flow-authentication.adoc#integration-testing-wiremock[HtmlUnit テスト] をコピーして試してみてください。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In meantime we will now proceed with fixing the currently failing test using `OidcTestClient`."
msgstr "その間に、 `OidcTestClient` を使って、現在失敗しているテストを修正します。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "First you must add the following dependency:"
msgstr "まず、次の依存関係を追加する必要があります。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "which provides a utility class `io.quarkus.test.oidc.client.OidcTestClient` which can be used in tests for acquiring access tokens (This dependency also offers an OIDC WireMock support - review the documentation how to use it for testing if you want)."
msgstr "`io.quarkus.test.oidc.client.OidcTestClient` この依存関係は OIDC WireMock のサポートも提供します。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now update the test code like this:"
msgstr "テストコードを次のように更新してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`OidcTestClient` is used to acquire an access token, using one of the registered user's name and password, as well as the `audience` and `scope` parameters."
msgstr "`OidcTestClient` はアクセストークンの取得に使用され、登録ユーザー名とパスワード、 と パラメーターのいずれかを使用します。 `audience` `scope` "

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`OidcTestClient` will itself find out the `Auth0` token endpoint address, client id and secret."
msgstr "`OidcTestClient` は、 トークンのエンドポイントアドレス、クライアント ID、シークレットを調べます。 `Auth0` "

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Press `r` again and have the test passing:"
msgstr "もう一度 `r` ："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "By the way, if you like, you can run the tests in Continuous mode directly from DevUI:"
msgstr "ちなみに、DevUIから直接Continuousモードでテストを実行することもできます："

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Production mode"
msgstr "プロダクションモード"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"You have developed and tested the Quarkus endpoint secured with Auth0 in the development mode.\n"
"The next step is to run your application in the production mode.\n"
"Choose between JVM and native modes."
msgstr "開発モードで、Auth0でセキュリティ保護されたQuarkusエンドポイントを開発し、テストしました。次のステップは、本番モードでアプリケーションを実行することです。JVM モードとネイティブモードのいずれかを選択します。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Run the Application in JVM mode"
msgstr "JVMモードでアプリケーションを実行"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Compile the application:"
msgstr "アプリケーションをコンパイルします:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Run the application:"
msgstr "アプリケーションの実行:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Run the application in native mode"
msgstr "ネイティブ・モードでアプリケーションを実行"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"You can compile this same demo into native mode without needing any modifications.\n"
"This implies that you no longer need to install a JVM on your production environment.\n"
"The runtime technology is included in the produced binary and optimized to run with minimal resources required."
msgstr "この同じデモを、何の修正も必要とせずにネイティブ・モードにコンパイルすることができます。これは、本番環境にJVMをインストールする必要がないことを意味します。ランタイム・テクノロジーは生成されたバイナリに含まれており、必要最小限のリソースで実行できるように最適化されています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Compilation takes a bit longer, so this step is disabled by default."
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトでは無効になっています。"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Build your application again by enabling the `native` profile:"
msgstr "`native` プロファイルを有効にして、アプリケーションを再度構築してください："

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next run the following binary directly:"
msgstr "次に以下のバイナリを直接実行します："

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Troubleshooting"
msgstr "トラブルシューティング"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The steps described in this tutorial should work exactly as the tutorial describes. You might have to clear the browser cookies when accessing the updated Quarkus endpoint if you have already completed the authentication. You might need to restart the Quarkus application manually in dev mode but it is not expected. If you need help completing this tutorial, you can get in touch with the Quarkus team."
msgstr "このチュートリアルで説明されている手順は、チュートリアルの説明どおりに動作するはずです。すでに認証が完了している場合、更新されたQuarkusエンドポイントにアクセスする際に、ブラウザのクッキーをクリアする必要があるかもしれません。Quarkusアプリケーションをdevモードで手動で再起動する必要があるかもしれませんが、これは想定されていません。このチュートリアルを完了するためにサポートが必要な場合は、Quarkusチームに連絡してください。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Summary"
msgstr "まとめ"

#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid ""
"This tutorial demonstrated how Quarkus endpoints can be secured with the `quarkus-oidc` extension and Auth0 using Authorization code and Bearer token authentication flows, with both flows being supported by the same endpoint code.\n"
"Without writing a single line of code, you have added support for the custom Auth0 logout flow and enabled role-based access control with a custom Auth0 namespace qualified claim.\n"
"Token propagation from the front-end endpoint to the microservice endpoint has been achieved by adding the `@AccessToken` annotation to the microservice REST client.\n"
"Microservice endpoint activated the permission-based access control with the `@PermissionsAllowed` annotation.\n"
"You used Quarkus dev mode to update the code and configuration without restarting the endpoint, and you also used the OIDC Dev UI to visualize and test Auth0 tokens.\n"
"You used the continuous testing feature of Quarkus to complement OIDC Dev UI tests with integration tests against the live Auth0 development tenant.\n"
"Finally, you have run the application in JVM and native modes."
msgstr "このチュートリアルでは、Quarkusのエンドポイントを `quarkus-oidc` 、認可コードとベアラートークン認証フローを使用したAuth0で保護する方法を紹介しました。コードを1行も記述することなく、カスタムAuth0ログアウトフローのサポートが追加され、カスタムAuth0名前空間修飾子によるロールベースのアクセス制御が可能になりました。フロントエンドエンドポイントからマイクロサービスエンドポイントへのトークン伝搬は、 `@AccessToken` アノテーションをマイクロサービス REST クライアントに追加することで実現しました。マイクロサービスエンドポイントは、 `@PermissionsAllowed` アノテーションを使用して許可ベースのアクセス制御を有効にしました。Quarkusの開発モードを使用して、エンドポイントを再起動せずにコードと設定を更新し、OIDC Dev UIを使用してAuth0トークンを視覚化してテストしました。Quarkusの継続的テスト機能を使用して、OIDC Dev UIのテストを、稼働中のAuth0開発テナントに対する統合テストで補完しました。最後に、アプリケーションを JVM モードとネイティブモードで実行しました。"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Enjoy!"
msgstr "楽しんで!"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "References"
msgstr "参照"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護するOIDCコードフローメカニズム]"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr "xref:security-openid-connect-providers.adoc[よく知られたOpenID Connectプロバイダーの設定]"
