msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Testing Quarkus with Citrus"
msgstr "QuarkusとCitrusのテスト"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Explore how to verify Quarkus event-driven applications with the Citrus integration test framework."
msgstr "Citrus統合テストフレームワークを使用して、Quarkusのイベント駆動型アプリケーションを検証する方法を説明します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This post shows how to combine Quarkus with the https://citrusframework.org[Citrus] test framework in order to write automated tests for event-driven applications.\n"
"https://citrusframework.org[Citrus] is an Open Source Java test framework focusing on messaging and integration testing in general."
msgstr "この投稿では、Quarkusと link:https://citrusframework.org[Citrus] テストフレームワークを組み合わせて、イベント駆動型アプリケーションの自動テストを記述する方法を紹介します。 link:https://citrusframework.org[Citrusは] オープンソースのJavaテストフレームワークで、一般的にメッセージングテストと統合テストに重点を置いています。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Developers can easily empower the *@QuarkusTest* with Citrus capabilities in order to produce and consume events during the test.\n"
"As a result the test is able to interact with the Quarkus event-driven application by exchanging events and messages with real messaging communication."
msgstr "開発者は、 *@QuarkusTestに* Citrusの機能を簡単に追加して、テスト中にイベントを生成したり消費したりできます。その結果、テストは、実際のメッセージング通信でイベントとメッセージを交換することで、Quarkusのイベント駆動型アプリケーションと対話することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Introducing the demo application"
msgstr "デモアプリケーションの紹介"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"In this post we use a Quarkus demo application called `food-market`.\n"
"You can find the demo application code and all Citrus tests in https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-quarkus[this GitHub code repository].\n"
"The Quarkus application connects to Kafka streams as an event-driven application that produces and consumes various events (e.g. bookings, supplies, shipping events).\n"
"The processed events and their individual status are stored in a PostgreSQL database."
msgstr "この投稿では、Quarkusのデモアプリケーションである `food-market` を使用します。デモアプリケーションのコードとすべてのCitrusテストは、 link:https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-quarkus[GitHubのコードリポジトリに] あります。Quarkusアプリケーションは、様々なイベント（予約、供給、出荷イベントなど）を生成および消費するイベント駆動型アプリケーションとして、Kafkaストリームに接続します。処理されたイベントと個々のステータスはPostgreSQLデータベースに保存されます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The food-market application matches incoming `booking` and `supply` events and produces `shipping` and `booking-completed` events accordingly."
msgstr "フードマーケットアプリケーションは `booking` と `supply` イベントを受信し、それに応じて `shipping` と `booking-completed` イベントを生成します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Each event references a product and specifies an amount as well as a price in a simple Json object structure."
msgstr "各イベントは商品を参照し、シンプルなJsonオブジェクト構造で金額と価格を指定します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Clients create the `booking` events and at the same time suppliers will add their individual `supply` events.\n"
"The Quarkus food-market application consumes both event types and finds matching bookings and supplies.\n"
"Once a booking and a supply do match in certain criteria the application produces `booking-completed` and `shipping` events as a result."
msgstr "クライアントは `booking` イベントを作成し、同時にサプライヤーは `supply` イベントを追加します。Quarkus food-marketアプリケーションは、両方のイベントタイプを消費し、一致する予約と供給を見つけます。予約と供給が特定の基準で一致すると、アプリケーションは結果として `booking-completed` と `shipping` イベントを生成します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Last but not least the booking client gets informed via email about the completed booking status."
msgstr "最後になりますが、予約完了のステータスは予約者にメールで通知されます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In a fully automated integration test we want to verify all events and their processing using real messaging communication with Kafka streams and database persistence."
msgstr "完全に自動化された統合テストでは、Kafkaストリームとデータベースの永続化を使用した実際のメッセージング通信を使用して、すべてのイベントとその処理を検証したいと思います。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Testing the application with Citrus"
msgstr "Citrusを使ったアプリケーションのテスト"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Quarkus application connects to different infrastructure (Kafka, PostgreSQL, Mail SMTP).\n"
"The automated integration test should verify the message communication, the event processing and connectivity to all components.\n"
"We will use the Citrus test framework as it provides the complete toolset for testing this kind of event-driven message-based solutions."
msgstr "Quarkusアプリケーションは、さまざまなインフラストラクチャ（Kafka、PostgreSQL、Mail SMTP）に接続します。自動統合テストでは、メッセージ通信、イベント処理、すべてのコンポーネントへの接続性を検証する必要があります。Citrusテストフレームワークは、この種のイベント駆動型メッセージベースソリューションをテストするための完全なツールセットを提供しているため、これを使用します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The first thing to do is to add Citrus to the Quarkus project.\n"
"The most convenient way is to import the `citrus-bom`."
msgstr "最初にすべきことは、QuarkusプロジェクトにCitrusを追加することです。最も便利な方法は、 `citrus-bom` .NET Frameworkをインポートすることです。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Citrus BOM"
msgstr "シトラスBOM"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The `citrus-quarkus` extension provides a special `@QuarkusTest` resource implementation that enables us to combine Citrus with a Quarkus test.\n"
"So let's add this extension as a test scoped dependency."
msgstr "`citrus-quarkus` エクステンションは、Citrus と Quarkus テストを組み合わせることができる、特別な `@QuarkusTest` リソースの実装を提供します。それでは、このエクステンションをテストスコープの依存関係として追加してみましょう。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Citrus Quarkus extension"
msgstr "シトラスQuarkusエクステンション"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Also, we need to include some other Citrus modules because we want to exchange data via Kafka and connect to the PostgreSQL database as part of the test.\n"
"Citrus is very modular. This means you can choose from a wide range of modules each of them adding specific testing capabilities to your project (e.g. `citrus-kafka`, `citrus-sql`, `citrus-validation-json`)."
msgstr "また、Kafka経由でデータを交換し、テストの一部としてPostgreSQLデータベースに接続したいので、他のCitrusモジュールをいくつか含める必要があります。Citrusは非常にモジュール化されています。つまり、幅広いモジュールから選択することができ、それぞれのモジュールがプロジェクトに特定のテスト機能を追加します（例： `citrus-kafka` , `citrus-sql` , `citrus-validation-json` ）。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In this sample project we include the following Citrus modules as test scoped dependencies:"
msgstr "このサンプルプロジェクトでは、以下のCitrusモジュールをテストスコープの依存関係に含めています："

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-quarkus"
msgstr "シトラスQuarkus"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-kafka"
msgstr "citrus-kafka"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-validation-json"
msgstr "citrus-validation-json"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-sql"
msgstr "citrus-sql"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "citrus-mail"
msgstr "シトラスメール"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This completes the setup of all required Citrus modules.\n"
"Now we can move on to writing an automated integration test in order to verify the Quarkus event-driven application."
msgstr "これで、必要なすべての Citrus モジュールのセットアップが完了しました。これで、Quarkusイベント駆動型アプリケーションを検証するために、自動化された統合テストの記述に移ることができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Writing Citrus tests on top of QuarkusTest"
msgstr "QuarkusTest上でのCitrusテストの記述"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "We want to write an automated test that makes sure that all inbound events (`booking` and `supply`) are being processed properly and that the resulting outbound  events (`booking-completed` and `shipping`) are being produced as expected."
msgstr "すべてのインバウンドイベント( `booking` と `supply` )が適切に処理され、結果としてアウトバウンドイベント( `booking-completed` と `shipping` )が期待通りに生成されていることを確認する自動テストを書きたいと思います。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Citrus as a test framework will act as all surrounding components producing client events and verifying resulting outbound events.\n"
"Also, Citrus will have a look into the database in order to verify the persisted domain model objects.\n"
"Later on in a more advanced test scenario Citrus will also receive and verify the mail message content that is sent by the food-market Quarkus application."
msgstr "テストフレームワークとしてのCitrusは、クライアントイベントを生成し、その結果のアウトバウンドイベントを検証するすべての周辺コンポーネントとして動作します。また、Citrusは永続化されたドメインモデルオブジェクトを検証するためにデータベースを覗きます。さらに高度なテストシナリオでは、Citrusは、Quarkusアプリケーションから送信されるメールメッセージの内容も受信して検証します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"For now let's start with a normal Quarkus test.\n"
"The test needs to start the Quarkus application and also needs to prepare some infrastructure such as the database and the Kafka streams message broker. Fortunately Quarkus dev services provides the awesome testing capability to automatically start Testcontainers that represent the required infrastructure."
msgstr "とりあえず、通常のQuarkusテストから始めましょう。このテストでは、Quarkusアプリケーションを起動し、データベースやKafkaストリームメッセージブローカーなどのインフラストラクチャを準備する必要があります。幸いなことに、Quarkus Dev Servicesには、必要なインフラストラクチャを表すTestcontainersを自動的に起動する素晴らしいテスト機能があります。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test is annotated with the `@QuarkusTest` annotation.\n"
"It enables the Quarkus dev services test capabilities and takes care of setting everything up for you.\n"
"The test itself is an arbitrary JUnit Jupiter unit test, so you can start this test from your Java IDE or as part of the Maven test lifecycle."
msgstr "テストには `@QuarkusTest` のアノテーションが付きます。これにより、Quarkus Dev Servicesのテスト機能が有効になり、すべての設定が行われます。テスト自体は任意の JUnit Jupiter ユニットテストなので、Java IDE から、または Maven のテストライフサイクルの一部として、このテストを開始できます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Now let's add Citrus to the picture.\n"
"With the Citrus Quarkus extension that we have added to the Maven project in the previous section we can now enable the Citrus capabilities for the test.\n"
"Just add the `@CitrusSupport` annotation to the test class."
msgstr "では、Citrus を追加しましょう。前のセクションでMavenプロジェクトに追加したCitrus Quarkusエクステンションを使用して、テストのCitrus機能を有効にすることができます。テストクラスに `@CitrusSupport` アノテーションを追加するだけです。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This annotation enables the Citrus capabilities for the Quarkus test.\n"
"Citrus will now participate in the Quarkus test lifecycle which enables you to inject specific Citrus resources such as endpoints as well as the Citrus test runner."
msgstr "このアノテーションによって、Quarkus テストで Citrus の機能が使用できるようになります。CitrusはQuarkusのテストライフサイクルに参加するようになり、エンドポイントやCitrusテストランナーなど、特定のCitrusリソースを注入できるようになります。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Citrus enabled Quarkus test"
msgstr "柑橘類がQuarkusのテストに対応"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Citrus enabled test uses additional resources such as the `KafkaEndpoint` named bookings.\n"
"The `KafkaEndpoint` component comes with the `citrus-kafka` module and allows us to interact with Kafka streams by sending and receiving events to a topic."
msgstr "Citrusが有効なテストでは、 `KafkaEndpoint` という名前の予約などの追加リソースを使用します。 `KafkaEndpoint` コンポーネントは `citrus-kafka` モジュールに付属しており、トピックにイベントを送受信することで Kafka ストリームとやり取りすることができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Citrus `TestCaseRunner` resource represents the entrance to the Citrus Java domain specific testing language.\n"
"This allows us to run any Citrus test action (e.g. send/receive messages, verify data in an SQL database) during the test."
msgstr "Citrus `TestCaseRunner` リソースは、Citrus Java ドメイン固有テスト言語への入り口を表します。これにより、テスト中に任意の Citrus テストアクション (メッセージの送受信、SQL データベース内のデータの検証など) を実行できます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "See this sample code to send a message to the Kafka streams topic."
msgstr "Kafkaストリームトピックにメッセージを送信するサンプルコードを参照してください。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Send booking event"
msgstr "予約イベントの送信"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The injected Citrus `TestCaseRunner` is able to use a Gherkin `Given-When-Then` syntax and executes Citrus test operations.\n"
"This first test activity references the KafkaEndpoint `bookings` in a send operation.\n"
"The test is able to use domain model objects (`Product` and `Booking`) as message body.\n"
"The send operation properly serializes the domain model objects to Json with the injected `ObjectMapper`."
msgstr "注入された Citrus `TestCaseRunner` は Gherkin `Given-When-Then` 構文を使用でき、Citrus テスト操作を実行します。この最初のテストアクティビティは、送信操作で KafkaEndpoint `bookings` を参照します。このテストでは、ドメインモデルオブジェクト（ `Product` と `Booking` ）をメッセージボディとして使用できます。送信操作は、注入された `ObjectMapper` を使用して、ドメインモデルオブジェクトを Json に適切にシリアライズします。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "You can also use the `@QuarkusIntegrationTest` annotation in order to start the demo application in a separate JVM. This separates the test code from the application and usually binds the test to the integration-test phase in Maven. Please be aware that an integration test is not able to inject application resources such as ObjectMapper or DataSource. The good news is that you can use the very same Citrus extension also with the `@QuarkusIntegrationTest`."
msgstr "また、 `@QuarkusIntegrationTest` アノテーションを使用して、別の JVM でデモアプリケーションを起動することもできます。これにより、テストコードがアプリケーションから分離され、通常、テストが Maven の統合テストフェーズにバインドされます。統合テストは、ObjectMapper や DataSource などのアプリケーションリソースを注入できないことに注意してください。朗報は、 `@QuarkusIntegrationTest` .NET でもまったく同じ Citrus エクステンションを使用できることです。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "This is basically how you can combine Citrus capabilities with Quarkus test dev services in an automated integration test."
msgstr "これは基本的に、自動統合テストでCitrusの機能とQuarkusのテストdevサービスを組み合わせる方法です。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The rest of the story is quite easy.\n"
"In the same way as sending the booking event we can now also send a matching `supply` event."
msgstr "あとはとても簡単です。予約イベントを送信するのと同じように、 `supply` 。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Send supply event"
msgstr "供給イベントの送信"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test now has produced a booking and a matching supply event.\n"
"This should trigger the food-market application to produce respective `booking-completed` and `shipping` events.\n"
"As a next step in the test we should receive and verify these events with Citrus."
msgstr "これでテストは予約と一致する供給イベントを生成しました。これにより、食品市場アプリケーションは `booking-completed` と `shipping` イベントを生成します。テストの次のステップとして、これらのイベントを Citrus で受信し、検証します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Receive and verify events"
msgstr "イベントの受信と検証"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Citrus is able to perform powerful message validation when receiving the events.\n"
"This is why we have added the `citrus-validation-json` module in the very beginning.\n"
"The Json message validator in Citrus will compare the received Json object with an expected Json template and make sure that all fields and properties do match as expected."
msgstr "Citrusはイベント受信時に強力なメッセージ検証を行うことができます。そのため、 `citrus-validation-json` モジュールを追加しました。CitrusのJsonメッセージバリデータは、受信したJsonオブジェクトを期待されるJsonテンプレートと比較し、すべてのフィールドとプロパティが期待通りに一致することを確認します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test creates the expected `shippingEvent` Json object which uses properties like the `client`, `product` and the `amount`.\n"
"The received event must match these expected values in order to pass the test.\n"
"Unfortunately we are not able to verify the `address` field because it has been generated by the Quarkus application.\n"
"This is why the `address` gets ignored during the validation by using the `@ignored@` Citrus validation expression as an expected value."
msgstr "このテストでは、 `client` 、 `product` 、 `amount` などのプロパティを使用する、期待される `shippingEvent` Json オブジェクトが作成されます。テストに合格するためには、受信したイベントがこれらの期待される値と一致する必要があります。残念ながら、 `address` フィールドは Quarkus アプリケーションによって生成されているため、検証することができません。このため、 `@ignored@` Citrusの検証式を期待値として使用することで、検証中に `address` は無視されます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Citrus Json message validator is quite powerful and will now compare the received shipping event with the expected Json object.\n"
"All given Json properties get verified and the test will fail when there is a mismatch."
msgstr "CitrusのJsonメッセージバリデータは非常に強力で、受信した配送イベントと期待されるJsonオブジェクトを比較します。すべてのJsonプロパティが検証され、不一致があるとテストは失敗します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Received Json"
msgstr "受信Json"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Control Json"
msgstr "コントロールJson"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "You can use ignore expressions, use validation matchers, functions and test variables in the expected template."
msgstr "期待されるテンプレートでは、無視式を使ったり、バリデーションマッチャーや関数、テスト変数を使ったりすることができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This completes the first test with many events being exchanged with the application under test.\n"
"Now let's run the test."
msgstr "これで、テスト対象のアプリケーションと多くのイベントがやり取りされ、最初のテストが完了しました。それではテストを実行してみましょう。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Running the Citrus tests"
msgstr "Citrusテストの実行"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The Quarkus test framework in the example uses JUnit Jupiter as a test driver.\n"
"This means you can run the tests just like any other JUnit test from your Java IDE or with Maven for instance."
msgstr "この例のQuarkusテストフレームワークでは、テストドライバーとしてJUnit Jupiterを使用しています。つまり、Java IDE や Maven などから、他の JUnit テストと同じようにテストを実行できます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The test is now run with the Maven test lifecycle.\n"
"The `@QuarkusTest` dev services will start the application and prepare the infrastructure with Testcontainers.\n"
"Then Citrus will produce the events and verify the outcome with powerful Json validation."
msgstr "テストは Maven テストライフサイクルで実行されます。 `@QuarkusTest` Dev Servicesがアプリケーションを起動し、Testcontainersでインフラストラクチャを準備します。その後、Citrusがイベントを生成し、強力なJsonバリデーションで結果を検証します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"In this first test we made sure that the application is able to process the incoming events and that the resulting events are produced as expected.\n"
"Now let's move on to more advanced tests including the database and a mail server SMTP communication."
msgstr "この最初のテストでは、アプリケーションが着信イベントを処理できること、そして結果として期待どおりのイベ ントが生成されることを確認しました。それでは、データベースとメールサーバの SMTP 通信を含む、より高度なテストに移りましょう。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Verify stored data with SQL"
msgstr "SQLによるストアドデータの検証"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"When testing distributed event-driven applications the timing of events is an essential ingredient to success.\n"
"Each test scenario is keen to verify a specific application behavior and the correct timing of events is key to triggering and verifying this behavior.\n"
"Also timing is very important to avoid running into flaky tests where racing conditions may influence the test result on slower machines (e.g. CI jobs)."
msgstr "分散イベント駆動アプリケーションをテストする場合、イベントのタイミングは成功に不可欠な要素です。各テストシナリオは、特定のアプリケーションの振る舞いを検証することを目的としており、イベントの正しい タイミングは、この振る舞いをトリガーし、検証するための鍵となります。また、遅いマシン（例えば CI ジョブ）上で、レーシングコンディションがテスト結果に影響するようなフ レーキーテストを避けるためにも、タイミングは非常に重要です。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"As an example assume the test needs to create a new product first and then sends a new booking event referencing this newly added product.\n"
"The test needs to wait for the product event to be processed completely before sending the booking event."
msgstr "例として、テストは最初に新しい商品を作成する必要があり、次にこの新しく追加された商品を参照する新しい予約イベントを送信すると仮定します。テストは予約イベントを送信する前に商品イベントが完全に処理されるまで待つ必要があります。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In Citrus we are able to add this waiting state very easily."
msgstr "Citrusでは、この待機状態を非常に簡単に追加することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Wait for object to be created in persistence layer"
msgstr "永続層でオブジェクトが作成されるのを待ちます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"After the product event has been sent we use the `repeatOnError()` test action.\n"
"In combination with an `autoSleep` and a max retry count setting the action periodically polls the database for the created product.\n"
"This makes sure that we do not continue with the test until the new product has been properly stored to the database."
msgstr "商品イベントが送信された後、 `repeatOnError()` テストアクションを使用します。 `autoSleep` 、最大リトライ回数設定と組み合わせて、このアクションは作成された商品について定期的にデータベースをポーリングします。これにより、新しい商品がデータベースに正しく保存されるまでテストを続行しないようにします。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The database interaction in Citrus comes with the `citrus-sql` module and enables you to verify any SQL result set."
msgstr "Citrusのデータベースインタラクションは、 `citrus-sql` モジュールに付属しており、任意のSQL結果セットを検証することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Quarkus is able to inject the `dataSource` that is being used to connect to the PostgreSQL database. This also works when Quarkus uses the PostgreSQL Testcontainers infrastructure in the test. Just use the `@Inject` annotation in your test and reference the datasource in the Citrus `sql()` test action."
msgstr "Quarkusは、PostgreSQLデータベースへの接続に使用される `dataSource` 。これは、QuarkusがテストでPostgreSQL Testcontainersインフラストラクチャを使用している場合にも機能します。テスト内で `@Inject` アノテーションを使用し、Citrus `sql()` テストアクションでデータソースを参照します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "You may introduce test behaviors for common Citrus test logic such as waiting for a domain model object to be persisted in the database. In general a test behavior encapsulates a set of Citrus test actions to a reusable entity that you can reference many times from your tests."
msgstr "ドメインモデルオブジェクトがデータベースに永続化されるのを待つなど、Citrus の一般的なテストロジックにテスト動作を導入することができます。一般的に、テスト動作はCitrusのテスト動作のセットを再利用可能なエンティティにカプセル化し、テストから何度も参照できるようにします。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Citrus test behavior"
msgstr "シトラスのテスト動作"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In a test you can apply the test behavior."
msgstr "テストでは、テスト動作を適用することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Apply test behaviors"
msgstr "テスト動作の適用"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The ability to look into the database in order to check on the persisted entities is quite powerful as it allows us to fully control the test workflow.\n"
"We could also use the Citrus SQL result set verification in the test to verify a booking status."
msgstr "永続化されたエンティティを確認するためにデータベースを参照する機能は、テストのワークフローを完全に制御できるため、非常に強力です。また、予約状況を確認するためにCitrus SQLの結果セット検証をテストに使用することもできます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Verify booking status completed"
msgstr "予約状況の確認"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This verifies that the booking with the given id has the status `COMPLETED`.\n"
"The SQL result set validation in Citrus is able to handle complex column sets with multiple rows."
msgstr "これは、指定されたidを持つ予約のステータスが `COMPLETED` であることを検証します。CitrusのSQL結果セットの検証は、複数の行を持つ複雑なカラムセットを扱うことができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Verify the mail server interaction"
msgstr "メールサーバーとのやりとりの確認"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The food-market Quarkus application under test may inform the client about a completed booking via email."
msgstr "テスト中の食品市場Quarkusアプリケーションは、完了した予約を電子メールでクライアントに通知することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Mail content"
msgstr "メール内容"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "The Citrus test is able to verify this particular mail content by starting an SMTP mail server that will receive that mail message and verify its content."
msgstr "Citrusテストは、SMTPメールサーバーを起動し、そのメールメッセージを受信してその内容を検証することで、この特定のメール内容を検証することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "In Quarkus we can use the `quarkus-mailer` extension to send mails via SMTP."
msgstr "Quarkusでは、 `quarkus-mailer` エクステンションを使用してSMTP経由でメールを送信できます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Quarkus mail service"
msgstr "Quarkusメールサービス"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "For the test Citrus starts an SMTP mail server that is able to accept the mail messages sent by Quarkus."
msgstr "テスト用に、CitrusはQuarkusから送信されたメールメッセージを受け入れることができるSMTPメールサーバーを起動します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Citrus mail server component"
msgstr "Citrusメールサーバコンポーネント"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Let's tell Quarkus to connect to this Citrus mail server during the test."
msgstr "Quarkusに、テスト中にこのCitrusメールサーバーに接続するように指示します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Quarkus mailer configuration"
msgstr "Quarkusメーラーの設定"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "With this setup we can now add a test action that receives and verifies the mail message sent."
msgstr "このセットアップで、送信されたメールメッセージを受信して検証するテストアクションを追加することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Verify mail message sent"
msgstr "送信されたメールメッセージの確認"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The expected mail content uses some test variables `${client}` and `${product}`.\n"
"You may set these test variables in Citrus accordingly so these placeholders get resolved before the validation is performed."
msgstr "期待されるメールコンテンツは、いくつかのテスト変数 `${client}` と `${product}` を使用しています。これらのテスト変数をCitrusで適宜設定することで、バリデーションが実行される前にこれらのプレースホルダが解決されます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"The mail server responds with a code and a text according to the SMTP protocol.\n"
"In the success case this is a `250` `Ok` response."
msgstr "メールサーバーはSMTPプロトコルに従ってコードとテキストで応答します。成功の場合、これは `250` `Ok` 応答です。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Again you can introduce a Citrus test behavior that covers the booking completed mail message verification.\n"
"Many tests may apply this behavior in their test logic then."
msgstr "再度、予約完了メールメッセージの検証をカバーするCitrusのテスト動作を導入することができます。多くのテストは、テストロジックでこの動作を適用することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Another interesting point about the mail server interaction is that the Citrus mail server component is also able to simulate a mail server error."
msgstr "メールサーバーの相互作用に関するもう一つの興味深い点は、Citrusメールサーバーコンポーネントがメールサーバーエラーをシミュレートできることです。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid "Simulate mail server error"
msgstr "メールサーバーエラーのシミュレーション"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"This time the Citrus mail server explicitly responds with a `443` `Failed!` error and the Quarkus application needs to handle this error accordingly.\n"
"Verifying error scenarios in automated integration tests is very important and helps us to develop robust applications.\n"
"It is great to have the opportunity to trigger these error scenarios with Citrus in an automated test."
msgstr "今回、Citrusメールサーバーは明示的に `443` `Failed!` エラーで応答し、Quarkusアプリケーションはこのエラーを適切に処理する必要があります。自動化された統合テストでエラーシナリオを検証することは非常に重要であり、堅牢なアプリケーションの開発に役立ちます。自動テストにおいて、Citrusでこのようなエラーシナリオをトリガーできるのは素晴らしいことです。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
msgid "Summary"
msgstr "まとめ"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"In this post we have seen how to combine the Citrus test framework with Quarkus test dev services in order to perform automated integration testing of event-driven applications.\n"
"The test is able to produce/consume events on Kafka streams and verifies the Quarkus application accordingly by verifying the Json data and the persisted entities in the database."
msgstr "この投稿では、イベント駆動型アプリケーションの自動統合テストを実行するために、CitrusテストフレームワークとQuarkusテストdevサービスを組み合わせる方法を見てきました。このテストでは、Kafkaストリーム上でイベントを生成/消費し、Jsonデータとデータベース内の永続化されたエンティティを検証することで、Quarkusアプリケーションを適宜検証します。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"Citrus as a framework provides many modules each of them providing endpoints (client and server) for straight forward messaging interaction during an integration test (e.g. Kafka, JMS, FTP, Http, SOAP, Mail, ...).\n"
"The message validation capabilities allow us to verify the exchanged message content with different formats (e.g. Json, XML, plaintext)."
msgstr "フレームワークとしてのCitrusは多くのモジュールを提供し、各モジュールは統合テスト中にメッセージングを直接やり取りするためのエンドポイント（クライアントとサーバー）を提供します（例：Kafka、JMS、FTP、Http、SOAP、Mailなど）。メッセージ検証機能により、さまざまなフォーマット（Json、XML、プレーンテキストなど）で交換されたメッセージの内容を検証することができます。"

#: _posts/2023-12-1-testing-quarkus-with-citrus.adoc
#, fuzzy
msgid ""
"While the Citrus project has been around for quite some time the Citrus Quarkus extension is a new addition in the most recent Citrus version 4.0.\n"
"As always, your feedback is much appreciated!\n"
"Please give it a try and let us know what you think about this approach of automated integration testing with the combination of Citrus and Quarkus testing."
msgstr "Citrusプロジェクトはかなり以前から存在していましたが、Citrus Quarkusエクステンションは最新のCitrusバージョン4.0で新たに追加されたものです。いつも通り、皆様のご意見をお待ちしております！ぜひお試しいただき、CitrusとQuarkusを組み合わせた自動統合テストのアプローチについてご意見をお聞かせください。"
