msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "SmallRye Stork Unwrapped: Exploring New Features and Enhancements"
msgstr "SmallRye Storkの開封：新機能と強化の探求"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Explore in detail the latest features added to Smallrye Stork"
msgstr "SmallRye Storkに追加された最新機能を詳しくご覧ください。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Since its initial release in January 2022, Stork has undergone significant development, introducing new features that extended its capabilities and improved developer experience."
msgstr "2022年1月の最初のリリース以来、Storkは大幅な開発を行い、新機能を導入することで機能を拡張し、開発者のエクスペリエンスを向上させてきました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"This blog post takes a deep dive into the evolution of SmallRye Stork beyond its initial release, providing a detailed exploration of its fresh additions.\n"
"But first, let's describe briefly what Stork can do for you.\n"
"SmallRye Stork is a client-side service discovery and selection framework.\n"
"It provides out-of-the-box integrations with Kubernetes, Eureka, and Hashicorp Consul, as well as a set of selection strategies, including round-robin, power-of-two-choices and best response time.\n"
"But the most noteworthy feature of Stork is its extensibility. You can create your own service selection strategy or plug in your own service discovery mechanism.\n"
"If you don't know it yet, a good way to get started is to take a look at our https://quarkus.io/guides/stork[getting started guide]."
msgstr "このブログでは、SmallRrye Storkの最初のリリースからの進化を深く掘り下げ、新しく追加された機能について詳しくご紹介します。その前に、Storkで何ができるかを簡単に説明します。SmallRye Storkはクライアントサイドのサービス発見・選択フレームワークです。Kubernetes、Eureka、Hashicorp Consulとすぐに統合できるほか、ラウンドロビン、二者択一、ベストレスポンスタイムなどの選択戦略を提供します。しかし、Storkの最大の特徴は、そのエクステンションです。独自のサービス選択戦略を作成したり、独自のサービス発見メカニズムをプラグインすることができます。まだご存知でない方は、 link:https://quarkus.io/guides/stork[スタートガイド] をご覧ください。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Additionally, our documentation has also been enhanced, offering comprehensive guides for both seasoned users and those taking their first steps with Stork.\n"
"To further support your exploration, there is https://www.youtube.com/watch?v=fCNwxPDGt7Q[a video] and supplementary content that show Stork's capabilities in detail, don’t hesitate to check them out.\n"
"Don't have much time? Don't worry, we have the https://www.youtube.com/shorts/F4Gd1I1zfjs[perfect video] to understand Stork in less than 1 minute."
msgstr "また、ドキュメントの充実も図り、ベテランユーザーから初めてStorkをお使いになる方まで、包括的なガイドを提供しています。また、Storkの機能を詳しくご紹介する link:https://www.youtube.com/watch?v=fCNwxPDGt7Q[ビデオや] 補足コンテンツもご用意しております。時間がない？1分以内でStorkを理解するのに link:https://www.youtube.com/shorts/F4Gd1I1zfjs[最適なビデオ] をご用意しています。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"With the latest added additions we highlight how Stork\n"
"continues to reshape the client-side service discovery and selection landscape."
msgstr "Storkは、クライアントサイドのサービス発見・選択において、どのように新たな形を作り続けているのでしょうか。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Let's now have a look at the most interesting additions added to Stork since its initial release."
msgstr "それでは、Storkの最初のリリース以降に追加された最も興味深い機能を見てみましょう。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Programmatic service definition"
msgstr "プログラマティック・サービスの定義"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Initially, you had to configure Stork in the application configuration. You needed to configure the service discovery and selection (optionally) for each _service_ you wanted to discover and select."
msgstr "最初は、アプリケーション設定でStorkを設定する必要がありました。サービスの発見と選択をしたい _サービス_ ごとに（オプションで）設定する必要がありました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Stork, from the 1.2.0 version, proposes a programmatic API to allow users to define the service discovery and selection configuration through code rather\n"
"than through declarative or external configuration files. This means that you can use the full expressive power of Java to explicitly specify new service\n"
"definitions and do manual lookup and selection. This is particularly beneficial when the configuration requirements of an application are not known until runtime,\n"
"and it provides the ability to adjust settings without restarting the application."
msgstr "Storkは、1.2.0バージョンから、宣言型や外部設定ファイルではなく、コードでサービス検索・選択設定を定義できるプログラムAPIを提案しています。つまり、Javaの表現力をフルに使って、新しいサービス定義を明示的に指定し、手動で検索と選択を行うことができます。これは、アプリケーションの構成要件が実行時までわからない場合に特に有益であり、アプリケーションを再起動せずに設定を調整する機能を提供します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "When using the programmatic API of Stork, you can:"
msgstr "StorkのプログラムAPIを使用すると、次のことができます："

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Retrieve the singleton `Stork` instance. This instance is configured with the set of `Services` it manages."
msgstr "シングルトンの `Stork` インスタンスを取得します。このインスタンスには、管理する `Services` のセットが設定されています。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Register new service definition."
msgstr "新しいサービス定義を登録します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Retrieve the `Service` you want to use. Each Service is associated with a name."
msgstr "使用したい `Service` を取得します。各サービスには名前が関連付けられています。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Retrieve the `ServiceInstance`, which will provide the metadata to access the actual instance."
msgstr "実際のインスタンスにアクセスするためのメタデータを提供する `ServiceInstance` を取得します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "In the following code, we use Stork programmatic API to set up and configure services with different discovery methods and selection strategies:"
msgstr "以下のコードでは、StorkのプログラムAPIを使用して、さまざまなディスカバリーメソッドと選択ストラテジーを持つサービスを設定・構成しています："

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"It’s important to note that the choice between programmatic and declarative configuration often depends on the specific requirements and constraints of\n"
"your application."
msgstr "プログラム的な構成と宣言的な構成のどちらを選択するかは、多くの場合、アプリケーションの特定の要件と制約に依存することに注意することが重要です。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Service discovery and selection strategies provided as CDI beans."
msgstr "CDIビーンとして提供されるサービス発見および選択戦略。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "The second noticeable improvement is the integration with CDI."
msgstr "2つ目の顕著な改善は、CDIとの統合です。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Users may prefer using a framework that leverages CDI mechanism to easily manage and inject dependencies and have a more testable and maintainable code.\n"
"Stork can now do that. Starting from the 2.0.1 release, users can use the service discovery and load balancer as beans.\n"
"For that, it looks for CDI beans during the initialization in addition to the SPI providers.\n"
"It is worth mentioning that this enhancement also contributes to improving the Quarkus experience."
msgstr "ユーザーは、依存関係を簡単に管理し、注入し、よりテスト可能で保守性の高いコードを持つために、CDIメカニズムを活用するフレームワークを使用することを好むかもしれません。Storkはそれを可能にします。2.0.1リリースから、サービスディスカバリとロードバランサをBeanとして使うことができます。そのために、初期化時にSPIプロバイダに加えてCDI Beanを探します。この機能強化は、Quarkusのエクスペリエンス向上にも寄与していることは特筆に値します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "New service discovery approaches added."
msgstr "新しいサービス発見アプローチを追加しました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "We are happy to announce a few added service discovery strategies using DNS and Knative."
msgstr "DNSとKnativeを使用したサービス発見ストラテジーをいくつか追加しました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "With the Knative service discovery, Smallrye Stork introduces seamless service discovery through its serverless infrastructure, even when there are no 'pod' running."
msgstr "Knativeサービスディスカバリーにより、SmallRye Storkはサーバーレスインフラストラクチャを通じて、「ポッド」が稼働していないときでもシームレスなサービスディスカバリーを導入します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "The Stork Knative service discovery implementation is very similar to the Kubernetes one."
msgstr "StorkのKnativeサービスディスカバリーの実装は、Kubernetesのものと非常によく似ています。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"Stork will ask for https://knative.dev/docs/serving/reference/serving-api/#serving.knative.dev/v1.Service[Knative services] to the cluster instead of vanilla https://kubernetes.io/docs/concepts/services-networking/service/#service-resource[Kubernetes services] used by the Kubernetes implementation.\n"
"Again, to do so, Stork uses https://github.com/fabric8io/kubernetes-client/blob/master/extensions/knative/client/src/main/java/io/fabric8/knative/client/KnativeClient.java[Fabric 8 Knative Client] which is just an extension of Fabric8 Kubernetes Client."
msgstr "Storkは、Kubernetes実装で使用される通常の link:https://kubernetes.io/docs/concepts/services-networking/service/#service-resource[Kubernetesサービスではなく] 、 link:https://knative.dev/docs/serving/reference/serving-api/#serving.knative.dev/v1.Service[Knativeサービス] をクラスタに要求します。繰り返しますが、Storkは link:https://github.com/fabric8io/kubernetes-client/blob/master/extensions/knative/client/src/main/java/io/fabric8/knative/client/KnativeClient.java[Fabric 8 K] ubernetes Clientのエクステンションである link:https://github.com/fabric8io/kubernetes-client/blob/master/extensions/knative/client/src/main/java/io/fabric8/knative/client/KnativeClient.java[Fabric 8 Knative Client] を使用します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"The DNS-based service discovery is also here to stay. When a service has registered one or more instances in a Domain Name System (DNS) server,\n"
"Stork will be able to discover them by querying the DNS. This strategy is simple and widely used, so Stork could not fail to implement it."
msgstr "DNSベースのサービスディスカバリも今後も継続されます。サービスがDNS（Domain Name System）サーバーに1つ以上のインスタンスを登録した場合、StorkはDNSに問い合わせることで、それらのインスタンスを発見することができます。この戦略はシンプルで広く使われているため、Storkが実装しない手はありません。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "New sticky service selection strategy"
msgstr "新しい粘着サービス選択戦略"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "The Stork load balancer family has been extended with a new one: the sticky service selection implementation."
msgstr "Storkロードバランサーファミリーに新しいものが加わりました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"The sticky service selection implemented by Stork refers to a strategy where a client \"sticks\" to a particular instance of a service until it fails,\n"
"then it selects another one. It is also possible to configure a backoff period for specifying how long a failing service instance should be retried.\n"
"This can be useful in scenarios where maintaining a consistent connection to the same instance is beneficial, such as when dealing with sessions or\n"
"stateful applications."
msgstr "Storkが実装しているスティッキーなサービス選択とは、クライアントがあるサービスの特定のインスタンスに障害が発生するまで「スティッキー（固執）」し、その後別のインスタンスを選択する戦略を指します。また、失敗したサービスインスタンスを再試行する期間を指定するバックオフ期間を設定することも可能です。これは、セッションやステートフルなアプリケーションを扱う場合など、同じインスタンスへの一貫した接続を維持することが有益なシナリオで役立ちます。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Enhanced service instances cache expiration policy."
msgstr "サービスインスタンスのキャッシュ有効期限ポリシーの強化。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Since almost the first release, Stork has provided in-memory caching of discovered instances by extending the `CachingServiceDiscovery` class."
msgstr "ほぼ最初のリリースから、Storkは `CachingServiceDiscovery` クラスを拡張することで、発見されたインスタンスのインメモリキャッシュを提供してきました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "As of version 1.3, this capability has been expanded to allow the retention of the cached service instances for a specified duration and the implementation of custom business logic for decision-making and data expiration."
msgstr "バージョン1.3では、この機能が拡張され、キャッシュされたサービス・インスタンスを指定された期間保持し、意思決定やデータ期限切れのためのカスタム・ビジネス・ロジックを実装できるようになりました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"This enhancement was driven by the specific requirements of Kubernetes service discovery as contacting the cluster too frequently can result in performance\n"
"problems. So, out of the box, Stork Kubernetes service discovery now comes with a tailored cache expiration strategy to keep service instances until an event occurs."
msgstr "この機能強化は、Kubernetesサービスディスカバリーに特有の要件によって推進されました。そのため、Kubernetesサービスディスカバリは、イベントが発生するまでサービスインスタンスを保持するための、カスタマイズされたキャッシュ期限切れ戦略を備えています。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "If you would like to do so for your custom service discovery implementations, you need:"
msgstr "カスタム・サービス・ディスカバリーの実装のためにそうしたいのであれば、必要です："

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Extend the CachingServiceDiscovery as mentioned above."
msgstr "上記のようにCachingServiceDiscoveryを拡張します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Implement the `cache` method where the expiration strategy is defined."
msgstr "`cache` メソッドを実装し、そこで期限切れストラテジーを定義します。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Invalidate the cache when the expiration condition evaluates to `true`."
msgstr "有効期限切れ条件が `true` と評価された場合、キャッシュを無効にします。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Look at the example bellow:"
msgstr "下の例を見てください："

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "You can check the https://github.com/smallrye/smallrye-stork/blob/main/service-discovery/kubernetes/src/main/java/io/smallrye/stork/servicediscovery/kubernetes/KubernetesServiceDiscovery.java[Kubernetes Service Discovery code] for further details about an event-based invalidation example."
msgstr "イベントベースの無効化例の詳細については、 link:https://github.com/smallrye/smallrye-stork/blob/main/service-discovery/kubernetes/src/main/java/io/smallrye/stork/servicediscovery/kubernetes/KubernetesServiceDiscovery.java[Kubernetes Service Discoveryのコード] を確認してください。"

#: _posts/2023-11-23-stork-latest-news.adoc
msgid "Observability"
msgstr "Observability"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Observability refers to the ability to understand and gain insights into the internal workings and behaviors of a system through the analysis of its external outputs or observations. Stork observability support has been integrated in Quarkus 3.6.0 release (release planned for next week). This addition brings automated observability to the forefront of service discovery and selection providing a window into how Stork behaves in real-time. Now you can effortlessly monitor metrics such as service discovery and selection durations and error rates."
msgstr "観測可能性とは、外部出力や観測結果の分析を通じて、システムの内部構造や動作を理解し、洞察する能力のことです。Quarkus3.6.0リリース（来週リリース予定）に、Storkの観測可能性サポートが統合されました。この追加により、自動化された観測可能性がサービス発見と選択の最前線にもたらされ、Storkがリアルタイムでどのように動作するかを知ることができます。これにより、サービス発見・選択の所要時間やエラー率などのメトリクスを簡単に監視できるようになりました。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid ""
"If you're leveraging Stork within your Quarkus application, now, you can easily check and analyze metrics such as service discovery and selection\n"
"response times and errors directly in Prometheus. Check the https://quarkus.io/version/main/guides/stork-reference#configure-stork-observability[Stork reference guide] for details."
msgstr "QuarkusアプリケーションでStorkを活用している場合、Prometheusで直接、サービスの検出や選択の応答時間、エラーなどのメトリクスを簡単に確認、分析できるようになりました。詳細については、 link:https://quarkus.io/version/main/guides/stork-reference#configure-stork-observability[Storkのリファレンスガイド] を参照してください。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "In conclusion, all these advancements in Stork signify our commitment to enhancing your experience with service discovery and selection."
msgstr "結論として、Storkのこれら全ての進化は、お客様のサービス発見と選択における経験をより良いものにするという我々のコミットメントの表れです。"

#: _posts/2023-11-23-stork-latest-news.adoc
#, fuzzy
msgid "Stay tuned for more updates. Your feedback is invaluable to us so share it and contribute to making Stork even better."
msgstr "今後ともよろしくお願いいたします。皆様のご意見・ご感想をお待ちしております。"
