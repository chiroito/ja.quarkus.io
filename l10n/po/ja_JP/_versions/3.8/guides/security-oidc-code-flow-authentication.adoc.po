msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.\n"
"Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Authorization code flow mechanism in Quarkus"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Quarkus user requests access to a Quarkus `web-app` application."
msgstr "Quarkusユーザーは、Quarkus `web-app` アプリケーションへのアクセスを要求します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "At the prompt, the user enters their user credentials."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code and redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDCプロバイダは、入力されたユーザーのクレデンシャルを認証し、認証に成功すると認可コードを発行し、そのコードをクエリパラメータとして含むQuarkusウェブアプリにユーザーをリダイレクトします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To learn about how you can protect web applications by using the OIDC Authorization Code Flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]."
msgstr "OIDC認可コードフローメカニズムを使用してWebアプリケーションを保護する方法については、 xref:security-oidc-code-flow-authentication-tutorial.adoc[OIDC認可コードフローを使用してWebアプリケーションを保護するを] 参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Using the authorization code flow mechanism"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Configuring access to the OIDC provider endpoint"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection and end-session (RP-initiated logout) endpoints."
msgstr "OIDC `web-app` アプリケーションは、OIDC プロバイダーの認可、トークン、 `JsonWebKey` （JWK）セット、そして場合によっては `UserInfo` 、イントロスペクション、セッション終了（RP が開始するログアウト）エンドポイントの URL を必要とします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values.\n"
"For example:"
msgstr "また、ディスカバリー・エンドポイントが利用できない場合や、ディスカバリー・エンドポイントのラウンドトリップを減らしたい場合は、エンドポイントのディスカバリーを無効にし、相対パス値を設定することもできます。例えば"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.\n"
"To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr "一部の OIDC プロバイダは、メタデータの検出をサポートしていますが、認可コードフローを完了したり、ユーザーログアウトなどのアプリケーション機能をサポートしたりするために必要なすべてのエンドポイント URL 値を返しません。この制限を回避するには、次の例に示すように、不足しているエンドポイント URL 値をローカルで構成します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.\n"
"For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.\n"
"This URL will log the user out of all the applications into which the user is currently logged in.\n"
"However, if the requirement is for the current application to log the user out of a specific application only, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr "検出されたエンドポイントURLがローカルのQuarkusエンドポイントで機能せず、より具体的な値が必要な場合は、この同じ設定を使用して、エンドポイントURLをオーバーライドできます。たとえば、グローバルエンドセッションエンドポイントとアプリケーション固有のエンドセッションエンドポイントの両方をサポートするプロバイダは、次のようなグローバルエンドセッションURLを返します。 `http://localhost:8180/oidcprovider/account/global-logout` .このURLは、ユーザーが現在ログインしているすべてのアプリケーションからユーザーをログアウトします。ただし、現在のアプリケーションで特定のアプリケーションのみからユーザーをログアウトさせる必要がある場合は、 `quarkus.oidc.end-session-path=logout` パラメータを設定することで、グローバル・エンド・セッション URL をオーバーライドできます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC provider client authentication"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.\n"
"Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class, authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens must be refreshed or introspected."
msgstr "OIDCプロバイダは通常、アプリケーションがOIDCエンドポイントとやり取りする際に、識別と認証を行う必要があります。Quarkus OIDC、特に `quarkus.oidc.runtime.OidcProviderClient` クラスは、認可コードをID、アクセス、リフレッシュトークンと交換する必要がある場合、またはIDやアクセストークンをリフレッシュまたはイントロスペクトする必要がある場合に、OIDCプロバイダを認証します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.\n"
"All https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC client authentication] options are supported.\n"
"For example:"
msgstr "通常、クライアントIDとクライアントシークレットは、アプリケーションがOIDCプロバイダに登録する際に定義されます。すべての link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDCクライアント認証] オプションがサポートされています。例えば"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of  `client_secret_basic`:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Or:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "次の例は、 xref:credentials-provider.adoc[クレデンシャル・プロバイダから] 取得したシークレットを示しています："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_post`"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "`client_secret_jwt` の例。この場合、秘密は xref:credentials-provider.adoc[クレデンシャル・プロバイダから] 取得されます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr "PEM 鍵ファイルを使用した `private_key_jwt` の例。署名アルゴリズムは RS256 です："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr "署名アルゴリズムがRS256のkeystoreファイルによる `private_key_jwt` の例："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a  'man-in-the-middle' attack."
msgstr "`client_secret_jwt` 、または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がOIDCプロバイダに送信されないため、「中間者」攻撃によって秘密が傍受されるリスクを回避できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Additional JWT authentication options"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If `client_secret_jwt`, `private_key_jwt`, or an Apple `post_jwt` authentication methods are used, then you can customize the JWT signature algorithm, key identifier, audience, subject and issuer.\n"
"For example:"
msgstr "`client_secret_jwt` 、 `private_key_jwt` 、またはAppleの `post_jwt` 認証方法が使用されている場合、JWT署名アルゴリズム、キー識別子、オーディエンス、サブジェクト、および発行者をカスタマイズすることができます。例えば"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Apple POST JWT"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method, but with the Apple account-specific issuer and subject claims."
msgstr "Apple OIDC プロバイダは、 `private_key_jwt` 認証方式で生成された JWT を秘密とする `client_secret_post` 方式を使用していますが、Apple アカウント固有の発行者とサブジェクトの主張を使用しています。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr "Quarkus Securityでは、 `quarkus-oidc` 、非標準の `client_secret_post_jwt` 認証方法がサポートされています。この認証方法は、以下のように設定できます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "mutual TLS (mTLS)"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Some OIDC providers might require that a client is authenticated as part of the mutual TLS  authentication process."
msgstr "OIDCプロバイダによっては、相互TLS認証プロセスの一部としてクライアントの認証を要求する場合があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr "次の例は、 `mTLS` をサポートするように `quarkus-oidc` を設定する方法を示しています："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "POST query"
msgstr "POSTクエリ"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Some providers, such as the xref:security-openid-connect-providers#strava[Strava OAuth2 provider], require client credentials be posted as HTTP POST query parameters:"
msgstr "一部のプロバイダ ( xref:security-openid-connect-providers.adoc#strava[Strava OAuth2 プロバイダなど] ) では、クライアントのクレデンシャルを HTTP POST クエリパラメータとして投稿する必要があります："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Introspection endpoint authentication"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers require authentication to its introspection endpoint by using Basic authentication and with credentials that are different from the `client_id` and `client_secret`.\n"
"If you have previously configured security authentication to support either the `client_secret_basic` or `client_secret_post` client authentication methods as described in the <<oidc-provider-client-authentication,OIDC provider client authentication>> section, you might need to apply the additional configuration as follows."
msgstr "OIDC プロバイダの中には、 `client_id` および `client_secret` とは異なる認証情報を使用して、Basic 認証を使用してイントロスペクション・エンドポイントへの認証を必要とするものがあります。 xref:oidc-provider-client-authentication[OIDC プロバイダのクライアント認証の] セクションで説明したように、 `client_secret_basic` または `client_secret_post` のクライアント認証方法のいずれかをサポートするようにセキュリティ認証を以前に構成している場合は、以下のように追加の構成を適用する必要がある場合があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, you can configure `quarkus-oidc` as follows:"
msgstr "トークンをイントロスペクションする必要があり、イントロスペクション・エンドポイント固有の 認証メカニズムが必要な場合は、 `quarkus-oidc` を以下のように設定できます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC request filters"
msgstr "OIDCリクエストフィルター"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers and can also log requests."
msgstr "QuarkusからOIDCプロバイダへのOIDCリクエストをフィルタリングするには、1つまたは複数の `OidcRequestFilter` 、リクエストヘッダを更新または追加したり、リクエストをログに記録したりすることができます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "For example:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Get `OidcConfigurationMetadata`, which contains all supported OIDC endpoint addresses."
msgstr "サポートされているすべての OIDC エンドポイントアドレスを含む `OidcConfigurationMetadata` を取得します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use `OidcConfigurationMetadata` to filter requests to the OIDC token endpoint only."
msgstr "`OidcConfigurationMetadata` を使用して、OIDC トークン エンドポイントへのリクエストのみをフィルタリングします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Alternatively, you can use `OidcRequestFilter.Endpoint` enum to apply this filter to the token endpoint requests only:"
msgstr "あるいは、 `OidcRequestFilter.Endpoint` enum を使って、このフィルタをトークンエンドポイントリクエストだけに適用することもできます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Restrict this filter to requests targeting the OIDC discovery endpoint only."
msgstr "このフィルターをOIDCディスカバリーエンドポイントをターゲットとするリクエストのみに制限します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Redirecting to and from the OIDC provider"
msgstr "OIDCプロバイダーへのリダイレクトおよびOIDCプロバイダーからのリダイレクト"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When a user is redirected to the OIDC provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.\n"
"In our case, this is the Quarkus application."
msgstr "ユーザーが認証のために OIDC プロバイダにリダイレクトされるとき、リダイレクト URL には `redirect_uri` クエリパラメータが含まれます。これは、認証が完了したときにユーザーがどこにリダイレクトされるかをプロバイダに示すものです。私たちの場合、これはQuarkusアプリケーションです。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Quarkus sets this parameter to the current application request URL by default.\n"
"For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.\n"
"Similarly, if the request URL is `http://localhost:8080/service/2`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr "Quarkusは、デフォルトでこのパラメータを現在のアプリケーションリクエストURLに設定します。例えば、ユーザーがQuarkusのサービスエンドポイントにアクセスしようとしている場合、。 `http://localhost:8080/service/1` にアクセスしようとしている場合、 `redirect_uri` パラメータは `http://localhost:8080/service/1` .同様に、リクエストURLが `http://localhost:8080/service/2` である場合、 `redirect_uri` パラメータは `http://localhost:8080/service/2` ."

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.\n"
"In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set.\n"
"For example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr "OIDC プロバイダによっては、 `redirect_uri` が特定のアプリケーションで同じ値であることを要求するものもあります、 `http://localhost:8080/service/callback` このような場合、 プロパティを設定する必要があります。このような場合、 `quarkus.oidc.authentication.redirect-path` プロパティを設定する必要があります。例えば、 `quarkus.oidc.authentication.redirect-path=/service/callback` 、Quarkusは、 `redirect_uri` パラメータを次のような絶対URLに設定します。 `http://localhost:8080/service/callback` これは、現在のリクエストURLに関係なく同じです。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set, but you need the original request URL to be restored after the user is redirected back to a unique callback URL, for example,  `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.\n"
"This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr "`quarkus.oidc.authentication.redirect-path` が設定されていても、ユーザーが固有のコールバックURLにリダイレクトされた後に元のリクエストURLを復元する必要がある場合、例えば、 プロパティを に設定します、 `http://localhost:8080/service/callback` この場合、 `quarkus.oidc.authentication.restore-path-after-redirect` プロパティを `true` に設定します。 これにより、次のようなリクエスト URL が復元されます。 `http://localhost:8080/service/1` ."

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Customizing authentication requests"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to `openid`), `client_id`, `redirect_uri`, and `state` properties are passed as HTTP query parameters to the OIDC provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "デフォルトでは、 `response_type` （ `code` に設定）、 `scope` （ `openid` に設定）、 `client_id` 、 `redirect_uri` 、 `state` プロパティのみが、ユーザが認証のために OIDC プロバイダの認可エンドポイントにリダイレクトされるときに、HTTP クエリパラメータとして渡されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can add more properties to it with `quarkus.oidc.authentication.extra-params`.\n"
"For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.\n"
"The following example shows how you can work around this issue:"
msgstr "`quarkus.oidc.authentication.extra-params` で、さらにプロパティを追加することができます。例えば、OIDCプロバイダによっては認可コードをリダイレクトURIのフラグメントの一部として返すことを選択するかもしれません。次の例は、この問題を回避する方法を示しています："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Customizing the authentication error response"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When the user is redirected to the OIDC authorization endpoint to authenticate and, if necessary, authorize the Quarkus application, this redirect request might fail, for example, when an invalid scope is included in the redirect URI.\n"
"In such cases, the provider redirects the user back to Quarkus with `error` and `error_description` parameters instead of the expected `code` parameter."
msgstr "ユーザーがOIDC認可エンドポイントにリダイレクトされ、Quarkusアプリケーションを認証し、必要に応じて認可する場合、リダイレクトURIに無効なスコープが含まれている場合など、このリダイレクトリクエストが失敗する可能性があります。このような場合、プロバイダはユーザーをQuarkusにリダイレクトし、期待される `code` パラメーターの代わりに `error` と `error_description` パラメーターを返します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr "例えば、プロバイダへのリダイレクトに無効なスコープやその他の無効なパラメータが含まれている場合に起こります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In such cases, an HTTP `401` error is returned by default.\n"
"However, you can request that a custom public error endpoint be called to return a more user-friendly HTML error page.\n"
"To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr "このような場合、デフォルトでは HTTP `401` エラーが返されます。ただし、カスタム・パブリック・エラー・エンドポイントを呼び出して、よりユーザフレンドリな HTML エラー・ページを返すように要求できます。これを行うには、以下の例に示すように、 `quarkus.oidc.authentication.error-path` プロパティを設定します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.\n"
"For example, if it is set to '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope`, then a final redirect is made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "プロパティがフォワード・スラッシュ (/) 文字で始まり、パスが現在のエンドポイントのベース URI からの相対パスであることを確認します。例えば、'/error' に設定され、現在のリクエスト URI が `https://localhost:8080/callback?error=invalid_scope` である場合、最終的なリダイレクト先は `https://localhost:8080/error?error=invalid_scope` ."

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To prevent the user from being redirected to this page to be re-authenticated, ensure that this error endpoint is a public resource."
msgstr "ユーザが再認証のためにこのページにリダイレクトされないようにするには、このエラー・エンドポイントがパブリック・リソースであることを確認してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing authorization data"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can access information about authorization in different ways."
msgstr "認可に関する情報には、さまざまな方法でアクセスできます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing ID and access tokens"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token], access token, and refresh token."
msgstr "OIDCコード認証メカニズムは、認可コードフロー中に3つのトークンを取得します： link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDトークン] 、アクセストークン、リフレッシュトークンです。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The ID token is always a JWT token and represents a user authentication with the JWT claims.\n"
"You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.\n"
"You can access ID token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "IDトークンは常にJWTトークンであり、JWTクレームによるユーザー認証を表します。これを使って発行元のOIDCエンドポイントやユーザー名、その他 _クレームと_ 呼ばれる情報を取得することができます。 `JsonWebToken` に `IdToken` という修飾子をつけることで、IDトークンのクレームにアクセスすることができます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC `web-app` application usually uses the access token to access other endpoints on behalf of the currently logged-in user.\n"
"You can access the raw access token as follows:"
msgstr "OIDC `web-app` アプリケーションは通常、アクセストークンを使用して、現在ログインしているユーザーに代わって他のエンドポイントにアクセスします。生のアクセストークンにアクセスするには、次のようにします："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and cannot be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr "`AccessTokenCredential` は、Quarkus アプリケーションに発行されたアクセストークンが不透明（バイナリ）で、 にパースできない場合や、アプリケーションに内部コンテンツが必要な場合に使用されます。 `web-app` `JsonWebToken` "

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Quarkus OIDC uses the refresh token to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr "Quarkus OIDCは、 xref:session-management[セッション管理] プロセスの一環として、リフレッシュトークンを使用して現在のIDとアクセストークンをリフレッシュします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "User info"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the ID token does not provide enough information about the currently authenticated user, you can get more information from the `UserInfo` endpoint.\n"
"Set the `quarkus.oidc.authentication.user-info-required=true` property to request a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint."
msgstr "ID トークンで現在認証されているユーザーに関する十分な情報が得られない場合は、 `UserInfo` エンドポイントから詳細な情報を取得できます。OIDC `UserInfo` エンドポイントから link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON オブジェクトを要求するには、 `quarkus.oidc.authentication.user-info-required=true` プロパティを設定します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"A request is sent to the OIDC provider `UserInfo` endpoint by using the access token returned with the authorization code grant response, and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object is created.\n"
"`io.quarkus.oidc.UserInfo` can be injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "認可コード付与レスポンスで返されるアクセストークンを使って、OIDCプロバイダ `UserInfo` エンドポイントにリクエストが送信され、 `io.quarkus.oidc.UserInfo` （単純な `jakarta.json.JsonObject` ラッパー）オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` 、SecurityIdentity `userinfo` 属性として注入またはアクセスすることができます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Accessing the OIDC configuration information"
msgstr "OIDC設定情報へのアクセス"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect configuration metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが発見した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータは] `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスできます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens].\n"
"The only difference is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token] is used as a source of the roles by default."
msgstr "検証済みトークンからSecurityIdentityロールにロールがマッピングされる方法は、 xref:security-oidc-bearer-token-authentication.adoc[ベアラ・トークンの] 場合と同じです。唯一の違いは、 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDトーク] ンがデフォルトでロールのソースとして使用されることです。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you use Keycloak, set a `microprofile-jwt` client scope for the ID token to contain a `groups` claim.\n"
"For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak server administration guide]."
msgstr "Keycloakを使用する場合は、IDトークンに `microprofile-jwt` クライアントスコープを設定し、 `groups` クレームを含めます。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloakサーバー管理ガイドを] 参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "However, depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr "ただし、OIDCプロバイダによっては、ロールがアクセストークンやユーザ情報に格納されている場合があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints, then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "アクセストークンにロールが含まれており、このアクセストークンが下流のエンドポイントに伝搬されることを意図していない場合は、 `quarkus.oidc.roles.source=accesstoken` を設定します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If UserInfo is the source of the roles, then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles.role-claim-path` 。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Additionally, you can also use a custom `SecurityIdentityAugmentor` to add the roles.\n"
"For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization].\n"
"You can also map `SecurityIdentity` roles created from token claims to deployment-specific roles with the xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security policy]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` を使用してロールを追加することもできます。詳細は、「 xref:security-customization.adoc#security-identity-customization[SecurityIdentity のカスタマイズ] 」を参照してください。 xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP セキュリティ ポリシーを] 使用して、トークン要求から作成された `SecurityIdentity` ロールをデプロイ固有のロールにマップすることもできます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Ensuring validity of tokens and authentication data"
msgstr "トークンと認証データの有効性の確保"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"A core part of the authentication process is ensuring the chain of trust and validity of the information.\n"
"This is done by ensuring tokens can be trusted."
msgstr "認証プロセスの中核となるのは、信頼の連鎖と情報の妥当性を確保することです。これは、トークンが信頼できることを保証することによって行われます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Token verification and introspection"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[Token verification and introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "OIDC認可コードフロー トークンの検証プロセスは、ベアラー トークン認証トークンの検証とイントロスペクションのロジックに従います。詳細については、「Quarkus OpenID Connect（OIDC）ベアラートークン認証」ガイドの「 xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[トークンの検証とイントロスペクション] 」のセクションを参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus web-app endpoint and is intended to be propagated to the services expecting this access token.\n"
"If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`), then it will also be verified."
msgstr "Quarkus `web-app` アプリケーションでは、アクセストークンは現在の Quarkus ウェブアプリケーショ ンのエンドポイントへのアクセスには使用されず、このアクセストークンを期待するサービスに伝 達されることを目的としているため、デフォルトでは `IdToken` のみが検証されます。アクセストークンに現在のQuarkusエンドポイント（ `quarkus.oidc.roles.source=accesstoken` ）へのアクセスに必要なロールが含まれている場合は、そのロールの検証も行われます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Token introspection and UserInfo cache"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Code flow access tokens are not introspected unless they are expected to be the source of roles.\n"
"However, they will be used to get `UserInfo`.\n"
"There will be one or two remote calls with the code flow access token if the token introspection, `UserInfo`, or both are required."
msgstr "コード・フロー・アクセス・トークンは、ロールのソースとなることが予想されない限り、イントロスペクトされません。ただし、 `UserInfo` 。トークンのイントロスペクション、 `UserInfo` 、またはその両方が必要な場合、コード・フロー・アクセストークンを使用したリモート呼び出しが1つまたは2つ発生します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For more information about using the default token cache or registering a custom cache implementation, see xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token introspection and UserInfo cache]."
msgstr "デフォルトのトークン・キャッシュを使用する方法、またはカスタム・キャッシュ実装を登録する方法の詳細については、「 xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token introspection」および「UserInfo cache] 」を参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "JSON web token claim verification"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For information about the claim verification, including the `iss` (issuer) claim, see the xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON Web Token claim verification] section.\n"
"It applies to ID tokens and also to access tokens in a JWT format, if the `web-app` application has requested the access token verification."
msgstr "`iss` （発行者）クレームを含むクレーム検証に関する情報は、 xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON Web Tokenクレーム検証] セクションを参照してください。これは ID トークンに適用され、 `web-app` アプリケーションがアクセストークンの検証を要求した場合は、JWT 形式のアクセストークンにも適用されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Further security with Proof Key for Code Exchange (PKCE)"
msgstr "コード交換のための証明鍵（PKCE）によるさらなる安全性"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[PKCE（Proof Key for Code Exchange] ）は、認可コードの傍受リスクを最小限に抑えます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"While PKCE is of primary importance to public OIDC clients, such as SPA scripts running in a browser, it can also provide extra protection to Quarkus OIDC `web-app` applications.\n"
"With PKCE, Quarkus OIDC `web-app` applications act as confidential OIDC clients that can securely store the client secret and use it to exchange the code for the tokens."
msgstr "PKCEは、ブラウザで実行されるSPAスクリプトなどのパブリックOIDCクライアントにとって最も重要ですが、Quarkus OIDC `web-app` アプリケーションにも特別な保護を提供できます。PKCEを使用すると、Quarkus OIDC `web-app` アプリケーションは、クライアントシークレットを安全に保存し、トークンのコードを交換するために使用できる、機密性の高いOIDCクライアントとして機能します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can enable PKCE for your OIDC web-app endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret that is required to encrypt the PKCE code verifier in the state cookie, as shown in the following example:"
msgstr "次の例に示すように、 `quarkus.oidc.authentication.pkce-required` プロパティと、状態クッキーの PKCE コード検証子を暗号化するために必要な 32 文字の秘密を使って、OIDC ウェブアプリのエンドポイントで PKCE を有効にできます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you already have a 32-character client secret, you do not need to set the  `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key.\n"
"This secret will be auto-generated if it is not configured and if the fallback to the client secret is not possible in cases where the client secret is less than 16 characters long."
msgstr "すでに32文字のクライアント秘密鍵を持っている場合は、別の秘密鍵を使用したい場合を除き、 `quarkus.oidc.authentication.pkce-secret` プロパティを設定する必要はありません。この秘密鍵が設定されていない場合、およびクライアント秘密鍵が16文字未満の場合にクライアント秘密鍵へのフォールバックができない場合、この秘密鍵は自動生成されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The secret key is required to encrypt a randomly generated PKCE `code_verifier` while the user is redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.\n"
"The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.\n"
"The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr "秘密鍵は、ランダムに生成されたPKCE（ `code_verifier` ）を暗号化するために必要です。その間に、ユーザーは `code_challenge` クエリパラメータでOIDCプロバイダにリダイレクトされ、認証されます。この `code_verifier` は、ユーザーがQuarkusにリダイレクトされて戻ってきたときに復号化され、 `code` 、クライアントシークレット、その他のパラメータと一緒にトークンエンドポイントに送信され、コード交換が完了します。プロバイダは、 `code_verifier` の `SHA256` ダイジェストが、認証リクエスト中に提供された `code_challenge` と一致しない場合、コード交換に失敗します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Handling and controlling the lifetime of authentication"
msgstr "認証のライフタイムの処理と制御"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.\n"
"There are also situations where a logout event is explicitly requested.\n"
"Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr "認証のもう一つの重要な要件は、ユーザがリクエストのたびに認証を要求することなく、 セッションの基となるデータが最新であることを保証することです。また、ログアウトイベントが明示的に要求される状況もあります。以下のポイントを参考に、Quarkusアプリケーションのセキュリティを確保するための適切なバランスを見つけましょう："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Cookies"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.\n"
"This state is a key element controlling the lifetime of authentication data."
msgstr "OIDC アダプタはクッキーを使用して、セッション、コードフロー、ログアウト後の状態を保持します。この状態は、認証データの寿命を制御する重要な要素です。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots.\n"
"For example:"
msgstr "`quarkus.oidc.authentication.cookie-path` プロパティを使用すると、保護されたリソースに重複または異なるルートでアクセスしたときに、同じクッキーが表示されるようになります。例えば"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "`/index.html` and `/web-app/service`"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr "デフォルトでは、 `quarkus.oidc.authentication.cookie-path` は `/` に設定されていますが、必要であればこれをより具体的なパスに変更することができます。例えば、 `/web-app` 。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"Set the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"For example, to set the cookie path dynamically by using the value of the`X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr "クッキーのパスを動的に設定するには、 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定します。 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定します。例えば、HTTPヘッダ`X-Forwarded-Prefix`の値を使用してクッキーのパスを動的に設定するには、プロパティを `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` に設定します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request, then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "`quarkus.oidc.authentication.cookie-path-header` が設定されているが、現在のリクエストに設定された HTTP ヘッダーがない場合、 `quarkus.oidc.authentication.cookie-path` がチェックされます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.\n"
"For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`."
msgstr "アプリケーションが複数のドメインにまたがって展開されている場合は、 `quarkus.oidc.authentication.cookie-domain` プロパティを設定して、保護されているすべてのQuarkusサービスからセッションCookieが見えるようにします。たとえば、次の2つのドメインにQuarkusサービスがデプロイされている場合、 `quarkus.oidc.authentication.cookie-domain` プロパティを `company.net` に設定する必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://whatever.wherever.company.net/"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://another.address.company.net/"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Session cookie and default TokenStateManager"
msgstr "セッションクッキーとデフォルトのTokenStateManager"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or refresh grant responses in an encrypted session cookie."
msgstr "OIDC `CodeAuthenticationMechanism` は、認可コードまたはリフレッシュ・グラント・レスポンスで返される ID、アクセス、およびリフレッシュ・トークンを暗号化されたセッション・クッキーに保持するために、デフォルトの `io.quarkus.oidc.TokenStateManager` インタフェース実装を使用します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "It makes Quarkus OIDC endpoints completely stateless and it is recommended to follow this strategy to achieve the best scalability results."
msgstr "これにより、Quarkus OIDCエンドポイントは完全にステートレスになり、最高のスケーラビリティを実現するには、この戦略に従うことが推奨されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"See the <<db-token-state-manager>> and <<custom-token-state-manager>> sections of this guide for alternative approaches to storing tokens.\n"
"For example, storing tokens in the database or other server-side storage, if you prefer and have good reasons for storing the token state on the server."
msgstr "トークンを格納する別の方法については、このガイドの <<db-token-state-manager>> および <<custom-token-state-manager>> のセクションを参照してください。例えば、トークンの状態をサーバに保存することを好み、正当な理由がある場合は、トークンをデータベースやその他のサーバサイドのストレージに保存します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure the default `TokenStateManager` to avoid saving an access token in the session cookie and to only keep ID and refresh tokens or a single ID token only."
msgstr "デフォルトの `TokenStateManager` 、セッションクッキーにアクセストークンを保存せず、IDとリフレッシュトークンのみ、または単一のIDトークンのみを保存するように設定できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "An access token is only required if the endpoint needs to do the following actions:"
msgstr "アクセストークンは、エンドポイントが以下のアクションを実行する必要がある場合にのみ必要です："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Retrieve `UserInfo`"
msgstr "検索 `UserInfo`"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access the downstream service with this access token"
msgstr "このアクセストークンを使ってダウンストリームサービスにアクセスしてください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Use the roles associated with the access token, which are checked by default"
msgstr "アクセストークンに関連付けられているロールを使用します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr "このような場合は、 `quarkus.oidc.token-state-manager.strategy` プロパティを使用して、以下のようにトークン状態ストラテジーを設定します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To..."
msgstr "には..."

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Set the property to ..."
msgstr "プロパティを ..."

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Keep the ID and refresh tokens only"
msgstr "IDとリフレッシュ・トークンのみを保持"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-tokens`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-refresh-tokens`"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Keep the ID token only"
msgstr "IDトークンのみを保持"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-token`"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If your chosen session cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.\n"
"This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.\n"
"To work around this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token.\n"
"An alternative solution is to have the tokens saved in the database.\n"
"For more information, see <<db-token-state-manager>>."
msgstr "選択したセッション・クッキー戦略がトークンを組み合わせ、4KB を超える大きなセッション・クッキー値を生成する場合、一部のブラウザはそのようなクッキー・サイズを扱えないかもしれません。これは、ID、アクセス、およびリフレッシュ・トークンが JWT トークンで、選択された戦略が `keep-all-tokens` である場合、あるいは戦略が `id-refresh-token` である場合に ID とリフレッシュ・トークンで発生する可能性があります。この問題を回避するには、各トークンに対して一意のセッショントークンを作成するように `quarkus.oidc.token-state-manager.split-tokens=true` を設定します。別の解決策としては、トークンをデータベースに保存する方法があります。詳細については、 <<db-token-state-manager>> を参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The default `TokenStateManager` encrypts the tokens before storing them in the session cookie.\n"
"The following example shows how you configure it to split the tokens and encrypt them:"
msgstr "デフォルトの `TokenStateManager` は、トークンをセッション・クッキーに保存する前に暗号化します。次の例は、トークンを分割して暗号化するように設定する方法を示しています："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The token encryption secret must be at least 32 characters long.\n"
"If this key is not configured, then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr "トークンの暗号化シークレットは少なくとも32文字以上でなければなりません。このキーが設定されていない場合は、 `quarkus.oidc.credentials.secret` または `quarkus.oidc.credentials.jwt.secret` のいずれかがハッシュ化されて暗号化キーが作成されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OIDC provider by using one of the following authentication methods:"
msgstr "Quarkusが以下の認証方法のいずれかを使用してOIDCプロバイダを認証する場合は、 `quarkus.oidc.token-state-manager.encryption-secret` プロパティを設定します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "mTLS"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr "`private_key_jwt` JWT トークンの署名には、RSA または EC の秘密鍵が使用されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr "そうでない場合、ランダムなキーが生成されます。これは、Quarkusアプリケーションがクラウドで実行されていて、複数のポッドがリクエストを管理している場合に問題となる可能性があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr "`quarkus.oidc.token-state-manager.encryption-required=false` を設定することで、セッション・クッキーのトークン暗号化を無効にすることができます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Session cookie and custom TokenStateManager"
msgstr "セッションクッキーとカスタムTokenStateManager"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you want to customize the way the tokens are associated with the session cookie, register a custom `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean."
msgstr "トークンをセッション・クッキーに関連付ける方法をカスタマイズしたい場合は、カスタム `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI Bean を登録します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For example, you might want to keep the tokens in a cache cluster and have only a key stored in a session cookie.\n"
"Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr "例えば、トークンをキャッシュクラスタに保持し、キーのみをセッションクッキーに保存することもできます。トークンを複数のマイクロサービスノードで利用できるようにする必要がある場合、このアプローチにはいくつかの課題があることに注意してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Here is a simple example:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about the default `TokenStateManager` storing tokens in an encrypted session cookie, see <<token-state-manager>>."
msgstr "暗号化されたセッション・クッキーにトークンを保存するデフォルトの `TokenStateManager` については、 <<token-state-manager>> をご覧ください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about the custom Quarkus `TokenStateManager` implementation storing tokens in a database, see <<db-token-state-manager>>."
msgstr "トークンをデータベースに保存する Quarkus `TokenStateManager` のカスタム実装については、 <<db-token-state-manager>> を参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Database TokenStateManager"
msgstr "データベースTokenStateManager"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you prefer to follow a stateful token storage strategy, you can use a custom `TokenStateManager` provided by Quarkus to have your application store tokens in a database, instead of storing them in an encrypted session cookie,  which is done by default as described in the <<token-state-manager>> section."
msgstr "<<token-state-manager>> ステートフル・トークン・ストレージ戦略に従う必要がある場合は、Quarkusが提供するカスタム `TokenStateManager` 、アプリケーションにトークンをデータベースに保存させることができます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "To use this feature, add the following extension to your project:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This extension will replace the default `io.quarkus.oidc.TokenStateManager' with a database-based one."
msgstr "このエクステンションはデフォルトの `io.quarkus.oidc.TokenStateManager' をデータベースベースのものに置き換えます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC Database Token State Manager uses a Reactive SQL client under the hood to avoid blocking because the authentication is likely to happen on an IO thread."
msgstr "OIDCデータベース・トークン・ステート・マネージャは、認証がIOスレッド上で行われる可能性が高いため、ブロッキングを回避するために、フード下でReactive SQLクライアントを使用します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Depending on your database, include and configure exactly one xref:reactive-sql-clients.adoc[Reactive SQL client].\n"
"The following Reactive SQL clients are supported:"
msgstr "使用するデータベースに応じて、 xref:reactive-sql-clients.adoc[Reactive SQL クライアントを] 1 つだけ組み込み、構成します。以下の Reactive SQL クライアントをサポートしています："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Reactive Microsoft SQL client"
msgstr "反応型Microsoft SQLクライアント"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive MySQL client"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive PostgreSQL client"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive Oracle client"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive DB2 client"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Your application is not required to switch to using the Reactive SQL client if it already uses Hibernate ORM with one of the JDBC driver extensions."
msgstr "アプリケーションですでに Hibernate ORM と JDBC ドライバ・エクステンションのいずれかを使用している場合は、Reactive SQL クライアントの使用に切り替える必要はありません。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, you already have an application that uses the Hibernate ORM extension together with a PostgreSQL JDBC Driver and your datasource is configured like this:"
msgstr "たとえば、Hibernate ORM エクステンションと PostgreSQL JDBC ドライバを使用するアプリケーションがあり、データソースが次のように構成されているとします："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, if you decided to use OIDC Database Token State Manager, you must add the following dependencies and set a reactive driver URL:"
msgstr "OIDC Database Token State Manager を使用する場合は、以下の依存関係を追加し、リアクティブ・ドライバ URL を設定する必要があります："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, the tokens are ready to be stored in the database."
msgstr "これでトークンをデータベースに格納する準備ができました。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, a database table used for storing tokens is created for you, however, you can disable this option with the `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` configuration property.\n"
"Should you want the Hibernate ORM extension to create this table instead, you must just include an Entity, such as the following:"
msgstr "デフォルトでは、トークンを格納するためのデータベーステーブルが作成されますが、 `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` 設定プロパティでこのオプションを無効にすることができます。代わりに Hibernate ORM エクステンションにこのテーブルを作成させたい場合は、次のようなエンティティを含める必要があります："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The Hibernate ORM extension will only create this table for you when the database schema is generated.\n"
"For more information, refer to the xref:hibernate-orm.adoc[Hibernate ORM] guide."
msgstr "Hibernate ORM エクステンションは、データベーススキーマの生成時にのみこのテーブルを作成します。詳細については、 xref:hibernate-orm.adoc[Hibernate ORM] ガイドを参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can choose a column length depending on the length of your tokens."
msgstr "トークンの長さに応じて列の長さを選択できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Logout and expiration"
msgstr "ログアウトと有効期限"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr "認証情報が失効する主な原因は2つあります。トークンの有効期限が切れて更新されなかったか、明示的なログアウト操作がトリガーされたかです。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Let's start with explicit logout operations."
msgstr "まず、明示的なログアウト操作から始めましょう。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "User-initiated logout"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\", then the logout request must be sent to `https://application.com/webapp/logout`."
msgstr "ユーザーは、 `quarkus.oidc.logout.path` プロパティで設定された Quarkus エンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求できます。例えば、エンドポイントアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が \"/logout\" に設定されている場合、ログアウト要求は `https://application.com/webapp/logout` ."

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"This logout request starts an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout].\n"
"The user will be redirected to the OIDC provider to log out, where they can be asked to confirm the logout is indeed intended."
msgstr "このログアウト要求は、 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP主導のログアウトを] 開始します。ユーザはログアウトするためにOIDCプロバイダにリダイレクトされ、そこでログアウトが本当に意図されたものであるか確認されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The user will be returned to the endpoint post-logout page once the logout has been completed and if the `quarkus.oidc.logout.post-logout-path` property is set.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\", then the user will be returned to `https://application.com/webapp/signin`.\n"
"Note, this URI must be registered as a valid `post_logout_redirect_uri` in the OIDC provider."
msgstr "ログアウトが完了し、 `quarkus.oidc.logout.post-logout-path` プロパティが設定されている場合、ユーザはエンドポイントのポストログアウトページに戻ります。例えば、エンドポイントアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.post-logout-path` が \"/signin\" に設定されている場合、ユーザは次のページに戻ります。 `https://application.com/webapp/signin` .この URI は、OIDC プロバイダに有効な `post_logout_redirect_uri` として登録されている必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the `quarkus.oidc.logout.post-logout-path` is set, then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OIDC provider will return this `state` once the logout has been completed.\n"
"It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie, which can be done, for example, in a Jakarta REST filter."
msgstr "`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` Cookie が作成され、一致する `state` クエリパラメータがログアウトリダイレクト URI に追加され、ログアウトが完了すると OIDC プロバイダはこの `state` を返します。Quarkus `web-app` アプリケーションでは、 `state` クエリパラメータが `q_post_logout` Cookie の値と一致するかどうかを確認することをお勧めします。これは、例えば Jakarta REST フィルタで実行できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy].\n"
"For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connectマルチテナントを] 使用する場合、Cookie名は異なることに注意してください。例えば、 `tenant_1` IDを持つテナントの場合、 `q_post_logout_tenant_1` という名前になります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Here is an example of how to configure a Quarkus application to initiate a logout flow:"
msgstr "ログアウトフローを開始するためのQuarkusアプリケーションの設定例を示します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You might also want to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources, which is `/` in this example.\n"
"For more information, see the <<oidc-cookies,Cookies>> section."
msgstr "また、 `quarkus.oidc.authentication.cookie-path` をすべてのアプリケーション・リソースに共通のパス値に設定することもできます。この例では、 `/` です。詳細については、 xref:oidc-cookies[クッキーの] セクションを参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some OIDC providers do not support a link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.\n"
"However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr "OIDCプロバイダの中には、 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RPによるログアウト] 仕様に対応しておらず、OpenID Connect周知の `end_session_endpoint` メタデータプロパティを返さないものもあります。しかし、このようなOIDCプロバイダの特定のログアウトメカニズムは、ログアウトURLのクエリパラメータの名前の付け方が異なるだけなので、Quarkusにとっては問題ではありません。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr "link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiatedログアウト] 仕様によると、 `quarkus.oidc.logout.post-logout-path` プロパティは、 `post_logout_redirect_uri` クエリパラメータとして表現されます。これは、この仕様をサポートしていないプロバイダでは認識されません。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue.\n"
"You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`.\n"
"For example, here is how you can support a logout with `Auth0`:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Back-channel logout"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC provider can force the logout of all applications by using the authentication data.\n"
"This is known as back-channel logout.\n"
"In this case, the OIDC will call a specific URL from each application to trigger that logout."
msgstr "OIDC プロバイダは、認証データを使用して、すべてのアプリケーションを強制的にログアウトさせることができます。これはバックチャネルログアウトとして知られています。この場合、OIDC は各アプリケーションから特定の URL を呼び出し、ログアウトをトリガーします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC providers use link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-channel logout] to log out the current user from all the applications into which this user is currently logged in, bypassing the user agent."
msgstr "OIDCプロバイダは、 link:https://openid.net/specs/openid-connect-backchannel-1_0.html[バックチャネルログアウトを] 使用して、ユーザエージェントをバイパスして、そのユーザが現在ログインしているすべてのアプリケーションから現在のユーザをログアウトします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure Quarkus to support Back-channel logout as follows:"
msgstr "バックチャネルログアウトをサポートするようにQuarkusを設定するには、次のようにします："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.\n"
"You will need to configure this URL in the admin console of your OIDC provider."
msgstr "絶対的な `back-channel logout` URL は、現在のエンドポイント URL に `quarkus.oidc.back-channel-logout.path` を追加することで計算されます、 `http://localhost:8080/back-channel-logout` .このURLは、OIDCプロバイダの管理コンソールで設定する必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You will also need to configure a token age property for the logout token verification to succeed if your OIDC provider does not set an expiry claim in the current logout token.\n"
"For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr "また、OIDCプロバイダが現在のログアウトトークンに有効期限を設定していない場合、ログアウトトークン検証を成功させるためにトークン年齢プロパティを設定する必要があります。例えば、 `quarkus.oidc.token.age=10S` を設定して、ログアウトトークンの `iat` （発行時刻）から 10 秒以上経過しないようにします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Front-channel logout"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can use link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-channel logout] to log out the current user directly from the user agent, for example, its browser.\n"
"It is similar to <<back-channel-logout,Back-channel logout>> but the logout steps are executed by the user agent, such as the browser, and not in the background by the OIDC provider.\n"
"This option is rarely used."
msgstr "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[フロントチャネルログアウトを] 使用すると、ユーザエージェント（ブラウザなど）から現在のユーザを直接ログアウトすることができます。これは xref:back-channel-logout[バックチャネルログアウトと似て] いますが、ログアウトの手順はOIDCプロバイダによってバックグラウンドで実行されるのではなく、ブラウザなどのユーザーエージェントによって実行されます。このオプションはほとんど使用されません。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure Quarkus to support Front-channel logout as follows:"
msgstr "Quarkusでフロントチャンネルのログアウトをサポートするには、以下のように設定します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This path will be compared to the current request's path, and the user will be logged out if these paths match."
msgstr "このパスは現在のリクエストのパスと比較され、これらのパスがマッチする 場合、ユーザはログアウトします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Local logout"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"<<user-initiated-logout,User-initiated logout>> will log the user out of the OIDC provider.\n"
"If it is used as single sign-on, it might not be what you require.\n"
"If, for example, your OIDC provider is Google, you will be logged out from Google and its services.\n"
"Instead, the user might just want to log out of that specific application.\n"
"Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr "xref:user-initiated-logout[ユーザーによるログアウトは] 、ユーザーをOIDCプロバイダーからログアウトさせます。シングルサインオンとして使用される場合、それはあなたが必要とするものではないかもしれません。例えば、あなたのOIDCプロバイダがGoogleの場合、あなたはGoogleとそのサービスからログアウトすることになります。代わりに、ユーザーは特定のアプリケーションからログアウトしたいだけかもしれません。もう1つのユースケースは、OIDCプロバイダがログアウトエンドポイントを持っていない場合です。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "By using <<oidc-session,OidcSession>>, you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr "xref:oidc-session[OidcSession を] 使用することで、次の例に示すように、ローカル・セッション・クッキーだけがクリアされるローカル・ログアウトをサポートすることができます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Using `OidcSession` for local logout"
msgstr "`OidcSession` をローカルログアウトに使用"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a <<local-logout,Local logout>>, retrieve the current session's tenant identifier, and check when the session will expire.\n"
"More useful methods will be added to it over time."
msgstr "`io.quarkus.oidc.OidcSession` `IdToken` xref:local-logout[ローカルログアウトの] 実行、現在のセッションのテナント識別子の取得、 セッションの期限切れの確認などを行うことができます。さらに便利なメソッドが追加される予定です。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Session management"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, logout is based on the expiration time of the ID token issued by the OIDC provider.\n"
"When the ID token expires, the current user session at the Quarkus endpoint is invalidated, and the user is redirected to the OIDC provider again to authenticate.\n"
"If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr "デフォルトでは、ログアウトはOIDCプロバイダによって発行されたIDトークンの有効期限に基づいて行われます。IDトークンの有効期限が切れると、Quarkusエンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度OIDCプロバイダーにリダイレクトされます。OIDCプロバイダのセッションがまだ有効な場合、ユーザーは再度クレデンシャルを入力することなく、自動的に再認証されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.\n"
"If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr "`quarkus.oidc.token.refresh-expired` プロパティを有効にすると、現在のユーザー・セッションを自動的に拡張できます。 `true` に設定されている場合、現在の ID トークンの有効期限が切れると、リフレッシュ・トークン付与が使用され、ID トークンがリフレッシュされるだけでなく、アクセス・トークンやリフレッシュ・トークンもリフレッシュされます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow, then that script will also control the SPA authentication session lifespan."
msgstr "`keycloak.js` のようなOIDCプロバイダスクリプトが認可コードフローを管理している xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[サービスアプリケーション用のシングルページアプリケーションが] ある場合、そのスクリプトはSPA認証セッションの寿命も制御することになります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you work with a Quarkus OIDC `web-app` application, then the Quarkus OIDC code authentication mechanism manages the user session lifespan."
msgstr "Quarkus OIDC `web-app` アプリケーションで作業する場合、Quarkus OIDCコード認証メカニズムがユーザーセッションの寿命を管理します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"To use the refresh token, you should carefully configure the session cookie age.\n"
"The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr "リフレッシュ・トークンを使用するには、セッション・クッキーの年齢を慎重に設定する必要があります。セッション年齢はIDトークンの寿命より長く、リフレッシュ・トークンの寿命に近いか等しくなければなりません。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr "現在の ID トークンの寿命値と、 `quarkus.oidc.authentication.session-age-extension` と `quarkus.oidc.token.lifespan-grace` プロパティの値を足すことで、セッション年齢を計算します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.\n"
"You use the `quarkus.oidc.token.lifespan-grace` property only to consider some small clock skews."
msgstr "必要であれば、 `quarkus.oidc.authentication.session-age-extension` プロパティだけを使用して、セッションの寿命を大幅に延ばします。 `quarkus.oidc.token.lifespan-grace` プロパティを使用するのは、わずかなクロック・スキューを考慮するためだけです。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.\n"
"The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr "現在の認証済みユーザーが保護されたQuarkusエンドポイントに戻り、セッションクッキーに関連付けられたIDトークンの有効期限が切れた場合、デフォルトでは、ユーザーは自動的にOIDC認可エンドポイントにリダイレクトされ、再認証が行われます。OIDCプロバイダは、ユーザとこのOIDCプロバイダ間のセッションがまだアクティブである場合、再度ユーザに認証を要求する可能性があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (and the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.\n"
"This refresh token might also be recycled (refreshed) itself as part of this process.\n"
"As a result, the new session cookie is created, and the session is extended."
msgstr "`quarkus.oidc.token.refresh-expired` が `true` に設定されている場合、有効期限が切れた ID トークン（およびアクセストークン）は、最初の認可コード付与レスポンスとともに返されたリフレッシュトークンを使用してリフレッシュされます。このリフレッシュ・トークンは、このプロセスの一環として、それ自体も再利用（リフレッシュ）されるかもしれません。その結果、新しいセッションクッキーが作成され、セッションが拡張されます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.\n"
"If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.\n"
"Quarkus assumes that this request is the first authentication request.\n"
"Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr "ユーザーがあまりアクティブでない場合、 `quarkus.oidc.authentication.session-age-extension` プロパティを使用して、期限切れの ID トークンを処理することができます。IDトークンの有効期限が切れると、次のユーザーリクエストの際にセッションクッキーがQuarkusエンドポイントに返されない可能性があります。Quarkusは、このリクエストが最初の認証リクエストであると想定しています。 `quarkus.oidc.authentication.session-age-extension` は、ほとんどアクティブでないユーザーにとって _適度な_ 長さに設定し、セキュリティポリシーに従ってください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.\n"
"Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh.\n"
"If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew`, then it is refreshed, and the new session cookie is created.\n"
"This property should be set to a value that is less than the ID token lifespan; the closer it is to this lifespan value, the more often the ID token is refreshed."
msgstr "さらに一歩進んで、期限切れ間近の ID トークンやアクセストークンを積極的にリフレッシュすることもできます。 `quarkus.oidc.token.refresh-token-time-skew` に、リフレッシュを予期する値を設定します。現在のユーザ・リクエスト中に、現在の ID トークンの有効期限がこの `quarkus.oidc.token.refresh-token-time-skew` 内に切れると計算された場合、ID トークンはリフレッシュされ、新しいセッション・クッキーが作成されます。このプロパティには、ID トークンの寿命よりも短い値を設定する必要があります。この寿命の値に近ければ近いほど、ID トークンはより頻繁にリフレッシュされます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint periodically to emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr "シンプルなJavaScript関数でQuarkusエンドポイントに定期的にpingを送信し、ユーザーのアクティビティをエミュレートすることで、このプロセスをさらに最適化できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You cannot extend the user session indefinitely.\n"
"The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "ユーザーセッションを無期限に延長することはできません。IDトークンの有効期限が切れた復帰ユーザーは、リフレッシュトークンの有効期限が切れると、OIDCプロバイダのエンドポイントで再認証する必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr "GitHubおよびOIDC以外のOAuth2プロバイダとの統合"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Some well-known providers such as GitHub or LinkedIn are not OpenID Connect providers, but OAuth2 providers that support the `authorization code flow`.\n"
"For example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].\n"
"Remember, OIDC is built on top of OAuth2."
msgstr "GitHubやLinkedInのような有名なプロバイダはOpenID Connectプロバイダではなく、 `authorization code flow` をサポートするOAuth2プロバイダです。 例えば、 link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2や] link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] などです。OIDCはOAuth2の上に構築されていることを忘れないでください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The main difference between OIDC and OAuth2 providers is that OIDC providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "OIDC プロバイダと OAuth2 プロバイダの主な違いは、OIDC プロバイダは `OAuth2` プロバイダが返す標準認可コードフロー `access` および `refresh` トークンに加えて、ユーザ認証を表す `ID Token` を返すことです。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OAuth2 providers such as GitHub do not return `IdToken`, and the user authentication is implicit and indirectly represented by the `access` token.\n"
"This `access` token represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "GitHub などの OAuth2 プロバイダは `IdToken` を返さないため、ユーザー認証は `access` トークンによって暗黙的かつ間接的に表現されます。この `access` トークンは、現在のQuarkus `web-app` アプリケーションが認証されたユーザーに代わってデータにアクセスすることを認可する、認証されたユーザーを表します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.\n"
"This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.\n"
"This approach is similar to the OIDC <<user-info,UserInfo>> approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr "OIDCの場合、認証の有効性の証明としてIDトークンを検証しますが、OAuth2の場合はアクセストークンを検証します。これは、アクセストークンを必要とし、通常ユーザー情報を返すエンドポイントを呼び出すことで行われます。このアプローチは、OIDCの xref:user-info[UserInfo] アプローチに似ています。 `UserInfo` 、Quarkus OIDCがユーザーに代わって取得します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token, which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr "例えば、GitHubと連携する場合、Quarkusエンドポイントは `access` トークンを取得できます。これにより、Quarkusエンドポイントは現在のユーザーのGitHubプロファイルを要求できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "このような OAuth2 サーバーとの統合をサポートするために、 `quarkus-oidc` は、 `IdToken` : `quarkus.oidc.authentication.id-token-required=false` を使用せずに認可コードフローのレスポンスを許可するように、少し異なる設定をする必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.\n"
"You use an `IdToken` to support the authentication session and to avoid redirecting the user to the provider,  such as GitHub, on every request.\n"
"In this case, the session lifespan is set to 5 minutes, which you can extend further as described in the <<session-management,session management>> section."
msgstr "`IdToken` なしで認証コードフローをサポートするように拡張機能を設定しても、 `quarkus-oidc` の動作方法を標準化するために内部で `IdToken` が生成されます。 `IdToken` を使うのは、認証セッションをサポートするためと、リクエストのたびにユーザーを GitHub などのプロバイダーにリダイレクトさせないためです。この場合、セッションの有効期限は5分に設定されています。 xref:session-management[セッション] 管理のセクションで説明するように、さらに延長することができます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr "これにより、複数のOIDCプロバイダをサポートするアプリケーションの取り扱いが簡単になります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.\n"
"The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.\n"
"In this case, you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.\n"
"If no introspection endpoint is present, you can attempt instead to request <<user-info,UserInfo>> from the provider as it will at least validate the access token.\n"
"To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.\n"
"You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).\n"
"For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr "次のステップは、返されたアクセストークンが有用であり、現在のQuarkusエンドポイントに対して有効であることを確認することです。最初の方法は、プロバイダがそのようなエンドポイントを提供している場合、 `quarkus.oidc.introspection-path` を設定して OAuth2 プロバイダのイントロスペクションエンドポイントを呼び出すことです。この場合、 `quarkus.oidc.roles.source=accesstoken` を使用して、ロールのソースとしてアクセストークンを使用できます。イントロスペクション・エンドポイントがない場合は、少なくともアクセストークンを検証するため、代わりにプロバイダから xref:user-info[UserInfoを] 要求することができます。そのためには、 `quarkus.oidc.token.verify-access-token-with-user-info=true` を指定してください。また、 `quarkus.oidc.user-info-path` プロパティに、ユーザー情報を取得する URL エンドポイント（またはアクセストークンで保護されたエンドポイント）を設定する必要があります。GitHub の場合は introspection エンドポイントがないので、UserInfo をリクエストする必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Requiring <<user-info,UserInfo>> involves making a remote call on every request.\n"
"Therefore, you might want to consider caching `UserInfo` data.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "xref:user-info[UserInfoを] 要求することは、リクエスト毎にリモートコールを行うことになります。そのため、 `UserInfo` データのキャッシュを検討するとよいでしょう。詳細については、\"OpenID Connect (OIDC) Bearer token authentication\" ガイドの xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] セクションを参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Alternatively, you might want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property.\n"
"The advantage of this approach is that, by default, no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie.\n"
"You might also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data.\n"
"For more information, see <<token-state-manager,Encrypt tokens with TokenStateManager>>."
msgstr "あるいは、 `quarkus.oidc.cache-user-info-in-idtoken=true` プロパティを使って、 `UserInfo` が内部生成された `IdToken` に埋め込まれるようにリクエストすることもできます。このアプローチの利点は、デフォルトでは、キャッシュされた `UserInfo` の状態がエンドポイントに保持されないことです。この場合、 `UserInfo` に機密データが含まれている場合は、 `IdToken` を暗号化することも検討するとよいでしょう。詳細は xref:token-state-manager[TokenStateManager でトークンを暗号化] する を参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"OAuth2 servers might not support a well-known configuration endpoint.\n"
"In this case, you must disable the discovery and configure the authorization, token, and introspection and `UserInfo` endpoint paths manually."
msgstr "OAuth2 サーバは、よく知られた設定エンドポイントをサポートしていないかもしれません。この場合、ディスカバリを無効にし、認可、トークン、イントロスペクション、 `UserInfo` エンドポイントのパスを手動で設定する必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For well-known OIDC or OAuth2 providers, such as Apple, Facebook, GitHub, Google, Microsoft, Spotify, and Twitter, Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.\n"
"Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application].\n"
"Configure your Quarkus endpoint like this:"
msgstr "Apple、Facebook、GitHub、Google、Microsoft、Spotify、Twitterなどの有名なOIDCまたはOAuth2プロバイダーの場合、Quarkusを使用すると、 `quarkus.oidc.provider` プロパティを使用してアプリケーションの設定を大幅に簡素化できます。ここでは、 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub OAuthアプリケーションを作成] した後に、 `quarkus-oidc` をGitHubと統合する方法を説明します。Quarkusのエンドポイントを次のように設定します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For more information about configuring other well-known providers, see xref:security-openid-connect-providers.adoc[OpenID Connect providers]."
msgstr "その他のよく知られたプロバイダの設定については、 xref:security-openid-connect-providers.adoc[OpenID Connectプロバイダを] 参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This is all that is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "これは、このようなエンドポイントが、現在認証されているユーザのプロファイルを `GET http://localhost:8080/github/userinfo` を返し、個々の `UserInfo` プロパティとしてアクセスするために必要なものです："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google, which is an OIDC provider that returns `IdToken`, and GitHub, which is an OAuth2 provider that does not return `IdToken` and only allows access to `UserInfo`, then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows.\n"
"A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally-generated `IdToken` will be replaced with the `UserInfo`-based principal when the GitHub flow is active:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy] を使って複数のソーシャル・プロバイダーをサポートする場合、例えば `IdToken` を返す OIDC プロバイダーである Google と、 `IdToken` を返さず `UserInfo` へのアクセスのみを許可する OAuth2 プロバイダーである GitHub をサポートする場合、Google と GitHub の両方のフローで注入された `SecurityIdentity` だけでエンドポイントを動作させることができます。GitHub フローがアクティブな場合は、 `SecurityIdentity` をオーグメンテーションして、 `IdToken` で作成したプリンシパルを `UserInfo` ベースのプリンシパルに置き換える必要があります："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr "これで、ユーザーが Google や GitHub を使ってアプリケーションにサインインしたときに次のコードが動作するようになります："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when handling the providers that return `IdToken` and use `UserInfo` with the providers that do not return `IdToken`."
msgstr "`@IdToken JsonWebToken` と `UserInfo` の両方をインジェクトし、 `IdToken` を返すプロバイダを処理するときに `JsonWebToken` を使用し、 `IdToken` を返さないプロバイダで `UserInfo` を使用するという、よりシンプルな方法もあります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you want the user to be redirected after a successful GitHub authentication and application authorization.\n"
"In this case, it has to be set to `http:localhost:8080/github/userinfo`."
msgstr "GitHub OAuth アプリケーションの設定で入力するコールバックパスは、GitHub 認証とアプリケーションの認可に成功した後にユーザーをリダイレクトさせたいエンドポイントパスと一致していることを確認する必要があります。この場合は、 `http:localhost:8080/github/userinfo` に設定する必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Listening to important authentication events"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.\n"
"When a user logs in for the first time, re-authenticates, or refreshes the session, the listener is updated.\n"
"In the future, more events might be reported.\n"
"For example:"
msgstr "重要な OIDC 認証イベントを監視する `@ApplicationScoped` Bean を登録できます。ユーザが初めてログインしたり、再認証したり、セッションをリフレッシュしたりすると、リスナーが更新されます。将来的には、さらに多くのイベントが報告されるようになるかもしれません。例えば"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can listen to other security events as described in the xref:security-customization.adoc#observe-security-events[Observe security events] section of the Security Tips and Tricks guide."
msgstr "セキュリティのヒントとコツ」ガイドの「 xref:security-customization.adoc#observe-security-events[セキュリティイベントの監視] 」セクションで説明されているように、他のセキュリティイベントを聞くことができます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Propagating tokens to downstream services"
msgstr "下流サービスへのトークンの伝播"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr "認可コードフローから下流のサービスへのアクセストークンの伝播については、「 xref:security-openid-connect-client-reference.adoc#token-propagation[トークンの伝播] 」のセクションを参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Integration considerations"
msgstr "統合に関する考慮事項"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Your application secured by OIDC integrates in an environment where it can be called from single-page applications.\n"
"It must work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, and so on."
msgstr "OIDCによって保護されたアプリケーションは、シングルページのアプリケーションから呼び出せる環境に統合されます。よく知られたOIDCプロバイダと連携し、HTTPリバースプロキシの背後で動作し、外部および内部アクセスを必要とするなど、さまざまな条件があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This section discusses these considerations."
msgstr "このセクションでは、これらの考慮事項について説明します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Single-page applications"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr "OpenID Connect (OIDC) ベアラートークン認証」ガイドの「 xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[シングルページアプリケーション] 」セクションで提案されている方法でシングルページアプリケーション (SPA) を実装することが要件に合っているかどうかを確認できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OIDC providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.\n"
"This will lead to authentication failures if the Quarkus application and the OIDC provider are hosted on different HTTP domains, ports, or both."
msgstr "SPAやJavaScript API（ `Fetch` 、 `XMLHttpRequest` (XHR)など）をQuarkusウェブアプリケーションで使用する場合、OIDCプロバイダは、Quarkusからのリダイレクト後にユーザーが認証される認可エンドポイントに対して、クロスオリジンリソース共有（CORS）をサポートしていない可能性があることに注意してください。QuarkusアプリケーションとOIDCプロバイダーが異なるHTTPドメイン、ポート、またはその両方でホストされている場合、認証に失敗する可能性があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value."
msgstr "このような場合、 `quarkus.oidc.authentication.java-script-auto-redirect` プロパティを `false` に設定します。これにより、Quarkusは `499` ステータスコードと `WWW-Authenticate` ヘッダーを `OIDC` 値で返すように指示します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "The browser script must set a header to identify the current request as a JavaScript request for a `499` status code to be returned when the `quarkus.oidc.authentication.java-script-auto-redirect` property is set to `false`."
msgstr "ブラウザスクリプトは、 `quarkus.oidc.authentication.java-script-auto-redirect` プロパティが `false` に設定されているときに返される `499` ステータスコードのために、現在のリクエストを JavaScript リクエストとして識別するヘッダを設定する必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If the script engine sets an engine-specific request header itself, then you can register a custom `quarkus.oidc.JavaScriptRequestChecker` bean, which will inform Quarkus if the current request is a JavaScript request. For example, if the JavaScript engine sets a header such as `HX-Request: true`, then you can have it checked like this:"
msgstr "スクリプトエンジンがエンジン固有のリクエストヘッダを自分で設定する場合、カスタム `quarkus.oidc.JavaScriptRequestChecker` Beanを登録できます。このBeanは、現在のリクエストがJavaScriptリクエストであるかどうかをQuarkusに通知します。たとえば、JavaScriptエンジンが `HX-Request: true` のようなヘッダーを設定する場合、次のようにチェックすることができます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "and reload the last requested page in case of a `499` status code."
msgstr "また、 `499` ステータスコードの場合は、最後にリクエストされたページを再読み込みします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Otherwise, you must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code."
msgstr "そうでなければ、 `X-Requested-With` ヘッダーを `JavaScript` 値で設定し、 `499` ステータスコードの場合に最後にリクエストされたページを再読み込みするように、ブラウザーのスクリプトも更新する必要があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Cross-origin resource sharing"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr "別のドメインで実行されているシングルページのアプリケーションからこのアプリケーションを利用する場合は、クロスオリジンリソース共有（CORS）を設定する必要があります。詳細については、「クロスオリジンリソース共有」ガイドの xref:security-cors.adoc#cors-filter[CORSフィルターの] セクションを参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Calling Cloud provider services"
msgstr "クラウドプロバイダーサービスの呼び出し"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Google Cloud"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OIDC authorization code flow permissions to such services in their Google developer consoles."
msgstr "Quarkus OIDC `web-app` アプリケーションが、Google開発者コンソールでOIDC認可コードフローの許可を有効にしている、現在認証されているユーザーに代わって、 *BigQueryなどの* *Google Cloudサービスに* アクセスできます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"You can do so by using https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services].\n"
"You need only to add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency as shown in the following example:"
msgstr "link:https://github.com/quarkiverse[Quarkiverseの] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[Googleクラウド] サービスを使用することで可能です。次の例に示すように、 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新のタグ] サービスの依存関係を追加するだけです："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Then, configure Google OIDC properties:"
msgstr "次に、Google OIDCプロパティを設定します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Running Quarkus application behind a reverse proxy"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy, gateway, or firewall when HTTP `Host` header might be reset to the internal IP address and HTTPS connection might be terminated, and so on.\n"
"For example, an authorization code flow `redirect_uri` parameter might be set to the internal host instead of the expected external one."
msgstr "OIDC認証メカニズムは、Quarkusアプリケーションがリバースプロキシ、ゲートウェイ、またはファイアウォールの背後で実行されている場合、HTTP `Host` ヘッダーが内部IPアドレスにリセットされたり、HTTPS接続が終了したりするなどの影響を受ける可能性があります。例えば、認可コードフロー `redirect_uri` パラメータが、想定される外部ホストではなく内部ホストに設定される可能性があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"In such cases, configuring Quarkus to recognize the original headers forwarded by the proxy will be required.\n"
"For more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr "このような場合、プロキシによって転送された元のヘッダーを認識するようにQuarkusを設定する必要があります。詳細については、 xref:http-reference.adoc#reverse-proxy[リバースプロキシの背後で実行する] vert.xドキュメントのセクションを参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress, then a redirect from the OIDC provider back to this endpoint might not work because the calculated `redirect_uri` parameter might point to the internal endpoint address.\n"
"You can resolve this problem by using the following configuration, where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address.:"
msgstr "例えば、QuarkusエンドポイントがKubernetes Ingressの背後にあるクラスタで実行されている場合、計算された `redirect_uri` パラメータが内部エンドポイントアドレスを指す可能性があるため、OIDCプロバイダからこのエンドポイントへのリダイレクトが機能しない可能性があります。以下の設定を使用することで、この問題を解決できます。 `X-ORIGINAL-HOST` は、Kubernetes Ingressによって外部エンドポイントアドレスを表すように設定されます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property can also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` プロパティは、QuarkusアプリケーションがSSL終端リバースプロキシの背後で実行されている場合にも使用できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "External and internal access to the OIDC provider"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"The OIDC provider externally-accessible authorization, logout, and other endpoints can have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to the `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases, the endpoint might report an issuer verification failure and redirects to the externally-accessible OIDC provider endpoints might fail."
msgstr "OIDC プロバイダが外部からアクセス可能な認可、ログアウト、およびその他のエンドポイントは、 `quarkus.oidc.auth-server-url` 内部 URL に対して自動検出または設定された URL と比較して、異なる HTTP(S) URL を持つ可能性があります。このような場合、エンドポイントは発行者検証の失敗を報告し、外部からアクセス可能な OIDC プロバイダのエンドポイントへのリダイレクトに失敗する可能性があります。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"If you work with Keycloak, then start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally-accessible base URL.\n"
"If you work with other OIDC providers, check the documentation of your provider."
msgstr "Keycloakを使用している場合は、 `KEYCLOAK_FRONTEND_URL` システム・プロパティに外部からアクセス可能なベースURLを設定して起動してください。他のOIDCプロバイダを使用している場合は、プロバイダのドキュメントを確認してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "OIDC SAML identity broker"
msgstr "OIDC SAMLアイデンティティ・ブローカー"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If your identity provider does not implement OpenID Connect but only the legacy XML-based SAML2.0 SSO protocol, then Quarkus cannot be used as a SAML 2.0 adapter, similarly to how `quarkus-oidc` is used as an OIDC adapter."
msgstr "IDプロバイダがOpenID Connectを実装しておらず、従来のXMLベースのSAML2.0 SSOプロトコルのみを実装している場合、QuarkusをSAML 2.0アダプタとして使用することはできません。 `quarkus-oidc` 、OIDCアダプタとして使用する場合と同様です。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"However, many OIDC providers such as Keycloak, Okta, Auth0, and Microsoft ADFS offer OIDC to SAML 2.0 bridges.\n"
"You can create an identity broker connection to a SAML 2.0 provider in your OIDC provider and use `quarkus-oidc` to authenticate your users to this SAML 2.0 provider, with the OIDC provider coordinating OIDC and SAML 2.0 communications.\n"
"As far as Quarkus endpoints are concerned, they can continue using the same Quarkus Security, OIDC API, annotations such as `@Authenticated`, `SecurityIdentity`, and so on."
msgstr "しかし、Keycloak、Okta、Auth0、Microsoft ADFS などの多くの OIDC プロバイダは、OIDC から SAML 2.0 へのブリッジを提供しています。OIDCプロバイダでSAML 2.0プロバイダへのIDブローカー接続を作成し、 `quarkus-oidc` 、OIDCプロバイダがOIDCとSAML 2.0の通信を調整しながら、ユーザーをこのSAML 2.0プロバイダで認証することができます。Quarkusエンドポイントに関しては、同じQuarkusセキュリティ、OIDC API、 `@Authenticated` 、 `SecurityIdentity` などのアノテーションを使用し続けることができます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"For example, assume `Okta` is your SAML 2.0 provider and `Keycloak` is your OIDC provider.\n"
"Here is a typical sequence explaining how to configure `Keycloak` to broker with the `Okta` SAML 2.0 provider."
msgstr "たとえば、 `Okta` が SAML 2.0 プロバイダで、 `Keycloak` が OIDC プロバイダであると仮定する。 `Okta` SAML 2.0 プロバイダとブローカするために `Keycloak` を構成する方法を説明する、典型的なシーケンスを以下に示す。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "First, create a new `SAML2` integration in your `Okta` `Dashboard/Applications`:"
msgstr "まず、 `Okta` `Dashboard/Applications` に新しい `SAML2` インテグレーションを作成します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, name it as `OktaSaml`:"
msgstr "例えば、 `OktaSaml` と名前を付けます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Next, configure it to point to a Keycloak SAML broker endpoint.\n"
"At this point, you need to know the name of the Keycloak realm, for example, `quarkus`, and, assuming that the Keycloak SAML broker alias is `saml`, enter the endpoint address as `http:localhost:8081/realms/quarkus/broker/saml/endpoint`.\n"
"Enter the service provider (SP) entity ID as `http:localhost:8081/realms/quarkus`, where `http://localhost:8081` is a Keycloak base address and `saml` is a broker alias:"
msgstr "次に、Keycloak SAMLブローカー・エンドポイントを指すように構成する。この時点で、Keycloak レルムの名前（たとえば、 `quarkus` ）を知っておく必要があります。また、Keycloak SAML ブローカーのエイリアスが `saml` であるとして、エンドポイントアドレスを `http:localhost:8081/realms/quarkus/broker/saml/endpoint` と入力します。サービス・プロバイダ（SP）エンティティ ID を `http:localhost:8081/realms/quarkus` と入力します。 `http://localhost:8081` はKeycloakベース・アドレス、 `saml` はブローカー・エイリアスです："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, save this SAML integration and note its Metadata URL:"
msgstr "次に、この SAML インテグレーションを保存し、そのメタデータ URL を記録します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Next, add a SAML provider to Keycloak:"
msgstr "次に、SAMLプロバイダーをKeycloakに追加します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"First, as usual, create a new realm or import the existing realm to `Keycloak`.\n"
"In this case, the realm name has to be `quarkus`."
msgstr "まず、いつものように、新しいレルムを作成するか、既存のレルムを `Keycloak` にインポートします。 この場合、レルム名は `quarkus` とします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Now, in the `quarkus` realm properties, navigate to `Identity Providers` and add a new SAML provider:"
msgstr "`quarkus` realm properties で、 `Identity Providers` に移動し、新しい SAML プロバイダを追加します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Note the alias is set to `saml`, `Redirect URI` is `http:localhost:8081/realms/quarkus/broker/saml/endpoint` and `Service provider entity ID` is `http:localhost:8081/realms/quarkus` - these are the same values you entered when creating the Okta SAML integration in the previous step."
msgstr "エイリアスが `saml` に設定されていることに注意してください。 `Redirect URI` は `http:localhost:8081/realms/quarkus/broker/saml/endpoint` で、 `Service provider entity ID` は `http:localhost:8081/realms/quarkus` です。これらは、前のステップで Okta SAML インテグレーションを作成したときに入力したのと同じ値です。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Finally, set `Service entity descriptor` to point to the Okta SAML Integration Metadata URL you noted at the end of the previous step."
msgstr "最後に、 `Service entity descriptor` を設定して、前の手順の最後に記載した Okta SAML Integration Metadata URL を指すようにします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Next, if you want, you can register this Keycloak SAML provider as a default provider by navigating to `Authentication/browser/Identity Provider Redirector config` and setting both the `Alias` and `Default Identity Provider` properties to `saml`.\n"
"If you do not configure it as a default provider then, at authentication time, Keycloak offers 2 options:"
msgstr "次に、必要であれば、このKeycloak SAMLプロバイダをデフォルト・プロバイダとして登録するには、 `Authentication/browser/Identity Provider Redirector config` に移動し、 `Alias` と `Default Identity Provider` の両方のプロパティを `saml` に設定します。デフォルト・プロバイダとして設定しない場合、認証時にKeycloakは2つのオプションを提供します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Authenticate with the SAML provider"
msgstr "SAML プロバイダによる認証"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Authenticate directly to Keycloak with the name and password"
msgstr "名前とパスワードで直接Keycloakを認証します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Now, configure the Quarkus OIDC `web-app` application to point to the Keycloak `quarkus` realm, `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus`.\n"
"Then, you are ready to start authenticating your Quarkus users to the Okta SAML 2.0 provider by using an OIDC to SAML bridge that is provided by Keycloak OIDC and Okta SAML 2.0 providers."
msgstr "ここで、Quarkus OIDC `web-app` アプリケーションを構成して、Keycloak `quarkus` レルム `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus` を指すようにします。次に、Keycloak OIDCとOkta SAML 2.0プロバイダーが提供するOIDC-SAMLブリッジを使用して、QuarkusユーザーとOkta SAML 2.0プロバイダーの認証を開始します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can configure other OIDC providers to provide a SAML bridge similarly to how it can be done for Keycloak."
msgstr "他の OIDC プロバイダーが SAML ブリッジを提供するように設定できるのは、Keycloak の場合と同様です。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Testing"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Testing is often tricky when it comes to authentication to a separate OIDC-like server.\n"
"Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr "別のOIDCのようなサーバーへの認証となると、テストはしばしば厄介です。Quarkusは、モッキングからOIDCプロバイダのローカル実行まで、いくつかのオプションを提供しています。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Wiremock"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Add the following dependency:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Prepare the REST test endpoints and set `application.properties`.\n"
"For example:"
msgstr "REST テスト・エンドポイントを用意し、 `application.properties` を設定します。例えば"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Finally, write the test code, for example:"
msgstr "最後にテストコードを書きます："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`OidcWiremockTestResource` recognizes `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` sets the token issuer and audience to `https://service.example.com`,  which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "さらに、 `OidcWiremockTestResource` はトークン発行者と閲覧者を `https://service.example.com` これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` システム・プロパティでカスタマイズできます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OIDC providers."
msgstr "`OidcWiremockTestResource` は、すべてのOIDCプロバイダーをエミュレートするために使用できます。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Dev Services for Keycloak"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will start and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret), and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloakとの統合テストには、 xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloakの] 使用をお勧めします。 `Dev Services for Keycloak` 、テストコンテナを起動し初期化します。 `quarkus` レルム、 `quarkus-app` クライアント（ `secret` シークレット）を作成し、 `alice` （ `admin` と `user` ロール）、 `bob` （ `user` ロール）ユーザーを追加します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"First, prepare `application.properties`.\n"
"You can start with a completely empty `application.properties` file as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "まず、 `application.properties` を準備します。 `application.properties` `Dev Services for Keycloak` は、実行中のテスト・コンテナを指す `quarkus.oidc.auth-server-url` と、 `quarkus.oidc.client-id=quarkus-app` および `quarkus.oidc.credentials.secret=secret` を登録します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"However, if you already have all the required `quarkus-oidc` properties configured, then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak` to start a container.\n"
"For example:"
msgstr "ただし、必要な `quarkus-oidc` プロパティがすでにすべて設定されている場合は、 `Dev Services for Keycloak` の `prod` プロファイルと `quarkus.oidc.auth-server-url` を関連付けるだけで、コンテナを起動できます。たとえば、以下のようになります："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If a custom realm file has to be imported into Keycloak before running the tests, then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルをKeycloakにインポートする必要がある場合は、 `Dev Services for Keycloak` ："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Finally, write a test code the same way as it is described in the <<integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最後に、 xref:integration-testing-wiremock[Wiremockの] セクションで説明したのと同じ方法でテストコードを記述します。唯一の違いは、 `@QuarkusTestResource` が不要になったことです："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.\n"
"If you need to do the integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services for Keycloak>>."
msgstr "`Dev Services for Keycloak` を使用しない正当な理由がある場合のみ、 `KeycloakTestResourceLifecycleManager` をテストに使用してください。Keycloakに対して統合テストを行う必要がある場合は、 xref:integration-testing-keycloak-devservices[Dev Services for Keycloakを] 使用することをお勧めします。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "First, add the following dependency:"
msgstr "まず、以下の依存関係を追加します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "This provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "これは `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - Keycloakコンテナを起動する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装を提供します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Then, configure the Maven Surefire plugin as follows (and similarly the Maven Failsafe plugin when testing in native image):"
msgstr "次に、Maven Surefireプラグインを次のように構成します（ネイティブイメージでテストする場合はMaven Failsafeプラグインも同様に構成します）："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"Now, set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr "では、 xref:integration-testing-wiremock[Wiremockの] セクションで説明したのと同じように設定を行い、テストコードを書いてください。唯一の違いは、 `QuarkusTestResource` ："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance that can be disabled by specifying `keycloak.use.https=false`.\n"
"The default realm name is `quarkus` and client id is `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "デフォルトでは、 `KeycloakTestResourceLifecycleManager` がHTTPSを使用してKeycloakインスタンスを初期化します。これは、 `keycloak.use.https=false` を指定することで無効にすることができます。デフォルトのrealm名は `quarkus` 、クライアントIDは `quarkus-web-app` 。必要に応じて、 `keycloak.realm` 、 `keycloak.web-app.client` システム・プロパティを設定して値をカスタマイズしてください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "TestSecurity annotation"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can use @TestSecurity and @OidcSecurity annotations to test the `web-app` application endpoint code, which depends on either one of the following injections, or all four:"
msgstr "TestSecurityアノテーションと@OidcSecurityアノテーションを使用して、 `web-app` アプリケーションエンドポイントコードをテストすることができます。 アプリケーションエンドポイントコードは、次の注入のいずれか、または4つすべてに依存します："

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "ID `JsonWebToken`"
msgstr "身分証明書 `JsonWebToken`"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Access `JsonWebToken`"
msgstr "アクセス `JsonWebToken`"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`UserInfo`"
msgstr "`UserInfo`"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "`OidcConfigurationMetadata`"
msgstr "`OidcConfigurationMetadata`"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For more information, see xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken]."
msgstr "詳細については、 xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[注入された JsonWebToken での TestingSecurity の] 使用を参照してください。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "Checking errors in the logs"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "From the `quarkus dev` console, type `j` to change the application global log level."
msgstr "アプリケーションのグローバルログレベルを変更するには、 `quarkus dev` コンソールから `j` と入力します。"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "References"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 client and filters reference guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID ConnectおよびOAuth2クライアントとフィルターのリファレンスガイド]"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[キークロークのドキュメント]"

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#: _versions/3.8/guides/security-oidc-code-flow-authentication.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""
