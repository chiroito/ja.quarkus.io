msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Deploying to Heroku"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "In this guide you will learn how to deploy a Quarkus based web application as a web-dyno to Heroku."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "This guide covers:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Update Quarkus HTTP Port"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Install the Heroku CLI"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Deploy the application to Heroku"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Deploy the application as container image to Heroku"
msgstr "アプリケーションをコンテナイメージとしてHerokuにデプロイします。"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Using Docker"
msgstr "Dockerの使用"

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Using Podman"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Deploy the native application as container image to Heroku"
msgstr "ネイティブアプリケーションをコンテナイメージとしてHerokuにデプロイします。"

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "https://www.heroku.com/[A Heroku Account]. Free accounts work."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "https://devcenter.heroku.com/articles/heroku-cli[Heroku CLI installed]"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Introduction"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud.\n"
"It supports several languages like Java, Ruby, Node.js, Scala, Clojure, Python, PHP, and Go.\n"
"In addition, it offers a container registry that can be used to deploy prebuilt container images."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Heroku can be used in different ways to run a Quarkus application:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "As a plain Java program running in a container defined by Heroku's environment"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "As a containerized Java program running in a container defined by the Quarkus build process"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "As a containerized native program running in a container defined by the Quarkus build process"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"All three approaches need to be aware of the port that Heroku assigns to it to handle traffic.\n"
"Luckily, there's a dynamic configuration property for it."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Common project setup"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "This guide will take as input an application developed in the xref:getting-started.adoc[Getting Started guide]."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n"
"or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"Heroku can react on changes in your repository, run CI and redeploy your application when your code changes.\n"
"Therefore, we start with a valid repository already."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Also, make sure your Heroku CLI is working:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Prepare the Quarkus HTTP Port"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"Heroku picks a random port and assigns it to the container that is eventually running your Quarkus application.\n"
"That port is available as an environment variable under `$PORT`.\n"
"The easiest way to make Quarkus in all deployment scenarios aware of it is using the following configuration:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"This reads as: \"Listen on `$PORT` if this is a defined variable, otherwise listen on 8080 as usual.\"\n"
"Run the following to add this to your `application.properties`:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Deploy the repository and build on Heroku"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"The first variant uses the Quarkus Maven build to create the _quarkus-app_ application structure containing the runnable \"fast-jar\" as well as all libraries needed\n"
"inside Heroku's build infrastructure and then deploying that result, the other one uses a local build process to create an optimized container."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "For the first variant, two additional files are needed in your application's root directory:"
msgstr "最初のバリエーションでは、アプリケーションのルートディレクトリに 2 つの追加ファイルが必要です："

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "`system.properties` to configure the Java version"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "`Procfile` to configure how Heroku starts your application"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Quarkus needs JDK 17, so we specify that first:"
msgstr "QuarkusにはJDK 17が必要なので、まずそれを指定します："

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "We will deploy a web application so we need to configure the type `web` in the Heroku `Procfile` like this:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Your application should already be runnable via `heroku local web`."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Let's create an application in your account and deploy that repository to it:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "The application will have a generated name and the terminal should output that. `heroku open` opens your default browser to access your new application."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "To access the REST endpoint via curl, run:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Of course, you can use the Heroku CLI to connect this repo to your GitHub account, too, but this is out of scope for this guide."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "Deploy as container"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "The advantage of pushing a whole container is that we are in complete control over its content and maybe even choose to deploy a container with a native executable running on GraalVM."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "First, login to Heroku's container registry:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "We need to add an extension to our project to build container images via the Quarkus Maven plugin:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"The image we are going to build needs to be named accordingly to work with Heroku's registry and deployment.\n"
"We get the generated name via `heroku info` and pass it on to the (local) build:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Push and release the image"
msgstr "画像を押して離す"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "You can now push the image and release it."
msgstr "これで画像を押して離すことができます。"

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"The initial push is rather big, as all layers of the image need to be transferred.\n"
"The following pushes will be smaller."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Pushing through Docker"
msgstr "Dockerによるプッシング"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "With Docker installed, these steps are simple:"
msgstr "Dockerがインストールされていれば、これらの手順は簡単です："

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Pushing through Podman"
msgstr "Podmanを突き進む"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "When you want to use Podman as a drop-in-replacement for Docker, you will have some problems because the Heroku CLI depends on Docker and doesn't support the OCI format. But there are possible solutions for these problems."
msgstr "PodmanをDockerの代替として使用したい場合、Heroku CLIはDockerに依存しており、OCIフォーマットをサポートしていないため、いくつかの問題が発生します。しかし、これらの問題を解決する方法があります。"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Cannot find docker, please ensure docker is installed."
msgstr "docker が見つかりません。docker がインストールされていることを確認してください。"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "The problem is obviously that the heroku-cli can’t find docker. This is quite easy to resolve, because the podman cli is docker-compatible. We just need to create a symlink from podman to docker:"
msgstr "問題は明らかにheroku-cliがDockerを見つけられないことです。PodmanのcliはDockerと互換性があるので、これを解決するのは簡単です。PodmanからDockerへのシンボリックリンクを作成するだけです："

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Error writing manifest: Error uploading manifest latest to registry.heroku.com/$APP_NAME/web: unsupported"
msgstr "マニフェストの書き込みエラー：最新のマニフェストを registry.heroku.com/$APP_NAME/web にアップロードする際にエラーが発生しました。"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Instead of doing a normal podman push (OCI format) we must use a workaround in order to push and release our app through Podman and the Heroku CLI in the desired format (v2s2 - Docker Image Manifest Version 2, Schema 2). Also https://github.com/containers/skopeo[skopeo] is needed."
msgstr "通常のPodmanプッシュ（OCIフォーマット）の代わりに、PodmanとHeroku CLIを通してアプリを希望のフォーマット（v2s2 - Docker Image Manifest Version 2, Schema 2）でプッシュ・リリースするには、回避策を使用する必要があります。また、 link:https://github.com/containers/skopeo[skopeoも] 必要です。"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "https://urhengulas.github.io/blog/podman_heroku.html[Source of solutions and workarounds]"
msgstr "link:https://urhengulas.github.io/blog/podman_heroku.html[解決策と回避策の情報源]"

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Check the logs"
msgstr "ログの確認"

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid "You can and should check the logs to see if your application is now indeed running from the container:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "Deploy as native application inside a container"
msgstr "コンテナ内にネイティブ・アプリケーションとしてデプロイ"

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"The biggest advantage we take when deploying our app as a container is to deploy a container with the natively compiled application.\n"
"Why? Because Heroku will stop or sleep the application when there's no incoming traffic.\n"
"A native application will wake up much faster from its sleep."
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
msgid ""
"The process is pretty much the same.\n"
"We opt in to compiling a native image inside a local container, so that we don't have to deal with installing GraalVM locally:"
msgstr ""

#: _versions/3.8/guides/deploying-to-heroku.adoc
#, fuzzy
msgid "After that, push and release again using Docker or Podman (see above) and check the logs."
msgstr "その後、DockerまたはPodman（上記参照）を使って再度プッシュ・リリースし、ログを確認してください。"
