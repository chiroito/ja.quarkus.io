msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus for the Web"
msgstr "ウェブ版Quarkus"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus provides several extensions to create web applications, this document aims to provide directions on which extension to use for different use cases."
msgstr "Quarkusには、Webアプリケーションを作成するための拡張機能がいくつか用意されています。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "The basics"
msgstr "基本"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Serving static resources"
msgstr "静的リソースの提供"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Let's assume you have a Quarkus backend, and you want to serve static files. This is the most basic case, it is supported out of the box with all our Vert.x based extensions, you must place them in the `META-INF/resources` directory of your application."
msgstr "Quarkusのバックエンドがあり、静的ファイルを提供したいとします。これは最も基本的なケースで、QuarkusのすべてのVert.xベースの拡張機能ですぐにサポートされます。アプリケーションの `META-INF/resources` ディレクトリに配置する必要があります。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You can find more information in the xref:http-reference#serving-static-resources[HTTP reference guide]."
msgstr "詳しくは xref:http-reference.adoc#serving-static-resources[HTTPリファレンスガイドを] ご覧ください。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Serving scripts, styles, and web libraries"
msgstr "スクリプト、スタイル、Webライブラリの提供"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "However, if you want to insert scripts, styles, and libraries in your web pages, you have 3 options:"
msgstr "しかし、ウェブページにスクリプト、スタイル、ライブラリを挿入したい場合、3つのオプションがあります："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Consume libraries from public CDNs such as cdnjs, unpkg, jsDelivr and more, or copy them to your `META-INF/resources` directory."
msgstr "cdnjs、unpkg、jsDelivrなどのパブリックCDNからライブラリを消費するか、 `META-INF/resources` ディレクトリにコピーします。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Use runtime web dependencies such as mvnpm.org or webjars, when added to your pom.xml or build.gradle they can be directly xref:http-reference#from-mvnpm[accessed from your web pages]."
msgstr "mvnpm.orgやwebjarsのような実行時のウェブ依存関係を使用します。pom.xmlやbuild.gradleに追加すると、 xref:http-reference.adoc#from-mvnpm[ウェブページから] 直接 xref:http-reference.adoc#from-mvnpm[アクセス] できるようになります。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Package your scripts (js, ts), styles (css, scss), and web dependencies together using a bundler (see xref:#bundling[below])."
msgstr "スクリプト(js, ts)、スタイル(css, scss)、Webの依存関係をバンドルラ( xref:bundling[下記] 参照)を使ってパッケージ化します。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*We recommend using a bundler for production* as it offers better control, consistency, security, and performance. The good news is that Quarkus makes it really easy and fast with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler extension]."
msgstr "*Quarkusでは* 、管理、一貫性、セキュリティ、パフォーマンスが向上する *バンドラーの使用を推奨して* います。Quarkusでは、 link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundlerエクステンションを] 使用することで、非常に簡単かつ迅速にバンドルできます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Bundling scripts, styles, and libraries"
msgstr "スクリプト、スタイル、ライブラリのバンドル"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "There are two ways to bundle your web assets:"
msgstr "ウェブ資産をバンドルするには2つの方法があります："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Using https://docs.quarkiverse.io/quarkus-web-bundler/dev/[the Quarkus Web Bundler extension], which is the recommended way. Without any configuration, it puts everything together in an instant, and follows good practices such as dead-code elimination, minification, caching, and more."
msgstr "link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler拡張] 機能を使用することをお勧めします。設定なしで、瞬時にすべてをまとめ、デッドコードの除去、最小化、キャッシュなどの優れたプラクティスに従います。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Using a custom bundler such as Webpack, Parcel, Rollup, etc. This can be easily integrated with Quarkus using the https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus Quinoa extension]."
msgstr "Webpack、Parcel、Rollupなどのカスタムバンドラーを使用します。 link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus Quinoaエクステンションを] 使用すると、Quarkusと簡単に統合できます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Server-side rendering (SSR)"
msgstr "サーバーサイドレンダリング（SSR）"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For templating and server-side rendering with Quarkus, there are different engines available such as xref:qute.adoc[Qute] or https://docs.quarkiverse.io/quarkus-freemarker/dev/[Freemarker] and others."
msgstr "Quarkusを使用したテンプレート作成とサーバーサイドレンダリングには、 xref:qute.adoc[Quteや] link:https://docs.quarkiverse.io/quarkus-freemarker/dev/[Freemarkerなど] 、さまざまなエンジンがあります。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Qute Web"
msgstr "キュートウェブ"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Qute is designed specifically to meet the Quarkus needs, and help you deal with templates, snippets, and partials and render the data from your storage. It is inspired by the most famous template engines, it is fast, type-safe, works in native, and has a lot of nice features."
msgstr "Quteは、Quarkusのニーズを満たすために特別に設計されており、テンプレート、スニペット、パーシャルを処理し、ストレージからデータをレンダリングするのに役立ちます。最も有名なテンプレートエンジンにインスパイアされており、高速でタイプセーフ、ネイティブで動作し、多くの優れた機能を備えています。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "To install Qute Web, follow xref:qute.adoc#serving-templates[the instructions]."
msgstr "Qute Webをインストールするには、 xref:qute.adoc#serving-templates[手順に従って] ください。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Here is a simple example of a Qute template:"
msgstr "以下は、Quteテンプレートの簡単な例です："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "src/main/resources/templates/pub/index.html"
msgstr "src/main/resources/templates/pub/index.html"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "With the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], this expression will be replaced by the bundled scripts and styles."
msgstr "link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler 拡張] 機能を使うと、この式はバンドルされたスクリプトとスタイルに置き換えられます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You can directly use the HTTP parameters in your templates."
msgstr "HTTPパラメータをテンプレートで直接使用することができます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "This expression is validated. Try to change the expression to `cdi:Product.notHere` and the build will fail."
msgstr "この式は有効です。この式を `cdi:Product.notHere` に変更しようとすると、ビルドは失敗します。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "If you install xref:ide-tooling.adoc[Quarkus IDEs plugins], you will have autocompletion, link to implementation and validation."
msgstr "xref:ide-tooling.adoc[Quarkus IDEsのプラグインを] インストールすると、オートコンプリート、実装へのリンク、検証が可能になります。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Model-View-Controller (MVC)"
msgstr "モデル-ビュー-コントローラ（MVC）"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "The MVC approach is also made very easy with Quarkus thanks to https://docs.quarkiverse.io/quarkus-renarde/dev/index.html[the Renarde extension], a Rails-like framework using Qute."
msgstr "Quarkusでは、Quteを使用したRailsライクなフレームワークである link:https://docs.quarkiverse.io/quarkus-renarde/dev/index.html[Renarde拡張] 機能のおかげで、MVCアプローチも非常に簡単です。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Associated with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], the road is open to build modern web applications for all your needs. Here is what a simple Renarde controller looks like:"
msgstr "link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler エクステンションと] 組み合わせることで、あらゆるニーズに対応したモダンなウェブアプリケーションを構築する道が開けます。シンプルな Renarde コントローラはこんな感じです："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "src/main/java/rest/Todos.java"
msgstr "src/main/java/rest/Todos.java"

#: _versions/main/guides/web.adoc
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus provides very solid tools for creating or integrating Single Page Applications to Quarkus (React, Angular, Vue, …), here are 3 options:"
msgstr "Quarkusには、シングルページアプリケーション（React、Angular、Vueなど）を作成したり、Quarkusに統合したりするための非常に強力なツールがあります："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus Quinoa] bridges your npm-compatible web application and Quarkus for both dev and prod. No need to install Node.js or configure your framework, it will detect it and use sensible defaults."
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/[Quarkus Quinoaは] 、npm互換のウェブアプリケーションとQuarkusの橋渡しをします。Node.jsをインストールしたり、フレームワークを設定したりする必要はありません。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "The https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler] is also a good approach, it is closer to the Java ecosystem and removes a lot of boilerplate and configuration, it is fast and efficient. For examples of such SPAs, see https://github.com/quarkusio/code.quarkus.io[code.quarkus.io] and https://github.com/mvnpm/mvnpm[mvnpm.org]."
msgstr "link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundlerも] 良いアプローチで、Javaエコシステムに近く、多くの定型文や設定を削除し、高速で効率的です。このようなSPAの例については、 link:https://github.com/quarkusio/code.quarkus.io[code.quarkus.ioと] link:https://github.com/mvnpm/mvnpm[mvnpm.orgを] 参照してください。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Your automation using the https://github.com/eirslett/frontend-maven-plugin[maven-frontend-plugin] or similar tools."
msgstr "link:https://github.com/eirslett/frontend-maven-plugin[maven-frontend-plugin] または同様のツールを使用した自動化。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Full-stack microservices (Micro-frontends)"
msgstr "フルスタックのマイクロサービス（マイクロフロントエンド）"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus is an excellent choice for both full-stack web components and full-stack microservices aka Micro-frontends. By utilizing the Web Bundler or Quinoa, you can significantly reduce boilerplate code and manage multiple services efficiently without much configuration duplication."
msgstr "Quarkusは、フルスタックのウェブコンポーネントとフルスタックのマイクロサービス（マイクロフロントエンド）の両方に最適です。Web BundlerやQuinoaを利用することで、定型的なコードを大幅に削減し、設定の重複なしに複数のサービスを効率的に管理できます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For example the https://github.com/quarkusio/search.quarkus.io[Quarkus documentation search engine] on https://quarkus.io[quarkus.io] uses the Web Bundler to create a full-stack web-component. With Lit Element for the web-component and OpenSearch for the indexation it is a nice way to enhance the static web-site experience in a dynamic way."
msgstr "例えば、 link:https://quarkus.io[quarkus.ioの] link:https://github.com/quarkusio/search.quarkus.io[Quarkusドキュメント検索エンジンは] 、Web Bundlerを使ってフルスタックのWebコンポーネントを作成しています。ウェブコンポーネントにLit Elementを使用し、インデックス作成にOpenSearchを使用することで、静的なウェブサイトのエクスペリエンスを動的な方法で向上させることができます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "More content about this is coming soon..."
msgstr "これについての詳しい内容は近日中に...。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Other ways"
msgstr "その他の方法"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "We described Quarkus most common ways to create web applications but there are other options:"
msgstr "QuarkusでWebアプリケーションを作成する最も一般的な方法を説明しましたが、他にも選択肢があります："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "https://quarkus.io/extensions/com.vaadin/vaadin-quarkus-extension/[Vaadin Flow extension], for this unique framework that lets you build web apps directly from Java code without writing HTML or JavaScript."
msgstr "link:https://quarkus.io/extensions/com.vaadin/vaadin-quarkus-extension/[Vaadin Flowエクステンションは] 、HTMLやJavaScriptを書かずにJavaコードから直接Webアプリケーションを構築できるユニークなフレームワークです。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "JavaServer Faces (jsf) is a specification for building component-based web apps in Java. It available in Quarkus, the https://quarkus.io/extensions/org.apache.myfaces.core.extensions.quarkus/myfaces-quarkus/[MyFaces] extension is an implementation of Faces for Quarkus. https://quarkus.io/extensions/io.quarkiverse.primefaces/quarkus-primefaces/[PrimeFaces] is a Faces components suite, and https://quarkus.io/extensions/io.quarkiverse.omnifaces/quarkus-omnifaces/[OmniFaces], a utility library. More information is available in https://www.melloware.com/quarkus-faces-using-jsf-with-quarkus/[this blog post]."
msgstr "JavaServer Faces（jsf）は、JavaでコンポーネントベースのWebアプリケーションを構築するための仕様です。Quarkusで使用できる link:https://quarkus.io/extensions/org.apache.myfaces.core.extensions.quarkus/myfaces-quarkus/[MyFaces] 拡張機能は、Quarkus向けのFacesの実装です。 link:https://quarkus.io/extensions/io.quarkiverse.primefaces/quarkus-primefaces/[PrimeFacesは] Facesコンポーネントスイートで、 link:https://quarkus.io/extensions/io.quarkiverse.omnifaces/quarkus-omnifaces/[OmniFacesは] ユーティリティライブラリです。詳細は link:https://www.melloware.com/quarkus-faces-using-jsf-with-quarkus/[こちらのブログ記事を] ご覧ください。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Create xref:building-my-first-extension.adoc[a new extension] for your favorite web framework."
msgstr "お気に入りのウェブフレームワーク用に xref:building-my-first-extension.adoc[新しい拡張機能を] 作成してください。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Testing your web applications"
msgstr "ウェブアプリケーションのテスト"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For testing web applications, https://docs.quarkiverse.io/quarkus-playwright/dev/[Quarkus Playwright] is very easy to use. You can create effective cross-browser end-to-end tests mimicking user interaction and making sure your web application is working as a whole. The big advantage is that it benefits from all dev-services and Quarkus mocking features."
msgstr "ウェブアプリケーションのテストでは、 link:https://docs.quarkiverse.io/quarkus-playwright/dev/[Quarkus Playwrightが] 非常に使いやすいです。ユーザーとのやり取りを模倣した効果的なクロスブラウザのエンドツーエンドテストを作成し、ウェブアプリケーションが全体として機能していることを確認できます。大きな利点は、すべてのdev-servicesとQuarkusのモッキング機能を利用できることです。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Q&A"
msgstr "Q&A"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Why is Quarkus a very good option for Web Applications compared to other frameworks?"
msgstr "他のフレームワークと比較して、Quarkusがウェブアプリケーションにとって非常に優れた選択肢である理由は何ですか？"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Quarkus is well known for its backend extensions ecosystem and developer experience, if you combine it with great extensions for frontend, then it is a perfect mix! All the testing and dev-mode features are now available for both frontend and backend."
msgstr "Quarkusは、バックエンドの拡張機能のエコシステムと開発者の経験でよく知られていますが、フロントエンドの優れた拡張機能と組み合わせれば、完璧なミックスになります！テストモードと開発モードのすべての機能が、フロントエンドとバックエンドの両方で利用できるようになりました。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "What are the advantages of SSR (Server Side Rendering) over SPA (Single Page App)?"
msgstr "SPA（シングルページアプリ）に対するSSR（サーバーサイドレンダリング）の利点は何ですか？"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Here are the benefits of performing rendering work on the server:"
msgstr "レンダリング作業をサーバーで行うメリットは以下の通りです："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Data Retrieval:* Fetching data on the server, closer to the data source. This enhances performance by reducing the time needed to retrieve data for rendering and minimizes client requests."
msgstr "*データ取得：* データソースに近いサーバーでデータを取得します。これにより、レンダリングのためのデータ取得に必要な時間が短縮され、クライアントからのリクエストが最小限に抑えられるため、パフォーマンスが向上します。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Enhanced Security:* Storage of sensitive data and logic is happening on the server, such as tokens and API keys, without exposing them to client-side risks."
msgstr "*セキュリティの強化：* トークンやAPIキーなど、機密データやロジックの保存はサーバー上で行われ、クライアントサイドのリスクにさらされることはありません。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Caching Efficiency:* Server-side rendering allows for result caching, which can be reused across users and subsequent requests. This optimizes performance and lowers costs by reducing rendering and data fetching per request."
msgstr "*キャッシュ効率：* サーバーサイド・レンダリングにより、結果のキャッシュが可能になり、ユーザーや後続のリクエストで再利用できます。これにより、パフォーマンスが最適化され、リクエストごとのレンダリングとデータ取得が削減されるため、コストが削減されます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Improved Initial Page Load and First Contentful Paint (FCP):* Generating HTML on the server enables users to view the page immediately, eliminating the need to wait for client-side JavaScript to download, parse, and execute for rendering."
msgstr "*初期ページロードとファースト・コンテントフル・ペイント（FCP）の改善：* サーバー上で HTML を生成することにより、ユーザーはすぐにページを表示できるため、レンダリングのためにクライアント側の JavaScript のダウンロード、解析、実行を待つ必要がなくなります。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Search Engine Optimization (SEO) and Social Media Shareability:* The rendered HTML aids search engine indexing and social network previews, enhancing discoverability and shareability."
msgstr "*検索エンジン最適化（SEO）とソーシャルメディア共有性：* レンダリングされたHTMLは、検索エンジンのインデックスとソーシャルネットワークのプレビューを支援し、発見性と共有性を高めます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "I am hesitating between Quinoa and the Web Bundler, how should I make my decision?"
msgstr "QuinoaとWeb Bundlerで迷っています。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You have to think that the bundled output is essentially the same with both solutions. Also, switching from one to the other is not a big deal, the choice is about the developer experience and finding the best fit for your team."
msgstr "バンドルされているアウトプットは、どちらのソリューションでも基本的に同じだと考えるべきです。また、どちらか一方からもう一方に乗り換えることは大きな問題ではありません。選択は、開発者の経験についてであり、あなたのチームに最適なものを見つけることです。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "Some guidelines:"
msgstr "いくつかのガイドラインがあります："

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Go for Quinoa:*"
msgstr "*キヌアをどうぞ：*"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You have an existing frontend configured with a npm-compatible build tool, Quinoa is the most direct option."
msgstr "既存のフロントエンドをnpm互換のビルドツールで構成している場合、Quinoaは最も直接的な選択肢です。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You have a dedicated frontend team familiar with tools such as NPM, Yarn and other for building Single Page Apps."
msgstr "シングルページアプリを構築するためのNPM、Yarnなどのツールに精通したフロントエンド専門チームがあります。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You want to write Javascript unit tests (such as Jest, Jasmine, ..), it is not possible with the Web Bundler. However, you could publish a components library on NPM and consume it from the Web Bundler."
msgstr "Javascriptのユニットテスト（JestやJasmineなど）を書きたい場合、Web Bundlerではできません。しかし、NPMでコンポーネントライブラリを公開し、Web Bundlerからそれを利用することはできます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You use very specific bundling options or specific tools in your build process"
msgstr "ビルドプロセスで特定のバンドルオプションやツールを使用している場合"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You love package.json and configurations tweaking"
msgstr "package.jsonとコンフィギュレーションの調整が好きな方"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "*Go for Web Bundler:*"
msgstr "*Web Bundlerを選んでください：*"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "For simple web applications, the Web Bundler is the easiest and fastest way to get started"
msgstr "シンプルなWebアプリケーションの場合、Web Bundlerが最も簡単で早く始められます。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid ""
"You prefer to stay close to the Maven/Gradle ecosystem\n"
"(Node.js is not needed), it uses an extremely fast bundler for the web (esbuild)"
msgstr "Maven/Gradleエコシステムの近くにいることを好む場合（Node.jsは不要）、Web用の非常に高速なバンドル（esbuild）を使用します。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "You want to reduce boilerplate and configuration"
msgstr "定型文や設定を減らしたい"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "How do I scale a Quarkus Web Application?"
msgstr "QuarkusのWebアプリケーションを拡張する方法は？"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid ""
"Serving a few static pages and scripts from an existing Quarkus backend is not a big overhead, so scaling the full app is usually the simplest option.\n"
"You could also split it in two services: one for the backend and one for the frontend. However, in most cases, this approach wouldn’t yield substantial benefits compared to the initial method."
msgstr "既存のQuarkusバックエンドからいくつかの静的なページやスクリプトを提供することは、大きなオーバーヘッドではないので、フルアプリをスケーリングすることは、通常、最も単純なオプションです。バックエンドとフロントエンドの2つのサービスに分割することもできます。しかし、ほとんどの場合、この方法では、最初の方法と比べて実質的なメリットは得られません。"

#: _versions/main/guides/web.adoc
#, fuzzy
msgid "If your application involves a substantial number of static resources, consider using a CDN. Both the Web Bundler and Quinoa can be configured to work seamlessly with a CDN, providing improved performance and distribution of assets."
msgstr "アプリケーションにかなりの数の静的リソースが含まれる場合は、CDNの使用を検討してください。Web BundlerとQuinoaはどちらもCDNとシームレスに動作するように設定でき、パフォーマンスの向上とアセットの配布を提供します。"
