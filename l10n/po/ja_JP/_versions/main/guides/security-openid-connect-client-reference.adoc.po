msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OpenID Connect (OIDC) and OAuth2 client and filters"
msgstr "OpenID Connect (OIDC)とOAuth2クライアントとフィルター"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can use Quarkus extensions for OpenID Connect and OAuth 2.0 access token management, focusing on acquiring, refreshing, and propagating tokens."
msgstr "Quarkusのエクステンションを使用して、OpenID ConnectとOAuth 2.0のアクセストークン管理を行うことができ、トークンの取得、更新、伝播に重点を置くことができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This includes the following:"
msgstr "これには以下が含まれます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]."
msgstr "`quarkus-oidc-client` , `quarkus-oidc-client-reactive-filter` , `quarkus-oidc-client-filter` エクステンションを使用して、OpenID Connect や link:https://www.keycloak.org[Keycloak] などの OAuth 2.0 準拠認可サーバーからアクセストークンを取得し、リフレッシュします。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation-reactive` および `quarkus-oidc-token-propagation` エクステンションを使用して、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播します。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect クライアントとトークン伝搬クイックスタートも] 参照してください。"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependency:"
msgstr "次の依存関係を追加します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient`, which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションはリアクティブな `io.quarkus.oidc.client.OidcClient` を提供し、SmallRye Mutiny `Uni` と `Vert.x WebClient` を使ってトークンの取得とリフレッシュを行うことができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` is initialized at build time with the IDP token endpoint URL, which can be auto-discovered or manually configured. `OidcClient` uses this endpoint to acquire access tokens by using token grants such as `client_credentials` or `password` and refresh the tokens by using a `refresh_token` grant."
msgstr "`OidcClient` `OidcClient` はこのエンドポイントを使用して、 や などのトークングラントを使用してアクセストークンを取得し、 グラントを使用してトークンをリフレッシュします。 `client_credentials` `password` `refresh_token` "

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Token endpoint configuration"
msgstr "トークンのエンドポイント設定"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、トークンのエンドポイントアドレスは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` パスを追加することによって検出されます。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "For example, given this Keycloak URL:"
msgstr "たとえば、次の KeycloakURL を指定した場合:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "OidcClient` は、トークンのエンドポイント URL が `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens` であることを検出します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, if the discovery endpoint is unavailable or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value. For example:"
msgstr "あるいは、ディスカバリー・エンドポイントが利用できない場合や、ディスカバリー・エンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にし、トークン・エンドポイントのアドレスを相対パス値で構成することもできます。例えば"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "検出せずにトークンエンドポイント URL を設定するよりコンパクトな方法は、`quarkus.oidc-client.token-path` を絶対 URL に設定することです。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "この場合、 `quarkus.oidc-client.auth-server-url` と `quarkus.oidc-client.discovery-enabled` の設定は不要です。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Supported token grants"
msgstr "トークン・グラント"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The main token grants that `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "`OidcClient` がトークンを獲得するために使用できる主なトークングラントは、 `client_credentials` （デフォルト）と `password` 。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Client credentials grant"
msgstr "クライアントクレデンシャル付与"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `client_credentials` grant allows setting extra parameters for the token request by using `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient by using the `audience` parameter:"
msgstr "`client_credentials` グラントでは、 `quarkus.oidc-client.grant-options.client.<param-name>=<value>` を使用してトークン・リクエストの追加パラメータを設定できます。ここでは、 `audience` パラメータを使用して、トークンの受信者を設定する方法を示します："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Password grant"
msgstr "パスワード付与"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It can be further customized by using a `quarkus.oidc-client.grant-options.password` configuration prefix, similar to how the client credentials grant can be customized."
msgstr "クライアントクレデンシャル付与をカスタマイズする方法と同様に、 `quarkus.oidc-client.grant-options.password` 構成プレフィックスを使用してさらにカスタマイズすることができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Other grants"
msgstr "その他の助成金"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` can also help acquire the tokens by using grants that require some extra input parameters that cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, and two grants which can be used to exchange the current access token, namely, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr "`OidcClient` また、設定に取り込むことができない追加の入力パラメータを必要とするグラントを使用することで、トークンの取得を支援することもできます。これらのグラントは、 （外部リフレッシュトークン付き）、 、および現在のアクセストークンを交換するために使用できる2つのグラント、すなわち と です。 `refresh_token` `authorization_code` `urn:ietf:params:oauth:grant-type:token-exchange` `urn:ietf:params:oauth:grant-type:jwt-bearer`"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you need to acquire an access token and have posted an existing refresh token to the current Quarkus endpoint, you must use the `refresh_token` grant. This grant employs an out-of-band refresh token to obtain a new token set.\n"
"In this case, configure `OidcClient` as follows:"
msgstr "アクセストークンを取得する必要があり、既存のリフレッシュトークンを現在のQuarkusエンドポイントにポストしている場合は、 `refresh_token` グラントを使用する必要があります。このグラントは、帯域外のリフレッシュトークンを使用して新しいトークンセットを取得します。この場合、 `OidcClient` を以下のように構成します："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then you can use the `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "そして、 `OidcClient.refreshTokens` メソッドにリフレッシュトークンを指定してアクセストークンを取得します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See <<token-propagation-reactive,Token Propagation in MicroProfile RestClient Reactive filter>> and <<token-propagation,Token Propagation in MicroProfile RestClient filter>> for more details."
msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝搬されて使用されるのを避けたい場合は、 `urn:ietf:params:oauth:grant-type:token-exchange` または `urn:ietf:params:oauth:grant-type:jwt-bearer` グランツを使用する必要があるかもしれません。詳細については、 xref:token-propagation-reactive[MicroProfile RestClient Reactive フィルタのトークン伝搬] および xref:token-propagation[MicroProfile RestClient フィルタのトークン伝搬を] 参照してください。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if, for some reason, you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow, then you can configure `OidcClient` as follows:"
msgstr "何らかの理由で認可コードフローをサポートするために xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDCエクステンションを] 使用できない場合、 `OidcClient` を使用して `authorization code` グラントをサポートする必要があります。認可コードフローを実装する正当な理由がある場合は、 `OidcClient` ："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "次に、 `OidcClient.accessTokens` メソッドを使用して、追加プロパティの Map を受け入れ、現在の `code` と `redirect_uri` パラメータを渡して、認可コードをトークンと交換することができます。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr "`OidcClient` また、 の助成金もサポートしています： `urn:openid:params:grant-type:ciba` "

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the `auth_req_id` parameter to exchange the token authorization code."
msgstr "次に、 `OidcClient.accessTokens` メソッドを使用して、追加プロパティの Map を受け取り、 `auth_req_id` パラメータを渡してトークン認可コードを交換することができます。"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Grant scopes"
msgstr "スコープのグラント"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You might need to request that a specific set of scopes be associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "発行されたアクセストークンに特定のスコープセットを関連付けるよう要求する必要があるかもしれません。例えば、専用の `quarkus.oidc-client.scopes` リストプロパティを使用します： `quarkus.oidc-client.scopes=email,phone`"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClient を直接使用する"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Inject tokens"
msgstr "トークンの注入"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can inject `Tokens` that use `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "内部で `OidcClient` を使用する `Tokens` を注入することができます。 `Tokens` は、アクセストークンを取得し、必要に応じてリフレッシュするために使用できます："

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClients"
msgstr "OidcClientsの使用"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、``OidcClient``s のコンテナーです。デフォルトの `OidcClient` と名前付きクライアントを含み、以下のように設定することができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "In this case, the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティで無効化されます。 `jwt-secret` クライアントはこのようにアクセスできます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], and each OIDC tenant has its own associated `OidcClient`, you can use a Vert.x `RoutingContext` `tenantId` attribute. For example:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OIDCマルチテナントも] 使用し、各OIDCテナントがそれぞれ関連する `OidcClient` 、Vert.x `RoutingContext` `tenantId` 属性を使用できます。たとえば、次のようになります："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you need, you can also create a new `OidcClient` programmatically like this:"
msgstr "必要であれば、次のようにプログラムで新しい `OidcClient` を作成することもできます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Inject named OidcClient and tokens"
msgstr "OidcClient とトークンをインジェクトします。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "In case of multiple configured `OidcClient` objects, you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "複数の `OidcClient` オブジェクトが設定されている場合、 `OidcClients` を使用する代わりに、 `@NamedOidcClient` という修飾子を追加して、 `OidcClient` 注入ターゲットを指定することができます："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使用して、`Tokens` インジェクションに使用される `OidcClient` を指定できます。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "RestClient の Reactive ClientFilter で OidcClient を使用する"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Add the following Maven Dependency:"
msgstr "以下の Maven 依存関係を追加します。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "`io.quarkus:quarkus-oidc-client` も表示されることに注意してください。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは、`io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter,Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter that does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "これは、 `OidcClientRequestFilter` ( xref:oidc-client-filter[MicroProfile RestClient クライアントフィルタで OidcClient を使用] する を参照) と同様に動作します。 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュし、HTTP `Authorization` `Bearer` スキーム値として設定します。違いは、 xref:rest-client-reactive.adoc[Reactive RestClient] で動作し、トークンを取得または更新するときに現在の IO スレッドをブロックしないノンブロッキングクライアントフィルタを実装していることです。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "IOスレッドのブロックを避けるために、 `OidcClientRequestReactiveFilter` は実行されるまで最初のトークン取得を遅らせます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.reactive.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のアノテーションを使用することで、 `OidcClientRequestReactiveFilter` を選択的に登録することができます："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "or"
msgstr "or"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestReactiveFilter` はデフォルトで を使用します。名前付き は、 構成プロパティで選択できます。また、 アノテーションの 属性を設定することでも、 を選択できます。注釈によって設定されたクライアント名は、 構成プロパティよりも優先されます。例えば、 という OIDC クライアント `OidcClient` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `jwt-secret` xref:use-oidc-clients[宣言が] ある場合、このクライアントを次のように参照できます："

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "RestClient の ClientFilter で OidcClient を使用する"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは、`io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter を提供し、 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュし、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are unavailable, then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得し、最初のペアのアクセストークンとリフレッシュトークンを取得します。アクセストークンの寿命が短く、リフレッシュトークンが利用できない場合は、 `quarkus.oidc-client.early-tokens-acquisition=false` を使ってトークンの取得を遅らせるべきです。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "あるいは、 `quarkus.oidc-client-filter.register-filter=true` プロパティが設定されていれば、すべての MP Rest または Jakarta REST クライアントに `OidcClientRequestFilter` を自動的に登録することもできます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestFilter` はデフォルトで を使用します。名前付き は、 構成プロパティで選択できます。また、 アノテーションの 属性を設定することでも、 を選択できます。注釈によって設定されたクライアント名は、 構成プロパティよりも優先されます。例えば、 という OIDC クライアント `OidcClient` `OidcClient` `quarkus.oidc-client-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-filter.client-name` `jwt-secret` xref:use-oidc-clients[宣言が] ある場合、このクライアントを次のように参照できます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Use a custom RestClient ClientFilter"
msgstr "カスタムRestClient ClientFilterの使用"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you prefer, you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望であれば、独自のカスタムフィルターを使用して `Tokens` を注入することもできます："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr "名前付きの `Tokens` を挿入することもできます。<<named-oidc-clients,Inject named OidcClient and Tokens>> を参照してください。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Refreshing access tokens"
msgstr "アクセストークンのリフレッシュ"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter` `OidcClientRequestFilter` および プロデューサは、リフレッシュ・トークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 プロパティは、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を回避するために、先制的なアクセストークンのリフレッシュのために使用できます。たとえば、このプロパティが に設定され、アクセストークンの有効期限が 3 秒以内に切れる場合、このトークンは自動更新されます。 `Tokens` `quarkus.oidc-client.refresh-token-time-skew` `3S`"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`."
msgstr "アクセストークンをリフレッシュする必要があるにもかかわらず、リフレッシュトークンがない場合、 `client_credentials` などの設定されたグラントを使用して、新しいトークンの取得が試みられます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr "OpenID Connectプロバイダによっては、 `client_credentials` グラントレスポンスにリフレッシュトークンを返さないものがあります。例えば、Keycloak 12以降、 `client_credentials` ではデフォルトでリフレッシュトークンは返されません。また、プロバイダによっては、リフレッシュ・トークンの使用回数を制限している場合があります。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Revoking access tokens"
msgstr "アクセストークンの失効"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If your OpenId Connect provider, such as Keycloak, supports a token revocation endpoint, then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "Keycloak などの OpenID Connect プロバイダがトークン失効エンドポイントをサポートしている場合は、 `OidcClient#revokeAccessToken` を使って現在のアクセストークンを失効させることができます。トークン失効エンドポイントの URL は、トークン要求 URI と一緒に検出されるか、 `quarkus.oidc-client.revoke-path` で設定できます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You might want to have the access token revoked if using this token with a REST client fails with an HTTP `401` status code or if the access token has already been used for a long time and you would like to refresh it."
msgstr "アクセストークンをRESTクライアントで使用する際にHTTP `401` ステータスコードで失敗する場合、またはアクセストークンがすでに長期間使用されており、それをリフレッシュしたい場合、アクセストークンを失効させることができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This can be achieved by requesting a token refresh by using a refresh token. However, if the refresh token is unavailable, you can refresh it by revoking it first and then requesting a new access token."
msgstr "これは、リフレッシュトークンを使用してトークンのリフレッシュを要求することで実現できます。ただし、リフレッシュ・トークンが利用できない場合は、まずトークンを失効させてから新しいアクセストークンをリクエストすることでリフレッシュできます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OidcClient authentication"
msgstr "OidcClient 認証"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、`client_credentials` および他のグラントリクエストが成功するために OpenID Connect プロバイダーに対して認証する必要があります。https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] オプションはすべてサポートされています。以下に例を示します。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または xref:credentials-provider.adoc[CredentialsProvider] から取得したシークレットを使用します："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`、署名アルゴリズムは `HS256` です。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "または、 xref:credentials-provider.adoc[CredentialsProvider] から取得した秘密を使用して、署名アルゴリズムは `HS256` ："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "PEM キーファイルを使用した`private_key_jwt`、署名アルゴリズムは `RS256` です。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` キーストア・ファイルでは、署名アルゴリズムは です： `RS256`"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Additional JWT authentication options"
msgstr "JWT認証の追加オプション"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used, then the JWT signature algorithm, key identifier, audience, subject, and issuer can be customized, for example:"
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法のいずれかが使用される場合、JWT 署名アルゴリズム、キー識別子、オーディエンス、サブジェクト、および発行者は、たとえばカスタマイズすることができます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "JWT Bearer"
msgstr "JWTベアラ"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "link:https://www.rfc-editor.org/rfc/rfc7523[RFC7523] explains how JWT Bearer tokens can be used to authenticate clients, see the link:https://www.rfc-editor.org/rfc/rfc7523#section-2.2[Using JWTs for Client Authentication] section for more information."
msgstr "link:https://www.rfc-editor.org/rfc/rfc7523[RFC7523では] 、クライアントの認証にJWTベアラートークンを使用する方法を説明しています。詳細については、「 link:https://www.rfc-editor.org/rfc/rfc7523#section-2.2[クライアント認証にJWTを使用] する」のセクションを参照してください。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It can be enabled as follows:"
msgstr "この機能は次のようにして有効にすることができます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Next, the JWT bearer token must be provided as a `client_assertion` parameter to the OIDC client."
msgstr "次に、JWTベアラートークンをOIDCクライアントに `client_assertion` パラメータとして提供する必要があります。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can use `OidcClient` methods for acquiring or refreshing tokens which accept additional grant parameters, for example, `oidcClient.getTokens(Map.of(\"client_assertion\", \"ey...\"))`."
msgstr "トークンの取得やリフレッシュには、追加のグラント・パラメータを受け付ける `OidcClient` メソッドを使用できます。例えば、 `oidcClient.getTokens(Map.of(\"client_assertion\", \"ey…​\"))` などです。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work work with the OIDC client filters then you must register a custom filter which will provide this assertion."
msgstr "OIDC クライアント・フィルタを使用する場合は、このアサーションを提供するカスタム・フィルタを登録する必要があります。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is an example of the RestEasy Reactive custom filter:"
msgstr "以下はRestEasy Reactiveカスタムフィルタの例です："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is an example of the RestEasy Classic custom filter:"
msgstr "RestEasy Classicカスタムフィルタの例を示します："

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account-specific issuer and subject properties."
msgstr "Apple OpenID Connect Provider は、 `private_key_jwt` 認証メソッドで生成された JWT をシークレットとし、Apple アカウント固有の発行者とサブジェクトのプロパティを持つ `client_secret_post` メソッドを使用します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method, which can be configured as follows:"
msgstr "`quarkus-oidc-client` は非標準の 認証方法をサポートしています： `client_secret_post_jwt` "

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Mutual TLS"
msgstr "相互 TLS"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "OpenID Connect プロバイダによっては、相互 TLS ( `mTLS` ) 認証プロセスの一環として、クライアントの認証が必要な場合があります。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc-client` は、`mTLS` をサポートするように次のように設定できます。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "例えば、Wiremockベースの `QuarkusTestResourceLifecycleManager` ："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "REST テストエンドポイントを準備します。テストフロントエンドエンドポイントは、登録された OidcClient フィルタを持つ注入された MP REST クライアントを使用し、ダウンストリームエンドポイントを呼び出します。このエンドポイントは、トークンをエコーバックします。たとえば、 `main` Quarkus リポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "And finally, write the test code. Given the Wiremock-based resource above, the first test invocation should return the `access_token_1` access token, which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return the `access_token_2` access token, which confirms the expired `access_token_1` access token has been refreshed."
msgstr "最後に、テストコードを記述します。上記のWiremockベースのリソースを想定すると、最初のテスト呼び出しでは `access_token_1` 。このアクセストークンは4秒後に失効します。 `awaitility` を使って約5秒待つと、次のテスト呼び出しで `access_token_2` アクセストークンが返されるはずです。このアクセストークンは、期限切れの `access_token_1` アクセストークンがリフレッシュされたことを確認します。"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with Keycloak, you can use the same approach described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Keycloakを使用する場合は、 xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloakのセクションで説明したのと同じ方法を使用できます。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "`io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にすると、トークンの取得とリフレッシュのエラーに関する詳細が表示されます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "`io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのロギングを有効にすると、OidcClient の初期化エラーの詳細を確認できます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OIDC request filters"
msgstr "OIDCリクエストフィルター"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers. For example, a filter can analyze the request body and add its digest as a new header value:"
msgstr "QuarkusからOIDCプロバイダへのOIDCリクエストをフィルタリングするには、1つ以上の `OidcRequestFilter` 実装を登録します。 実装は、新しいリクエストヘッダを更新または追加できます。たとえば、フィルタはリクエストボディを分析し、そのダイジェストを新しいヘッダー値として追加できます："

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation Reactive"
msgstr "トークン伝播リアクティブ"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides a RestEasy Reactive Client, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter`, that simplifies the propagation of authentication information. This client propagates the xref:security-oidc-bearer-token-authentication.adoc[bearer token] present in the currently active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[authorization code flow mechanism] as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、認証情報の伝搬を簡略化するRESTEasy Reactiveクライアント `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。このクライアントは、現在アクティブなリクエストに存在する xref:security-oidc-bearer-token-authentication.adoc[ベアラートークン] 、または xref:security-oidc-code-flow-authentication.adoc[認可コードフローメカニズムから] 取得したトークンを、HTTP `Authorization` ヘッダの `Bearer` スキーム値として伝播します。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "さらに、 `AccessTokenRequestReactiveFilter` 、トークンを伝播する前に交換する必要がある複雑なアプリケーションをサポートすることができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or another OIDC provider that supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloakや] link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークン付与をサポートする他のOIDCプロバイダーと連携している場合は、 `AccessTokenRequestReactiveFilter` 、次のようにトークンを交換するように設定できます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Please note that the `exchange-token` configuration property is ignored when the OidcClient name is set with the `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` annotation attribute."
msgstr "OidcClient 名が `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` アノテーション属性で設定されている場合、 `exchange-token` 構成プロパティは無視されることに注意してください。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestReactiveFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、`quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラントを] link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[使用して] 現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要が] ある `Azure` のようなプロバイダと連携している場合は、 `AccessTokenRequestReactiveFilter` のようにトークンを交換するように設定できます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property or with the `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` annotation attribute."
msgstr "`AccessTokenRequestReactiveFilter` はデフォルトで を使用します。名前付き は、 構成プロパティか、 注釈属性で選択できます。 `OidcClient` `OidcClient` `quarkus.oidc-token-propagation-reactive.client-name` `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` "

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality but, in addition, provides support for JWT tokens."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝播を単純化する2つの Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` クラス実装を提供します。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する xref:security-oidc-bearer-token-authentication.adoc[ベアラー認証トークン] 、または xref:security-oidc-code-flow-authentication.adoc[認可コードフローメカニズムから] 取得したトークンを、HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝播します。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、加えて JWT トークンのサポートを提供します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "When you need to propagate the current Authorization Code Flow access token, then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "現在の認可コードフローのアクセストークンを伝播する必要がある場合、トークンの即時伝播がうまく機能します。コードフローのアクセストークンは（IDトークンとは対照的に）、現在のQuarkusエンドポイントに伝播され、現在認証されているユーザーに代わってリモートサービスにアクセスするためのものだからです。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "However, the direct end-to-end Bearer token propagation should be avoided. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases, `Service B` cannot distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A`, it should be able to assert a new issuer and audience claims."
msgstr "ただし、エンドツーエンドのベアラ・トークンの直接伝搬は避けるべきです。 `Client → Service A → Service B` たとえば、 `Client` から `Service A` に送信されたトークンを `Service B` が受信した場合など。このような場合、 `Service B` は、トークンが `Service A` から来たのか、 `Client` から直接来たのかを区別できません。 `Service B` がトークンが `Service A` から来たことを確認するためには、新しい発行者と視聴者の主張をアサートできる必要があります。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or completely different set of scopes to access `Service B`."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝播する前にトークンを交換または更新する必要があるかもしれません。たとえば、 `Service A` が `Service B` にアクセスするとき、アクセスコンテキストが異なるかもしれません。この場合、 `Service A` は、 `Service B` にアクセスするために、狭い、あるいはまったく異なるスコープセットを付与されるかもしれません。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "次のセクションでは、`AccessTokenRequestFilter` および `JsonWebTokenRequestFilter` がどのように役立つかを示します。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` treats all tokens as Strings, and as such, it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` はすべてのトークンを文字列として扱うので、JWT と不透明トークンの両方で動作します。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "あるいは、 `quarkus.oidc-token-propagation.register-filter` プロパティを `true` に設定し、 `quarkus.oidc-token-propagation.json-web-token` プロパティを `false` (これはデフォルト値です) に設定すると、すべての MP Rest または Jakarta REST クライアントに `AccessTokenRequestFilter` が自動的に登録されます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Exchange token before propagation"
msgstr "伝播前のトークン交換"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestFilter` like this:"
msgstr "伝播の前に現在のアクセストークンを交換する必要があり、 link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloakや] link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークン付与をサポートするその他のOpenID Connectプロバイダを使用している場合は、 `AccessTokenRequestFilter` ："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラントを] link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[使用して] 現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要が] ある `Azure` のようなプロバイダと連携している場合は、 `AccessTokenRequestFilter` のようにトークンを交換するように設定できます："

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、`quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、`quarkus.oidc-token-propagation.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims, such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and, therefore, will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol, then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "`issuer` や `audience` のような、これらのトークンの主張を修正し、更新されたトークンを再度セキュア（例えば、再署名） にすることができるベアラ JWT トークンを扱う場合、 `JsonWebTokenRequestFilter` を使用することが推奨されます。これは注入された `org.eclipse.microprofile.jwt.JsonWebToken` を期待するので、不透明なトークンでは動作しません。また、OpenID Connect プロバイダがトークン・エクスチェンジ・プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することを推奨します - JWT と不透明ベアラ・トークンの両方を `AccessTokenRequestFilter` で安全に交換できるからです。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is ensuring that `Service A` has a signing key; it should be provisioned from a secure file system or remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` によって、 の実装は、注入された を新しい と の請求値で更新し、更新されたトークンを新しい署名で再度保護することが容易になります。唯一の難しいステップは、 が署名鍵を持っていることを保証することです。これは、安全なファイルシステムまたはVaultのようなリモートの安全なストレージからプロビジョニングされるべきです。 `Service A` `org.eclipse.microprofile.jwt.JsonWebToken` `issuer` `audience` `Service A` "

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "あるいは、 `quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両方のプロパティを `true` に設定すると、すべての MicroProfile REST または Jakarta REST クライアントで `JsonWebTokenRequestFilter` が自動的に登録されます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Update token before propagation"
msgstr "伝播前のトークン更新"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the injected token needs to have its `iss` (issuer) or `aud` (audience) claims updated and secured again with a new signature, then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンの `iss` （発行者）または `aud` （利用者）の主張を更新し、新しい署名で再度保護する必要がある場合、 `JsonWebTokenRequestFilter` のように設定できます："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "As mentioned, use `AccessTokenRequestFilter` if you work with Keycloak or an OpenID Connect Provider that supports a Token Exchange protocol."
msgstr "前述したように、KeycloakまたはToken ExchangeプロトコルをサポートするOpenID Connectプロバイダと連携する場合は、 `AccessTokenRequestFilter` 。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect ベアラートークン統合テスト] セクションの説明に従ってトークンを生成できます。REST テストエンドポイントを準備します。注入された MP REST クライアントを使用するテストフロントエンドエンドポイントに、登録済みのトークン伝搬フィルタを使用して、ダウンストリームエンドポイントを呼び出させることができます。たとえば、 `main` Quarkus リポジトリの `integration-tests/oidc-token-propagation` を参照してください。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、`io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。これは、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播するために使用することができます。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning of the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンション(非反応型 `quarkus-oidc-token-propagation` エクステンションとは対照的)は、現在のところ、伝播前のトークンの交換や辞任をサポートしていません。しかし、将来的にはこれらの機能が追加されるかもしれません。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "GraphQL client integration"
msgstr "GraphQLクライアント統合"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-client-graphql` extension provides a way to integrate an OIDC client into xref:smallrye-graphql-client.adoc[GraphQL clients] paralleling the approach used with REST clients.\n"
"When this extension is active, any GraphQL client configured through properties (rather than programmatically by the builder) will use the OIDC client to acquire an access token, which it will then set as the `Authorization` header value.\n"
"The OIDC client will also refresh expired access tokens."
msgstr "`quarkus-oidc-client-graphql` エクステンションは、REST クライアントで使用されるアプローチと同様に、OIDC クライアントを xref:smallrye-graphql-client.adoc[GraphQL クライアントに] 統合する方法を提供します。このエクステンションがアクティブな場合、（ビルダーによってプログラム的にではなく）プロパティを通じて設定されたすべての GraphQL クライアントは、OIDC クライアントを使用してアクセストークンを取得し、それを `Authorization` ヘッダー値として設定します。OIDC クライアントは期限切れのアクセストークンもリフレッシュします。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "To configure which OIDC client should be used by the GraphQL client, select one of the configured OIDC clients with the `quarkus.oidc-client-graphql.client-name` property, for example:"
msgstr "どの OIDC クライアントを GraphQL クライアントで使用するかを設定するには、設定済みの OIDC クライアントの 1 つを `quarkus.oidc-client-graphql.client-name` プロパティで選択します："

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# example declaration of the OIDC client itself\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"
msgstr "Quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you don't specify the `quarkus.oidc-client-graphql.client-name` property,\n"
"GraphQL clients will use the default OIDC client (without an explicit name)."
msgstr "`quarkus.oidc-client-graphql.client-name` プロパティを指定しない場合、GraphQLクライアントはデフォルトのOIDCクライアント（明示的な名前なし）を使用します。"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"Specifically for type-safe GraphQL clients, you can override this on a\n"
"per-client basis by annotating the `GraphQLClientApi` interface with\n"
"`@io.quarkus.oidc.client.filter.OidcClientFilter`. For example:"
msgstr "特に型安全な GraphQL クライアントの場合、 `@io.quarkus.oidc.client.filter.OidcClientFilter` で `GraphQLClientApi` インターフェイスをアノテーションすることで、クライアントごとにこれをオーバーライドできます。たとえば"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"To be able to use this with a programmatically created GraphQL client, both\n"
"builders (`VertxDynamicGraphQLClientBuilder` and\n"
"`VertxTypesafeGraphQLClientBuilder`) contain a method `dynamicHeader(String,\n"
"Uni<String>`) that allows you to plug in a header that might change for\n"
"every request. To plug an OIDC client into it, use"
msgstr "プログラムによって作成された GraphQL クライアントでこれを使用できるように、両方のビルダー ( `VertxDynamicGraphQLClientBuilder` と `VertxTypesafeGraphQLClientBuilder` ) には、リクエストごとに変更される可能性のあるヘッダーをプラグインできるメソッド `dynamicHeader(String, Uni<String>` ) が含まれています。これにOIDCクライアントを接続するには"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect クライアントとトークン伝搬クイックスタート] 。"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護するOIDCコードフローメカニズム]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"
