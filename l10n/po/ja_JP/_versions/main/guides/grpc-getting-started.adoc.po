msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Getting Started with gRPC"
msgstr "gRPCを始める"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"This page explains how to start using gRPC in your Quarkus application.\n"
"While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr "このページでは、QuarkusアプリケーションでgRPCを使い始める方法を説明します。このページではMavenでの設定方法を説明していますが、Gradleを使用することも可能です。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n"
"The default configuration is enough, but you can also select some extensions if you want."
msgstr "ここでは、 link:https://code.quarkus.io[Quarkusプロジェクトジェネレータ] から生成された通常のQuarkusプロジェクトを想像してみましょう。デフォルトの設定で十分ですが、必要に応じていくつかのエクステンションを選択することもできます。"

#. type: Title ==
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "The solution is located in the `grpc-plain-text-quickstart` link:{quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr "ソリューションは `grpc-plain-text-quickstart` link:{quickstarts-tree-url}/grpc-plain-text-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Configuring your project"
msgstr "プロジェクトの設定"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Add the Quarkus gRPC extension to your build file:"
msgstr "ビルドファイルにQuarkus gRPCエクステンションを追加します："

#. type: Block title
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"By default, the `quarkus-grpc` extension relies on the reactive programming model.\n"
"In this guide we will follow a reactive approach.\n"
"Under the `dependencies` section of your `pom.xml` file, make sure you have the Quarkus REST (formerly RESTEasy Reactive) dependency:"
msgstr ""

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"If you are using Maven, make sure you have the `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.\n"
"If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.\n"
"Please note that no additional task/goal is required for the Gradle plugin."
msgstr ""
"Maven を使用している場合は、 `pom.xml` で `quarkus-maven-plugin` の `generate-code` ゴールが有効になっていることを確認してください。\n"
"テスト用に異なる `proto` ファイルからコードを生成したい場合は、 `generate-code-tests` ゴールも追加してください。\n"
"Gradle プラグインには追加のタスク/ゴールは必要ありません。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n"
"`quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr "この設定では、サービスとメッセージの定義を `src/main/proto` ディレクトリーに置くことができます。 `quarkus-maven-plugin` は、 `proto` ファイルから Java ファイルを生成します。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.\n"
"If this retrieved version does not work in your context, you can either force to use a different OS classifier with\n"
"`-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).\n"
"You can also download the suitable binary and specify the location via\n"
"`-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr "`quarkus-maven-plugin` は、Mavenリポジトリから `protoc` (protobuf コンパイラ)のバージョンを取得します。取得されたバージョンは、使用しているオペレーティングシステムとCPUアーキテクチャに適合します。この検索されたバージョンがあなたのコンテキストで動作しない場合は、 `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` で別の OS クラシファイアを強制的に使用することができます (例: `osx-x86_64` )。また，適切なバイナリをダウンロードし、 `-Dquarkus.grpc.protoc-path=/path/to/protoc` でその場所を指定することもできます。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"Let's start with a simple _Hello_ service.\n"
"Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr "まずは簡単な _Hello_ サービスから始めてみましょう。 `src/main/proto/helloworld.proto` ファイルを以下の内容で作成します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr "この `proto` ファイルは、単一のメソッド ( `SayHello` ) と交換されたメッセージ (名前を含む `HelloRequest` と挨拶メッセージを含む `HelloReply` ) を持つシンプルなサービスインターフェースを定義しています。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Your `proto` file must not contain `option java_generic_services = true;`. https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[Generic services are deprecated] and are not compatible with Quarkus code generation plugins."
msgstr "`proto` ファイルには、 `option java_generic_services = true;` を含めてはいけません。 link:https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[汎用サービスは非推奨] であり、Quarkusのコード生成プラグインと互換性がありません。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"Before coding, we need to generate the classes used to implement and consume gRPC services.\n"
"In a terminal, run:"
msgstr "コーディングの前に、gRPCサービスを実装して消費するためのクラスを生成する必要があります。ターミナルで以下を実行します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr "生成されたら、 `target/generated-sources/grpc` ディレクトリーを見てみましょう。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "These are the classes we are going to use."
msgstr "これらは、これから使うクラスファイルです。"

#. type: Title ==
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Different gRPC implementations / types"
msgstr "異なるgRPCの実装/タイプ"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Another thing to take note as well is that Quarkus' gRPC support currently includes 3 different types of gRPC usage:"
msgstr "もうひとつ、QuarkusのgRPCサポートには、現在3種類のgRPCの使用があることにも注意が必要です："

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "old Vert.x gRPC implementation with a separate gRPC server (default)"
msgstr "古いVert.xのgRPC実装で、gRPCサーバーを別に用意（デフォルト）"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "new Vert.x gRPC implementation on top of the existing HTTP server"
msgstr "新しいVert.x gRPC実装で、既存のHTTPサーバー上に構築"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper over https://github.com/grpc/grpc-java[grpc-java] with a separate Netty based gRPC server"
msgstr "https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper over https://github.com/grpc/grpc-java[grpc-java] with a separate Netty based gRPC server"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Further docs explain how to enable and use each of them."
msgstr "それぞれの有効化と使用方法については、さらにドキュメントで説明しています。"

#. type: Title ==
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Implementing a gRPC service"
msgstr "gRPCサービスの実装"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr "生成されたクラスができたので、 _hello_ サービスを実装してみましょう。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.\n"
"Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].\n"
"The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr "Quarkusは、Quarkusに統合されたReactive Programming APIであるMutinyを使用した追加モデルも提供しています。Mutinyの詳細については、 xref:mutiny-primer.adoc[Mutiny ガイド] を参照してください。サービスクラスは `@io.quarkus.grpc.GrpcService` アノテーションが付与されている必要があります。"

#. type: Title ===
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Implementing a service"
msgstr "サービスの実装"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr "以下の内容の `src/main/java/org/acme/HelloService.java` ファイルを作成します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Expose your implementation as a bean."
msgstr "実装をBeanとして公開します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Implement the generated service interface."
msgstr "生成されたサービスインターフェースを実装する。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr "サービス定義で定義されたメソッドを実装します(ここでは1つのメソッドを使用しています)。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr "また、Mutinyの代わりにデフォルトのgRPC APIを使用することもできます。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr "`ImplBase` クラスを拡張します。生成されたクラスです。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Close the response."
msgstr "レスポンスを閉じます。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"If your service implementation logic is blocking (use blocking I/O for example), annotate your method with\n"
"`@Blocking`.\n"
"The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the\n"
"annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr "サービスの実装ロジックがブロッキングである (例えば、ブロッキング I/O を使用する) 場合には、メソッドに `@Blocking` をアノテーションします。 `io.smallrye.common.annotation.Blocking` アノテーションは、I/O スレッド (イベントループ) の代わりにワーカースレッドでアノテーションされたメソッドを呼び出すようにフレームワークに指示します。"

#. type: Title ===
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "The gRPC server"
msgstr "gRPCサーバー"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"The services are _served_ by a _server_.\n"
"Available services (_CDI beans_) are automatically registered and exposed."
msgstr "サービスは _サーバー_ によって _提供されます_ 。利用可能なサービス( _CDIBean_ )は自動的に登録され、公開されます。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when\n"
"running normally, and `localhost:9001` for tests."
msgstr "デフォルトでは、通常、サーバーは `localhost:9000` で公開されており、 _平文_ を使用します(そのため TLS は使用しません)。テストでは、 `localhost:9001` を使用します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Run the application using: `mvn quarkus:dev`."
msgstr "`mvn quarkus:dev` を使用してアプリケーションを実行します。"

#. type: Title ==
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Consuming a gRPC service"
msgstr "gRPCサービスを消費する"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"In this section, we are going to consume the service we expose.\n"
"To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr "ここでは、公開しているサービスを消費することにします。簡単に言うと、同じアプリケーションからサービスを消費することになりますが、これは現実の世界では意味がありません。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr "既存の `org.acme.ExampleResource` クラスを開き、内容を編集してこのようになります。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr "サービスをインジェクトし、その名前を設定します。この名前は、アプリケーションの設定で使用されます。指定しない場合、フィールド名が代わりに使用されます : このケースでは `hello` です。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Use the generated service interface based on Mutiny API."
msgstr "Mutiny APIに基づいて生成されたサービスインターフェースを使用します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Invoke the service."
msgstr "サービスを起動します。"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"We need to configure the application to indicate where the `hello` service is found.\n"
"In the `src/main/resources/application.properties` file, add the following property:"
msgstr "`hello` サービスがどこにあるかを示すようにアプリケーションを構成する必要があります。 `src/main/resources/application.properties` ファイルで、以下のプロパティーを追加します。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr "`hello` は `@GrpcClient` アノテーションで使用される名前です。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "`host` configures the service host (here it's localhost)."
msgstr "`host` はサービスホストを設定します (ここでは localhost)。"

#. type: Plain text
#: _versions/main/guides/grpc-getting-started.adoc
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr "そして、ブラウザで http://localhost:8080/hello/quarkus を開くと、 `Hello quarkus` と表示されるはずです!"

#. type: Title ==
#: _versions/main/guides/grpc-getting-started.adoc
#, no-wrap
msgid "Packaging the application"
msgstr "アプリケーションのパッケージング"

#: _versions/main/guides/grpc-getting-started.adoc
msgid ""
"Like any other Quarkus applications, you can package it with: `mvn package`.\n"
"You can also package the application into a native executable with: `mvn package -Dnative`."
msgstr ""
"他のQuarkusアプリケーションと同様に、次のコマンドでパッケージ化することができます: `mvn package` \n"
"また、アプリケーションをネイティブ実行可能ファイルにパッケージすることもできます: `mvn package -Dnative`"
