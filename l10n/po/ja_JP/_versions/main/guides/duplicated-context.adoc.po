msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: Title =
#: _versions/main/guides/duplicated-context.adoc
#, no-wrap
msgid "Duplicated context, context locals, asynchronous processing and propagation"
msgstr "コンテキストの重複、コンテキストローカル、非同期処理と伝播"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using a traditional, blocking, and synchronous framework, processing of each request is performed in a dedicated thread.\n"
"So, the same thread is used for the entire processing.\n"
"You know that this thread will not be used to execute anything else until the completion of the processing.\n"
"When you need to propagate data along the processing, such as the security principal or a trace id, you can use `ThreadLocals`.\n"
"The propagated data is cleared once the processing is complete."
msgstr "伝統的な、ブロッキング、同期フレームワークを使う場合、各リクエストの処理は専用のスレッドで実行されます。つまり、処理全体に対して同じスレッドが使われます。このスレッドは、処理が完了するまで他の実行に使われることはありません。セキュリティプリンシパルやトレース ID のような、処理に沿ったデータの伝搬が必要な場合は、 `ThreadLocals` を使うことができます。伝搬されたデータは、処理が完了するとクリアされます。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using a reactive and asynchronous execution model, you cannot use the same mechanism.\n"
"To avoid using many process threads, and reduce resource usage (and also increase the concurrency of the application), the same thread can be used to handle multiple concurrent processing.\n"
"Thus, you cannot use `ThreadLocals` as the values would be leaked between the various concurrent processing."
msgstr "リアクティブ実行モデルと非同期実行モデルを使用する場合、同じメカニズムを使用することはできません。多くのプロセススレッドを使用せず、リソースの使用量を減らす（アプリケーションの並行性を高める）ために、同じスレッドを使用して複数の並行処理を処理することができます。したがって、 `ThreadLocals` を使用することはできません。さまざまな並行処理の間で値が漏れてしまうからです。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Vert.x _duplicated context_ is a construct that provides the same kind of propagation but for asynchronous processing.\n"
"It can also be used with synchronous code."
msgstr "Vert.xの _複製コンテキストは_ 、同じようなプロパゲーションを提供するコンストラクトですが、非同期処理用です。同期コードでも使用できます。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "This document explains duplicated contexts, how to retrieve one, use it, and how it's propagated along the (asynchronous) processing."
msgstr "このドキュメントでは、重複するコンテキストについて、その取得方法、使用方法、（非同期）処理での伝搬方法を説明します。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "The reactive model"
msgstr "反応モデル"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "This section is not an explanation of the reactive model. Refer to that xref:quarkus-reactive-architecture.adoc[the Quarkus Reactive Architecture] for more details."
msgstr "このセクションはリアクティブモデルの説明ではありません。詳細については、 xref:quarkus-reactive-architecture.adoc[Quarkusリアクティブアーキテクチャ] を参照してください。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Under the hood, Quarkus uses a reactive engine.\n"
"This engine provides the efficiency and concurrency to cope with modern, containerized, and cloud-native applications."
msgstr "Quarkusはリアクティブエンジンを採用しています。このエンジンは、最新のコンテナ化されたクラウドネイティブなアプリケーションに対応する効率性と並行性を提供します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"For example, when you use RESTEasy Reactive or gRPC, Quarkus can invoke your business logic on I/O threads.\n"
"These threads are named https://en.wikipedia.org/wiki/Event_loop[event loops] and implement a https://en.wikipedia.org/wiki/Reactor_pattern[multi-reactor pattern]."
msgstr "たとえば、RESTEasy ReactiveやgRPCを使用すると、QuarkusはI/Oスレッドでビジネスロジックを呼び出すことができます。これらのスレッドは link:https://en.wikipedia.org/wiki/Event_loop[イベントループと] 名付けられ、 link:https://en.wikipedia.org/wiki/Reactor_pattern[マルチリアクタパターン] を実装します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using the imperative model, Quarkus associates a worker thread to each processing unit (like an HTTP request or a gRPC invocation).\n"
"That thread is dedicated to this specific processing until the processing completes.\n"
"Thus, you can use _Thread Locals_ to propagate data along the processing, and no other processing unit will use that thread until the completion of the current one."
msgstr "命令型モデルを使用する場合、Quarkusは各処理ユニット（HTTPリクエストやgRPC呼び出しなど）にワーカースレッドを関連付けます。このスレッドは、処理が完了するまで、この特定の処理に専念します。したがって、 _スレッドローカルを_ 使用して、処理に沿ってデータを伝搬することができます。現在の処理が完了するまで、他の処理ユニットがそのスレッドを使用することはありません。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"With the reactive model, the code runs on event loop threads.\n"
"These event loops execute multiple concurrent processing units. For example,\n"
"the same event loop can handle multiple concurrent HTTP requests.\n"
"The following picture illustrates this reactive execution model:"
msgstr "リアクティブ・モデルでは、コードはイベントループのスレッドで実行されます。これらのイベントループは、複数の同時処理ユニットを実行します。例えば、同じイベントループで複数のHTTPリクエストを同時に処理することができます。次の図は、このリアクティブ実行モデルを示しています："

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"You must **NEVER** block these event loops.\n"
"If you do, the whole model collapses.\n"
"Thus, when the processing of an HTTP request needs to execute an I/O operation (such as calling an external service), it:"
msgstr "これらのイベントループは *絶対に* ブロックしてはいけません。もしブロックしてしまうと、モデル全体が崩壊してしまいます。このように、HTTPリクエストの処理がI/O操作(外部サービスの呼び出しなど)を実行する必要がある場合、その処理は次のようになります："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "schedules the operation,"
msgstr "は操作をスケジュールします、"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "passes a continuation (the code to call when the I/O completes),"
msgstr "は継続（I/O が完了したときに呼び出すコード）を渡します、"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "releases the thread."
msgstr "スレッドを解放します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"That thread can then handle another concurrent request.\n"
"When the scheduled operation completes, it executes the passed continuation **on the same event loop**."
msgstr "そのスレッドは別の同時リクエストを処理できます。スケジュールされた操作が完了すると、渡された継続を *同じイベントループで* 実行します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"That model is particularly efficient (low number of threads) and performant (avoid context switches).\n"
"However, it requires a different development model, and you cannot use _Thread Locals_, as the concurrent requests would see the same value.\n"
"Indeed, they are all processed by the same thread: the event loop."
msgstr "このモデルは特に効率的で（スレッド数が少なく）、パフォーマンスも高い（コンテキストスイッチの回避）です。しかし、異なる開発モデルが必要で、 _スレッドローカルを_ 使うことはできません。実際、これらはすべて同じスレッド、つまりイベントループで処理されます。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The xref:context-propagation.adoc[MicroProfile Context Propagation] specification addresses this issue.\n"
"It saves and restores the values stored in thread locals whenever we switch to another processing unit.\n"
"However, that model is expensive.\n"
"Context locals (also known as _duplicated context_) is another way to do this and requires fewer mechanics."
msgstr "xref:context-propagation.adoc[MicroProfile Context Propagation] 仕様はこの問題に対応しています。別の処理ユニットに切り替えるたびに、スレッドローカルに保存された値を保存して復元します。しかし、このモデルは高価です。コンテキスト・ローカル（ _重複コンテキストとも_ 呼ばれる）は、これを行う別の方法であり、必要な仕組みが少なくて済みます。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Context and duplicated context"
msgstr "コンテキストと重複コンテキスト"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "In Quarkus, when you execute reactive code, you run in a _Context_, representing the execution thread (event loop or worker thread)."
msgstr "Quarkusでは、リアクティブコードを実行すると、実行スレッド（イベントループまたはワーカースレッド）を表す _コンテキストで_ 実行されます。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Produces: `Hello 1, you are running on context: io.vertx.core.impl.DuplicatedContext@5dc42d4f and on thread Thread[vert.x-eventloop-thread-1,5,main]` - so invoked on an event loop."
msgstr "生成: `Hello 1, you are running on context: io.vertx.core.impl.DuplicatedContext@5dc42d4f and on thread Thread[vert.x-eventloop-thread-1,5,main]` - イベントループで呼び出されます。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Produces: `Hello 2, you are running on context: io.vertx.core.impl.DuplicatedContext@41781ccb and on thread Thread[executor-thread-1,5,main]` - so invoked on a worker thread."
msgstr "生成: `Hello 2, you are running on context: io.vertx.core.impl.DuplicatedContext@41781ccb and on thread Thread[executor-thread-1,5,main]` - ワーカースレッドで実行されます。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"With this _Context_ object, you can schedule operations in the same context.\n"
"The context is handy for executing the continuation on the same event loop (as contexts are attached to event loops), as described in the picture above.\n"
"For example, when you need to call something asynchronous, you capture the current context, and when the response arrives, it invokes the continuation in that context:"
msgstr "この _Context_ オブジェクトを使うと、同じコンテキストで処理をスケジュールすることができます。上の図にあるように、コンテキストは同じイベントループで継続を実行するのに便利です (コンテキストはイベントループにアタッチされるからです)。たとえば、非同期に何かをコールする必要があるときに、 現在のコンテキストをキャプチャし、レスポンスが到着したらそのコンテキストで継続処理を実行します："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Emit the result in the same context."
msgstr "同じコンテキストで結果を出します。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Most Quarkus clients do this automatically, invoking the continuation in the proper context."
msgstr "ほとんどのQuarkusクライアントは自動的にこれを行い、適切なコンテキストで継続を呼び出します。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "There are two levels of contexts:"
msgstr "コンテクストには2つのレベルがあります："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "the root contexts representing the event loop, and thus cannot be used to propagate data without leaking it between concurrent processing"
msgstr "イベントループを表すルートコンテキストは、同時処理間でデータを漏らさずに伝播するために使用することはできません。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "the duplicated contexts, which are based on a root context, but are NOT shared and represent the processing unit"
msgstr "複製されたコンテキストは、ルートコンテキストに基づきますが、共有されず、処理ユニットを表します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Thus, a duplicated context is associated with each processing unit.\n"
"A duplicated context is still associated with a root context, and scheduling operations using a duplicated context run them in the associated root context.\n"
"But, unlike the root context, they are not shared between processing units.\n"
"Yet, continuations of a processing unit use the same duplicated context.\n"
"So, in the previous code snippet, the continuation is not only called on the same event loop but on the same duplicated context (supposing that the captured context is a duplicated context, more on that later)."
msgstr "このように、複製されたコンテキストは各処理ユニットに関連付けられています。複製されたコンテキストは、依然としてルートコンテキストに関連付けられており、複製されたコンテキストを使用するスケジューリング操作は、関連付けられたルートコンテキストで実行されます。しかし、ルートコンテキストとは異なり、処理ユニット間で共有されることはありません。しかし、ある処理ユニットの継続は、同じ重複コンテキストを使用します。そのため、先ほどのコードスニペットでは、同じイベントループだけでなく、同じ複製コンテキスト（キャプチャされたコンテキストが複製コンテキストであると仮定します。）"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Context local data"
msgstr "コンテキスト・ローカルデータ"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When executed in a duplicated context, the code can store data without sharing it with the other concurrent processing.\n"
"So, you can store, retrieve and remove local data.\n"
"The continuation invokes on the same duplicated context, will have access to that data:"
msgstr "複製されたコンテキストで実行された場合、コードは他の並行処理と共有することなくデータを保存できます。そのため、ローカルデータの保存、取得、削除を行うことができます。同じ二重化されたコンテキストで実行された継続処理は、そのデータにアクセスすることができます："

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The previous code snippet uses `io.smallrye.common.vertx.ContextLocals`, which eases access to the local data.\n"
"You can also access them using `Vertx.currentContext().getLocal(\"key\")`."
msgstr "先ほどのコード・スニペットでは `io.smallrye.common.vertx.ContextLocals` を使い、ローカル・データへのアクセスを簡素化しています。 `Vertx.currentContext().getLocal(\"key\")` を使ってもアクセスできます。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Context local data provides an efficient way to propagate objects during a reactive execution.\n"
"Tracing metadata, metrics, and sessions can be stored and retrieved safely."
msgstr "コンテキストローカルデータは、リアクティブ実行中にオブジェクトを伝播する効率的な方法を提供します。トレースメタデータ、メトリクス、セッションを安全に保存し、取り出すことができます。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Context locals restrictions"
msgstr "コンテクスト・ローカルの制限"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"However, such a feature must only be used with duplicated contexts.\n"
"As said above, it's transparent for the code.\n"
"A duplicated context is a context, so they expose the same API."
msgstr "ただし、このような機能は重複したコンテキストでのみ使用する必要があります。上述したように、コードにとっては透過的です。複製されたコンテキストはコンテキストなので、同じAPIを公開します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"In Quarkus, access to the local data is restricted to duplicated contexts.\n"
"If you try to access local data from a root context, it throws an `UnsupportedOperationException`.\n"
"It prevents accessing data shared among different units of processing."
msgstr "Quarkusでは、ローカルデータへのアクセスは複製されたコンテキストに制限されています。ルートコンテキストからローカルデータにアクセスしようとすると、 `UnsupportedOperationException` がスローされます。 異なる処理ユニット間で共有されているデータにアクセスできなくなります。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Safe context"
msgstr "安全な文脈"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"You can mark a context _safe_.\n"
"It is meant for other extensions to integrate with to help identify which contexts are isolated and guarantee access by a unique thread.\n"
"Hibernate Reactive uses this feature to check if the current context is safe to store the currently opened session to protect users from mistakenly interleaving multiple reactive operations that could unintentionally share the same session."
msgstr "コンテキストに _セーフ_ マークをつけることができます。これは、他のエクステンションがどのコンテキストが隔離されているかを識別し、固有のスレッドによるアクセスを保証するために統合するためのものです。Hibernate Reactive はこの機能を使用して、現在開いているセッションを保存するために現在のコンテキストが安全かどうかをチェックし、意図せず同じセッションを共有する可能性のある複数のリアクティブ操作を誤ってインターリーブすることからユーザーを保護します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"Vert.x web will create a new duplicated context for each http web request; Quarkus RESTEasy Reactive will mark such contexts as safe.\n"
"Other extensions should follow a similar pattern when they are setting up a new context that is safe to be used for a local context guaranteeing sequential use, non-concurrent access, and scoped to the current reactive chain as a convenience not to have to pass a \"context\" object along explicitly."
msgstr "Vert.x Webは、http Webリクエストごとに新しい重複コンテキストを作成します。Quarkus RESTEasy Reactiveは、このようなコンテキストを安全としてマークします。Quarkus RESTEasy Reactiveは、このようなコンテキストを安全なコンテキストとしてマークします。他のエクステンションも、ローカルコンテキストに使用される安全なコンテキストを設定する場合は、同様のパターンに従う必要があります。このコンテキストは、シーケンシャルな使用、非同期アクセス、現在のリアクティブチェーンへのスコープを保証し、明示的に \"context \"オブジェクトを渡す必要がない便利なものです。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"In other cases, it might be helpful to mark the current context as not safe instead explicitly; for example, if an existing context needs to be shared across multiple workers to process some operations in parallel: by marking and un-marking appropriately the same\n"
"context can have spans in which it's safe, followed by spans in which it's not safe."
msgstr "例えば、既存のコンテキストを複数のワーカーで共有し、並行して処理を行う必要がある場合などです。適切にマークを付けたり外したりすることで、同じコンテキストが安全なスパンと安全でないスパンを持つことができます。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "To mark a context as safe, you can:"
msgstr "コンテキストを安全としてマークするには、次のようにします："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Use the `io.quarkus.vertx.SafeVertxContext` annotation"
msgstr "`io.quarkus.vertx.SafeVertxContext` アノテーションを使用します。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Use the `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` class"
msgstr "`io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` クラスを使用します。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"By using the `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` class, the current context can be explicitly marked as `safe`, or it can be explicitly marked as `unsafe`; there's a third state which is the default of any new context: `unmarked`.\n"
"The default is to consider any unmarked context to be `unsafe`, unless the system property `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle.UNRESTRICTED_BY_DEFAULT` is set to `true`;"
msgstr "`io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` `unmarked` クラスを使うことで、現在のコンテキストを として明示的にマークすることも、 として明示的にマークすることもできます。デフォルトでは、システムプロパティ が に設定されていない限り、マークされていないコンテキストは とみなされます； `safe` `unsafe` `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle.UNRESTRICTED_BY_DEFAULT` `true` `unsafe`"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The `SafeVertxContext` annotation marks the current duplicated context as safe and invokes the annotated method if the context is `unmarked` or already marked as `safe`.\n"
"If the context is marked as `unsafe`, you can force it to be `safe` using the `force=true` parameter.\n"
"However, this possibility must be used carefully."
msgstr "`SafeVertxContext` アノテーションは、現在の複製コンテキストを安全なものとしてマークし、コンテキストが `unmarked` であるか、すでに `safe` としてマークされている場合は、アノテーションされたメソッドを呼び出します。コンテキストが `unsafe` としてマークされている場合は、 `force=true` パラメータを使用して強制的に `safe` にすることができます。しかし、この可能性は慎重に使用する必要があります。"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The `@SafeVertxContext` annotation is a CDI interceptor binding annotation.\n"
"Therefore, it only works for CDI beans and on non-private methods."
msgstr "`@SafeVertxContext` アノテーションは、CDI インターセプター・バインディング・アノテーションです。そのため、CDI Beanとプライベートでないメソッドでのみ動作します。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Extensions supporting duplicated contexts"
msgstr "重複するコンテキストをサポートするエクステンション"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"In general, Quarkus invokes reactive code on duplicated contexts.\n"
"So it can safely access the local data.\n"
"It is the case with:"
msgstr "一般的に、Quarkusは重複したコンテキストに対してリアクティブコードを呼び出します。そのため、ローカルデータに安全にアクセスできます。これは"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
msgid "RESTEasy Reactive"
msgstr "RESTEasy Reactive"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
msgid "gRPC"
msgstr "gRPC"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Reactive Routes"
msgstr "リアクティブ・ルート"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Vert.x Event Bus `@ConsumeEvent`"
msgstr "Vert.x イベントバス `@ConsumeEvent`"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
msgid "Reactive REST Client"
msgstr "リアクティブRESTクライアント"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Reactive Messaging (Kafka, AMQP)"
msgstr "リアクティブ・メッセージング（Kafka、AMQP）"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
msgid "Funqy"
msgstr "Funqy"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Quarkus scheduler and Quartz"
msgstr "QuarkusスケジューラとQuartz"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "Redis Client (for the pub/sub commands)"
msgstr "Redisクライアント（pub/subコマンド用）"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "GraphQL"
msgstr "GraphQL"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Distinguish between root and duplicated contexts"
msgstr "ルート・コンテキストと重複コンテキストの区別"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "You can distinguish between a root and a duplicated context using the following:"
msgstr "ルート・コンテキストと重複コンテキストは、以下の方法で区別できます："

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "This code uses the `io.smallrye.common.vertx.VertxContext` helper class."
msgstr "このコードでは、 `io.smallrye.common.vertx.VertxContext` ヘルパークラスを使用しています。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "Duplicated contexts and mapped diagnostic context (MDC)"
msgstr "重複したコンテキストとマッピングされた診断コンテキスト（MDC）"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"When using loggers, the MDC (contextual data added to the log messages) is stored in duplicated context when available.\n"
"Check the xref:logging.adoc#mdc-propagation[logging reference guide] for more details."
msgstr "ロガーを使用する場合、MDC（ログ メッセージに追加されるコンテキスト データ）は、利用可能な場合、重複コンテキストに保存されます。詳細については、 xref:logging.adoc#mdc-propagation[ロギング リファレンス ガイド] を確認してください。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy, no-wrap
msgid "CDI request scope"
msgstr "CDI リクエストスコープ"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "In Quarkus, the CDI request scope is stored in a duplicated context, meaning it gets automatically propagated alongside the reactive processing of a request."
msgstr "Quarkusでは、CDIリクエストスコープは複製されたコンテキストに保存されます。つまり、リクエストのリアクティブ処理と同時に、CDIリクエストスコープが自動的に伝搬されます。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, no-wrap
msgid "Reactive Messaging"
msgstr "リアクティブメッセージング"

#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid ""
"The Kafka and AMQP connector creates a duplicated context for each message, implementing a _message context_.\n"
"This message context is used for the complete message processing and thus can be used to propagate data."
msgstr "Kafka と AMQP コネクタは、メッセージ _コンテキストを_ 実装し、各メッセージに対して複製されたコンテキストを作成します。このメッセージコンテキストは完全なメッセージ処理に使用されるため、データの伝播に使用できます。"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "See the https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context/[Message Context] documentation for further information."
msgstr "詳しくは link:https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context/[Message Context] のドキュメントを参照してください。"

#. type: Title ===
#: _versions/main/guides/duplicated-context.adoc
#, no-wrap
msgid "OpenTelemetry"
msgstr "OpenTelemetry"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "The OpenTelemetry extension stores the traces in the duplicated context, ensuring propagation even when using reactive and asynchronous code."
msgstr "OpenTelemetry エクステンションは、複製されたコンテキストにトレースを保存するので、リアクティブで非同期なコードを使用しているときでも、確実に伝搬します。"

#. type: Title ==
#: _versions/main/guides/duplicated-context.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture]"
msgstr "xref:quarkus-reactive-architecture.adoc[Quarkusリアクティブアーキテクチャ]"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "https://vertx.io/docs/vertx-core/java/#_reactor_and_multi_reactor[Vert.x Reactor and Multi-Reactor documentation]"
msgstr "link:https://vertx.io/docs/vertx-core/java/#_reactor_and_multi_reactor[Vert.x リアクターとマルチリアクターのドキュメント]"

#. type: Plain text
#: _versions/main/guides/duplicated-context.adoc
#, fuzzy
msgid "xref:logging.adoc[Quarkus logging]"
msgstr "xref:logging.adoc[Quarkusのロギング]"
