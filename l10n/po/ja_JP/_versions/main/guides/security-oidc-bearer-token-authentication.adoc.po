msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: Title =
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "OpenID Connect (OIDC) Bearer token authentication"
msgstr "OpenID Connect (OIDC) ベアラートークン認証"

#. type: Plain text
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Secure HTTP access to Jakarta REST (formerly known as JAX-RS) endpoints in your application with Bearer token authentication by using the Quarkus OpenID Connect (OIDC) extension."
msgstr "Quarkus OpenID Connect（OIDC）エクステンションを使用することで、ベアラートークン認証を使って、アプリケーション内のJakarta REST（旧称JAX-RS）エンドポイントへのHTTPアクセスを保護できます。"

#. type: Title ==
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Overview of the Bearer token authentication mechanism in Quarkus"
msgstr "Quarkusのベアラートークン認証メカニズムの概要"

#. type: Plain text
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Quarkus supports the Bearer token authentication mechanism through the Quarkus OpenID Connect (OIDC) extension."
msgstr "Quarkusは、Quarkus OpenID Connect（OIDC）エクステンションを通じて、ベアラートークン認証メカニズムをサポートしています。"

#. type: Plain text
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "ベアラートークンは、 link:https://www.keycloak.org[Keycloak] などのOIDCやOAuth2.0に準拠した認可サーバーで発行されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Bearer token authentication is the process of authorizing HTTP requests based on the existence and validity of a bearer token.\n"
"The bearer token provides information about the subject of the call, which is used to determine whether or not an HTTP resource can be accessed."
msgstr ""
"ベアラ・トークン認証とは、ベアラ・トークンの存在と有効性に基づいて HTTP 要求を認可するプロセスです。\n"
"ベアラートークンは呼び出しの主体に関する情報を提供し、HTTP リソースにアクセスできるかどうかを決定するために使われます。"

#. type: Plain text
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "The following diagrams outline the Bearer token authentication mechanism in Quarkus:"
msgstr "以下の図に、Quarkusのベアラートークン認証メカニズムの概要を示します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Bearer token authentication mechanism in Quarkus with single-page application"
msgstr "単一ページアプリケーションによるQuarkusのベアラー認証メカニズム"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The Quarkus service retrieves verification keys from the OIDC provider.\n"
"The verification keys are used to verify the bearer access token signatures."
msgstr "Quarkusサービスは、OIDCプロバイダーから検証キーを取得します。検証キーは、ベアラアクセストークンの署名を検証するために使用されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Quarkus user accesses the single-page application (SPA)."
msgstr "Quarkusユーザーは、シングルページアプリケーション（SPA）にアクセスします。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The single-page application uses Authorization Code Flow to authenticate the user and retrieve tokens from the OIDC provider."
msgstr "シングルページのアプリケーションでは、認可コードフローを使用してユーザーを認証し、OIDCプロバイダーからトークンを取得します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The single-page application uses the access token to retrieve the service data from the Quarkus service."
msgstr "シングルページのアプリケーションは、アクセストークンを使用してQuarkusサービスからサービスデータを取得します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Quarkus service verifies the bearer access token signature by using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the single-page application."
msgstr "Quarkusサービスは、検証キーを使用してベアラアクセストークンの署名を検証し、トークンの有効期限やその他のクレームをチェックし、トークンが有効であればリクエストの処理を許可し、シングルページアプリケーションにサービスレスポンスを返します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The single-page application returns the same data to the Quarkus user."
msgstr "シングルページのアプリケーションは、Quarkusユーザーに同じデータを返します。"

#. type: Block title
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Bearer token authentication mechanism in Quarkus with Java or command line client"
msgstr "JavaまたはコマンドラインクライアントによるQuarkusのベアラートークン認証メカニズム"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The client uses `client_credentials` that requires client id and secret or password grant, which requires client id, secret, username, and password to retrieve the access token from the OIDC provider."
msgstr "クライアントは、OIDCプロバイダからアクセストークンを取得するために、クライアントIDとシークレットを必要とする `client_credentials` 、またはクライアントID、シークレット、ユーザー名、パスワードを必要とするパスワードグラントを使用します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The client uses the access token to retrieve the service data from the Quarkus service."
msgstr "クライアントはアクセストークンを使用して、Quarkusサービスからサービスデータを取得します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The Quarkus service verifies the bearer access token signature by using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the client."
msgstr "Quarkusサービスは、検証キーを使用してベアラアクセストークンの署名を検証し、トークンの有効期限やその他のクレームをチェックし、トークンが有効であればリクエストの処理を許可し、クライアントにサービスレスポンスを返します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If you need to authenticate and authorize users by using OIDC authorization code flow, see the Quarkus xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide.\n"
"Also, if you use Keycloak and bearer tokens, see the Quarkus xref:security-keycloak-authorization.adoc[Using Keycloak to centralize authorization] guide."
msgstr "OIDC認可コードフローを使用してユーザーを認証および認可する必要がある場合は、Quarkus xref:security-oidc-code-flow-authentication.adoc[OpenID Connect認可コードフローメカニズムによるWebアプリケーションの保護] ガイドを参照してください。また、Keycloakとベアラートークンを使用する場合は、Quarkus xref:security-keycloak-authorization.adoc[Using Keycloak to centralize authorization] ガイドを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"To learn about how you can protect service applications by using OIDC Bearer token authentication, see the following tutorial:\n"
"* xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a web application by using OpenID Connect (OIDC) authorization code flow]."
msgstr "OIDCベアラートークン認証を使用してサービスアプリケーションを保護する方法については、以下のチュートリアルを参照してください：* xref:security-oidc-bearer-token-authentication-tutorial.adoc[OpenID Connect (OIDC) の認可コードフローを使用して Web アプリケーションを保護] します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For information about how to support multiple tenants, see the Quarkus xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide."
msgstr "複数のテナントをサポートする方法については、Quarkus xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] ガイドを参照してください。"

#. type: Title ===
#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Accessing JWT claims"
msgstr "JWT クレームへのアクセス"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you need to access JWT token claims, you can inject `JsonWebToken`:"
msgstr "JWT トークンのクレームにアクセスする必要がある場合は、 `JsonWebToken` を注入します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton`, and `@RequestScoped` scopes.\n"
"However, the use of `@RequestScoped` is required if the individual claims are injected as simple types.\n"
"For more information, see the xref:security-jwt.adoc#supported-injection-scopes[Supported injection scopes] section of the Quarkus \"Using JWT RBAC\" guide."
msgstr "`JsonWebToken` のインジェクションは、 `@ApplicationScoped` 、 `@Singleton` 、 `@RequestScoped` のスコープでサポートされています。ただし、個々のクレームが単純型として注入される場合は、 `@RequestScoped` を使用する必要があります。詳細については、Quarkusの「JWT RBACの使用」ガイドの「 xref:security-jwt.adoc#supported-injection-scopes[サポートされる注入スコープ] 」のセクションを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`UserInfo`"
msgstr "`UserInfo`"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If you must request a UserInfo JSON object from the OIDC `UserInfo` endpoint, set `quarkus.oidc.authentication.user-info-required=true`.\n"
"A request is sent to the OIDC provider `UserInfo` endpoint, and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object is created.\n"
"`io.quarkus.oidc.UserInfo` can be injected or accessed as a `SecurityIdentity` `userinfo` attribute."
msgstr "OIDC `UserInfo` エンドポイントから UserInfo JSON オブジェクトを要求する必要がある場合は、 `quarkus.oidc.authentication.user-info-required=true` を設定します。OIDC プロバイダ `UserInfo` エンドポイントにリクエストが送信され、 `io.quarkus.oidc.UserInfo` (単純な `javax.json.JsonObject` ラッパー) オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` は、 `SecurityIdentity` `userinfo` 属性として注入またはアクセスできます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Configuration metadata"
msgstr "設定メタデータ"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが発見した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 構成メタデータは] `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスできます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Token claims and SecurityIdentity roles"
msgstr "トークンの請求とSecurityIdentityの役割"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can map `SecurityIdentity` roles from the verified JWT access tokens as follows:"
msgstr "検証済みの JWT アクセストークンから、 `SecurityIdentity` ロールを次のようにマッピングできます："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If the `quarkus.oidc.roles.role-claim-path` property is set, and matching array or string claims are found, then the roles are extracted from these claims.\n"
"For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`."
msgstr "`quarkus.oidc.roles.role-claim-path` プロパティが設定され、一致する配列または文字列のクレームが見つかると、これらのクレームからロールが抽出されます。例えば、 `customroles` 、 `customroles/array` 、 `scope` 、 `\"http://namespace-qualified-custom-claim\"/roles` 、 `\"http://namespace-qualified-roles\"` 。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If a `groups` claim is available, then its value is used."
msgstr "`groups` クレームがある場合は、その値が使用されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If a `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available, then its value is used.\n"
"This check supports the tokens issued by Keycloak."
msgstr "`realm_access/roles` または `resource_access/client_id/roles` （ `client_id` は `quarkus.oidc.client-id` プロパティの値）のクレームが利用可能な場合、その値が使用されます。このチェックは、Keycloakによって発行されたトークンをサポートします。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For example, the following JWT token has a complex `groups` claim that contains a `roles` array that includes roles:"
msgstr "例えば、以下のJWTトークンは、ロールを含む `roles` 配列を含む複雑な `groups` クレームを持っています："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You must map the `microprofile_jwt_user` role to `SecurityIdentity` roles, and you can do so with this configuration: `quarkus.oidc.roles.role-claim-path=groups/roles`."
msgstr "`microprofile_jwt_user` ロールを `SecurityIdentity` ロールに設定マッピングする必要があります。 `quarkus.oidc.roles.role-claim-path=groups/roles` ."

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If the token is opaque (binary), then a `scope` property from the remote token introspection response is used."
msgstr "トークンが不透明な場合（バイナリ）、リモート・トークン・イントロスペクション・レスポンスからの `scope` プロパティが使用されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If `UserInfo` is the source of the roles, then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, set `quarkus.oidc.roles.role-claim-path`."
msgstr "`UserInfo` がロールのソースである場合、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` を設定し、必要であれば `quarkus.oidc.roles.role-claim-path` を設定します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles.\n"
"For more information, see the xref:security-customization.adoc#security-identity-customization[Security identity customization] section of the Quarkus \"Security tips and tricks\" guide."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` を使用してロールを追加することもできます。詳細については、Quarkusの「セキュリティのヒントとコツ」ガイドの xref:security-customization.adoc#security-identity-customization[セキュリティアイデンティティのカスタマイズ] のセクションを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can also map `SecurityIdentity` roles created from token claims to deployment-specific roles by using the xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security policy]."
msgstr "xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP セキュリティ ポリシー] を使用して、トークン要求から作成された `SecurityIdentity` ロールを配置固有のロールにマップすることもできます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Token scopes and SecurityIdentity permissions"
msgstr "トークンのスコープと SecurityIdentity のパーミッション"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`SecurityIdentity` permissions are mapped in the form of `io.quarkus.security.StringPermission` from the scope parameter of the <<token-claims-and-security-identity-roles,source of the roles>> and using the same claim separator."
msgstr "`SecurityIdentity` パーミッションは、 xref:token-claims-and-security-identity-roles[ロールのソース] のスコープパラメータから 、同じクレームセパレータを使用する形式でマッピングされます。 `io.quarkus.security.StringPermission` "

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Only requests with OpenID Connect scope `email` will be granted access."
msgstr "OpenID Connect スコープ `email` を持つリクエストのみがアクセスを許可されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The read access is limited to the client requests with the `orders_read` scope."
msgstr "読み取りアクセスは、 `orders_read` スコープを持つクライアントリクエストに制限されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For more information about the `io.quarkus.security.PermissionsAllowed` annotation, see the xref:security-authorize-web-endpoints-reference.adoc#permission-annotation[Permission annotation] section of the \"Authorization of web endpoints\" guide."
msgstr "`io.quarkus.security.PermissionsAllowed` アノテーションの詳細については、「Web エンドポイントの認可」ガイドの xref:security-authorize-web-endpoints-reference.adoc#permission-annotation[Permission アノテーション] のセクションを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Token verification and introspection"
msgstr "トークン検証・イントロスペクション"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If the token is a JWT token, then, by default, it is verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet`, retrieved from the OIDC provider's JWK endpoint.\n"
"The token's key identifier (`kid`) header value is used to find the matching JWK key.\n"
"If no matching `JWK` is available locally, then `JsonWebKeySet` is refreshed by fetching the current key set from the JWK endpoint.\n"
"The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` expires.\n"
"The default expiry time is 10 minutes.\n"
"If no matching `JWK` is available after the refresh, the JWT token is sent to the OIDC provider's token introspection endpoint."
msgstr "トークンが JWT トークンの場合、デフォルトでは、OIDC プロバイダの JWK エンドポイントから取得されたローカル `JsonWebKeySet` の `JsonWebKey` (JWK) キーで検証されます。トークンの鍵識別子( `kid` )ヘッダー値は、マッチするJWK鍵を見つけるために使用されます。マッチする `JWK` がローカルにない場合、 `JsonWebKeySet` はJWKエンドポイントから現在のキーセットをフェッチすることでリフレッシュされます。 `quarkus.oidc.token.forced-jwk-refresh-interval` の有効期限が切れた後にのみ、 `JsonWebKeySet` のリフレッシュを繰り返すことができます。デフォルトの有効期限は10分。リフレッシュ後に一致する `JWK` がない場合、JWT トークンは OIDC プロバイダーのトークン・イントロスペクション・エンドポイントに送信されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If the token is opaque, which means it can be a binary token or an encrypted JWT token, then it is always sent to the OIDC provider's token introspection endpoint."
msgstr "トークンが不透明な場合、つまりバイナリートークンや暗号化されたJWTトークンの場合は、常にOIDCプロバイダのトークン・イントロスペクション・エンドポイントに送信されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you work only with JWT tokens and expect a matching `JsonWebKey` to always be available, for example, after refreshing a key set, you must disable token introspection, as shown in the following example:"
msgstr "JWTトークンのみで作業し、例えばキーセットをリフレッシュした後など、一致する `JsonWebKey` が常に利用可能であることを期待する場合、次の例に示すように、トークンのイントロスペクションを無効にする必要があります："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"There might be cases where JWT tokens must be verified through introspection only, which can be forced by configuring an introspection endpoint address only.\n"
"The following properties configuration shows you an example of how you can achieve this with Keycloak:"
msgstr "JWTトークンがイントロスペクションのみによって検証されなければならない場合があるかもしれませんが、これはイントロスペクションのエンドポイントアドレスのみを構成することによって強制できます。次の設定プロパティは、Keycloakでこれを実現する方法の例を示しています："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"There are advantages and disadvantages to indirectly enforcing the introspection of JWT tokens remotely.\n"
"An advantage is that you eliminate the need for two remote calls: a remote OIDC metadata discovery call followed by another remote call to fetch the verification keys that will not be used.\n"
"A disadvantage is that you need to know the introspection endpoint address and configure it manually."
msgstr "JWTトークンのイントロスペクションをリモートで間接的に実施することには、メリットとデメリットがあります。メリットは、2回のリモート呼び出しが不要になることです。リモートOIDCメタデータ・ディスカバリー呼び出しと、使用されない検証キーをフェッチするための別のリモート呼び出しです。デメリットは、イントロスペクションのエンドポイントアドレスを知っていて、それを手動で設定する必要があることです。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The alternative approach is to allow the default option of OIDC metadata discovery but also require that only the remote JWT introspection is performed, as shown in the following example:"
msgstr "別のアプローチは、OIDCメタデータ発見のデフォルトオプションを許可することですが、次の例に示すように、リモートJWTイントロスペクションのみが実行されることも要求します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"An advantage of this approach is that the configuration is simpler and easier to understand.\n"
"A disadvantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address, even though the verification keys will not be fetched."
msgstr "この方法の利点は、構成が単純で理解しやすいことです。デメリットは、検証キーがフェッチされないにもかかわらず、イントロスペクション・エンドポイント・アドレスを発見するために、リモートのOIDCメタデータ発見呼び出しが必要になることです。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The `io.quarkus.oidc.TokenIntrospection`, a simple `jakarta.json.JsonObject` wrapper object, will be created.\n"
"It can be injected or accessed as a `SecurityIdentity` `introspection` attribute, providing either the JWT or opaque token has been successfully introspected."
msgstr "`io.quarkus.oidc.TokenIntrospection` 、単純な `jakarta.json.JsonObject` ラッパー・オブジェクトが作成されます。これは、 `SecurityIdentity` `introspection` 属性として注入またはアクセスすることができ、JWTまたは不透明トークンのどちらかが正常にイントロスペクトされている必要があります。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Token introspection and `UserInfo` cache"
msgstr "トークンのイントロスペクションと `UserInfo` キャッシュ"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"All opaque access tokens must be remotely introspected.\n"
"Sometimes, JWT access tokens might also have to be introspected.\n"
"If `UserInfo` is also required, the same access token is used in a subsequent remote call to the OIDC provider.\n"
"So, if `UserInfo` is required, and the current access token is opaque, two remote calls are made for every such token; one remote call to introspect the token and another to get `UserInfo`.\n"
"If the token is JWT, only a single remote call to get `UserInfo` is needed, unless it also has to be introspected."
msgstr "すべての不透明なアクセストークンは、リモートでイントロスペクトされなければなりません。時にはJWTアクセストークンもイントロスペクトされなければならないかもしれません。 `UserInfo` も必要な場合、同じアクセストークンは、OIDCプロバイダーへの後続のリモート呼び出しで使用されます。つまり、 `UserInfo` が必要で、現在のアクセストークンが不透明な場合、そのようなトークンごとに2つのリモート呼び出しが行われます。1つはトークンをイントロスペクトするリモート呼び出し、もう1つは `UserInfo` を取得するリモート呼び出しです。トークンがJWTの場合、イントロスペクトされる必要がない限り、 `UserInfo` を取得するための1回のリモート呼び出しのみが必要です。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The cost of making up to two remote calls for every incoming bearer or code flow access token can sometimes be problematic."
msgstr "ベアラまたはコードフロー・アクセス・トークンの着信ごとに、最大2回のリモート通話を行うコストが問題になることがあります。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If this is the case in production, consider caching the token introspection and `UserInfo` data for a short period, for example, 3 or 5 minutes."
msgstr "本番環境でこのような状況が発生する場合は、トークンのイントロスペクションや `UserInfo` のデータを 3 分や 5 分といった短い期間キャッシュすることを検討してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces, usable for `@ApplicationScoped` cache implementation.\n"
"Use `@ApplicationScoped` cache implementation to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, as outlined in the following example:"
msgstr "`quarkus-oidc` は と インターフェイスを提供し、 キャッシュの実装に使用できます。 および/または オブジェクトを格納および取得するには、 キャッシュ実装を使用します： `quarkus.oidc.TokenIntrospectionCache` `quarkus.oidc.UserInfoCache` `@ApplicationScoped` `quarkus.oidc.TokenIntrospection` `quarkus.oidc.UserInfo` `@ApplicationScoped`"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Each OIDC tenant can either permit or deny the storing of its `quarkus.oidc.TokenIntrospection` data, `quarkus.oidc.UserInfo` data, or both with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr "各 OIDC テナントは、 `quarkus.oidc.\"tenant\".allow-token-introspection-cache` および `quarkus.oidc.\"tenant\".allow-user-info-cache` プロパティを使用して、 `quarkus.oidc.TokenIntrospection` データ、 `quarkus.oidc.UserInfo` データ、またはその両方の保存を許可または拒否できます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Additionally, `quarkus-oidc` provides a simple default memory-based token cache, which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr "さらに、 `quarkus-oidc` は、 `quarkus.oidc.TokenIntrospectionCache` と `quarkus.oidc.UserInfoCache` の両方のインターフェイスを実装した、シンプルなデフォルトのメモリベースのトークンキャッシュを提供します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can configure and activate the default OIDC token cache as follows:"
msgstr "デフォルトの OIDC トークン・キャッシュは、以下のように設定し、有効にすることができます："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The default cache uses a token as a key, and each entry can have `TokenIntrospection`, `UserInfo`, or both.\n"
"It will only keep up to a `max-size` number of entries.\n"
"If the cache is already full when a new entry is to be added, an attempt is made to find a space by removing a single expired entry.\n"
"Additionally, the cleanup timer, if activated, periodically checks for expired entries and removes them."
msgstr "デフォルトのキャッシュはトークンをキーとして使用し、各エントリには `TokenIntrospection` 、 `UserInfo` 、またはその両方を指定できます。キャッシュは `max-size` 個のエントリまでしか保持しません。新しいエントリが追加されるときにすでにキャッシュが一杯になっている場合、 期限切れのエントリをひとつ削除することで空きを見つけようとします。さらに、クリーンアップタイマーが有効になっていれば、期限切れのエントリを 定期的にチェックして削除します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can experiment with the default cache implementation or register a custom one."
msgstr "デフォルトのキャッシュの実装を試すことも、カスタムのキャッシュを登録することもできます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "JSON Web Token claim verification"
msgstr "JSONウェブトークンのクレーム検証"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "After the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr "ベアラJWTトークンの署名が検証され、 `expires at` ( `exp` ) のクレームがチェックされた後、 `iss` ( `issuer` ) のクレーム値が次に検証されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"By default, the `iss` claim value is compared to the `issuer` property, which might have been discovered in the well-known provider configuration.\n"
"However, if the `quarkus.oidc.token.issuer` property is set, then the `iss` claim value is compared to it instead."
msgstr "デフォルトでは、 `iss` クレーム値は、 `issuer` プロパティと比較されます。このプロパティは、よく知られたプロバイダ構成で検出された可能性があります。ただし、 `quarkus.oidc.token.issuer` プロパティが設定されている場合は、代わりに `iss` クレーム値が比較されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"In some cases, this `iss` claim verification might not work.\n"
"For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address.\n"
"Or when a discovered `issuer` property contains the template tenant variable, but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr "場合によっては、この `iss` 請求検証が機能しないことがあります。たとえば、検出された `issuer` プロパティに内部 HTTP/IP アドレスが含まれている一方で、トークン `iss` の請求値に外部 HTTP/IP アドレスが含まれている場合です。または、検出された `issuer` プロパティにテナント変数のテンプレートが含まれているにもかかわらず、トークン `iss` クレーム値にテナント固有の発行者値が完全に含まれている場合。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"In such cases, consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`.\n"
"Only skip the issuer verification if no other options are available:"
msgstr "このような場合は、 `quarkus.oidc.token.issuer=any` を設定して発行者検証をスキップすることを検討してください。他のオプションが利用できない場合にのみ、発行者検証をスキップしてください："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you are using Keycloak and observe the issuer verification errors caused by the different host addresses, configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr "Keycloakを使用していて、異なるホスト・アドレスによる発行者検証エラーが発生する場合は、 `KEYCLOAK_FRONTEND_URL` プロパティを使用してKeycloakを設定し、同じホスト・アドレスが使用されるようにしてください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If the `iss` property is tenant-specific in a multitenant deployment, use the `SecurityIdentity` `tenant-id` attribute to check that the issuer is correct in the endpoint or the custom Jakarta filter.\n"
"For example:"
msgstr "マルチテナント展開で `iss` プロパティがテナント固有の場合は、 `SecurityIdentity` `tenant-id` 属性を使用して、エンドポイントまたはカスタム Jakarta フィルタで発行者が正しいことを確認します。たとえば、次のようになります："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Consider using the `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr "`quarkus.oidc.token.audience` プロパティを使用して、トークン `aud` ( `audience` ) のクレーム値を検証することを検討してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Jose4j Validator"
msgstr ""

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You can register a custom https://www.javadoc.io/doc/org.bitbucket.b_c/jose4j/latest/org/jose4j/jwt/consumer/class-use/Validator.html[Jose4j Validator] to customize the JWT claim verification process, before `org.eclipse.microprofile.jwt.JsonWebToken` is initialized.\n"
"For example:"
msgstr ""

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Register Jose4j Validator to verify JWT tokens for all OIDC tenants."
msgstr ""

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Return the claim verification error description."
msgstr ""

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Return `null` to confirm that this Validator has successfully verified the token."
msgstr ""

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Use a `@quarkus.oidc.TenantFeature` annotation to bind a custom Validator to a specific OIDC tenant only."
msgstr ""

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Single-page applications"
msgstr "シングルページ・アプリケーション"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "A single-page application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OIDC provider to acquire a bearer token to access Quarkus `service` applications."
msgstr "シングルページアプリケーション（SPA）は通常、 `XMLHttpRequest` （XHR）とOIDCプロバイダーが提供するJavaScriptユーティリティコードを使用して、ベアラートークンを取得し、Quarkus `service` アプリケーションにアクセスします。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For example, if you work with Keycloak, you can use `keycloak.js` to authenticate users and refresh the expired tokens from the SPA:"
msgstr "例えば、Keycloakを使用している場合、 `keycloak.js` 、ユーザーを認証し、SPAから期限切れトークンをリフレッシュすることができます："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"If you plan to use your OIDC `service` application from a single-page application running on a different domain, you must configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr "OIDC `service` アプリケーションを、別のドメインで動作するシングルページアプリケーションから使用する場合は、クロスオリジンリソース共有（CORS）を設定する必要があります。詳細については、「クロスオリジンリソース共有」ガイドの xref:security-cors.adoc#cors-filter[CORSフィルター] のセクションを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Provider endpoint configuration"
msgstr "プロバイダーのエンドポイント設定"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "An OIDC `service` application needs to know the OIDC provider's token, `JsonWebKey` (JWK) set, and possibly `UserInfo` and introspection endpoint addresses."
msgstr "OIDC `service` アプリケーションは、OIDC プロバイダーのトークン、 `JsonWebKey` (JWK)セット、そして場合によっては `UserInfo` と introspection エンドポイントアドレスを知っている必要があります。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Alternatively, if the discovery endpoint is not available, or if you want to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values.\n"
"For example:"
msgstr "あるいは、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして相対パス値で構成することもできます。例えば"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Token propagation"
msgstr "トークンの伝播"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For information about bearer access token propagation to the downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token propagation] section of the Quarkus \"OpenID Connect (OIDC) and OAuth2 client and filters reference\" guide."
msgstr "下流のサービスへのベアラアクセストークンの伝搬については、Quarkusの「OpenID Connect（OIDC）およびOAuth2クライアントとフィルターのリファレンス」ガイドの「 xref:security-openid-connect-client-reference.adoc#token-propagation[トークンの伝搬] 」のセクションを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC provider client authentication"
msgstr "OIDCプロバイダーのクライアント認証"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OIDC provider is required.\n"
"If introspection of the Bearer token is necessary, then `OidcProviderClient` must authenticate to the OIDC provider.\n"
"For more information about supported authentication options, see the  xref:security-oidc-code-flow-authentication.adoc#oidc-provider-client-authentication[OIDC provider client authentication] section in the Quarkus \"OpenID Connect authorization code flow mechanism for protecting web applications\" guide."
msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OIDC プロバイダへのリモート・リクエストが必要な場合に使用されます。ベアラートークンのイントロスペクションが必要な場合は、 、OIDCプロバイダを認証する必要があります。サポートされている認証オプションの詳細については、Quarkusの「Webアプリケーションを保護するためのOpenID Connect認可コードフローメカニズム」ガイドの `OidcProviderClient` xref:security-oidc-code-flow-authentication.adoc#oidc-provider-client-authentication[OIDCプロバイダクライアント認証] セクションを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Testing"
msgstr "テスト"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you have to test Quarkus OIDC service endpoints that require xref:security-keycloak-authorization.adoc[Keycloak authorization], follow the xref:security-keycloak-authorization.adoc#testing[Test Keycloak authorization] section."
msgstr "xref:security-keycloak-authorization.adoc[Keycloak認可] が必要なQuarkus OIDCサービスのエンドポイントをテストする必要がある場合は、 xref:security-keycloak-authorization.adoc#testing[Keycloak認可のテスト] セクションに従ってください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can begin testing by adding the following dependencies to your test project:"
msgstr "以下の依存関係をテストプロジェクトに追加することで、テストを開始できます："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "WireMock"
msgstr "ワイヤーモック"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Prepare the REST test endpoint and set `application.properties`.\n"
"For example:"
msgstr "REST テスト・エンドポイントを用意し、 `application.properties` を設定します。例えば"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Finally, write the test code.\n"
"For example:"
msgstr "最後に、テストコードを書きます。例えば"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property.\n"
"It allows you to sign the token by using a no-argument `sign()` operation."
msgstr "`quarkus-test-oidc-server` エクステンションは、 `JSON Web Key` ( `JWK` ) フォーマットの署名用 RSA 秘密鍵ファイルを含み、 `smallrye.jwt.sign.key.location` 設定プロパティでそれを指定します。これにより、引数なしの `sign()` 操作を使用してトークンに署名できます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage because even the communication channel is tested against the WireMock HTTP stubs.\n"
"If you need to run a test with WireMock stubs that are not yet supported by `OidcWiremockTestResource`, you can inject a `WireMockServer` instance into the test class, as shown in the following example:"
msgstr "`OidcWiremockTestResource` を使って `quarkus-oidc` `service` アプリケーションをテストすると、通信チャネルも WireMock HTTP スタブに対してテストされるため、最高のカバレッジが得られます。 `OidcWiremockTestResource` でまだサポートされていない WireMock スタブを使ってテストを実行する必要がある場合は、次の例のように `WireMockServer` インスタンスをテストクラスに注入します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers because the WireMock server runs in the JVM that runs the test, which is inaccessible from the Docker container that runs the Quarkus application."
msgstr "`OidcWiremockTestResource` `@QuarkusIntegrationTest` これは、WireMockサーバーがテストを実行するJVM内で実行され、Quarkusアプリケーションを実行するDockerコンテナからアクセスできないためです。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`OidcTestClient`"
msgstr "`OidcTestClient`"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you use SaaS OIDC providers, such as `Auth0`, and want to run tests against the test (development) domain or to run tests against a remote Keycloak test realm, if you already have `quarkus.oidc.auth-server-url` configured, you can use `OidcTestClient`."
msgstr "`Auth0` などの SaaS OIDC プロバイダを使用し、テスト（開発）ドメインに対してテストを実行したい場合、またはリモートの Keycloak テスト領域に対してテストを実行したい場合、 `quarkus.oidc.auth-server-url` がすでに設定されていれば、 `OidcTestClient` を使用できます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For example, you have the following configuration:"
msgstr "例えば、次のようなコンフィギュレーションがあるとします："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "To start, add the same dependency, `quarkus-test-oidc-server`, as described in the <<integration-testing-wiremock>> section."
msgstr "開始するには、 <<integration-testing-wiremock>> のセクションで説明したのと同じ依存関係、 `quarkus-test-oidc-server` を追加します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Next, write the test code as follows:"
msgstr "次に、テストコードを次のように記述します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"This test code acquires a token by using a `password` grant from the test `Auth0` domain, which has registered an application with the client id `test-auth0-client`, and created the user `alice` with password `alice`.\n"
"For a test like this to work, the test `Auth0` application must have the `password` grant enabled.\n"
"This example code also shows how to pass additional parameters.\n"
"For `Auth0`, these are the `audience` and `scope` parameters."
msgstr "このテストコードでは、 `test-auth0-client` クライアント ID を持つアプリケーションを登録し、 `alice` パスワードを持つユーザ `alice` を作成した `Auth0` ドメインから、 `password` グラントを使用してトークンを取得します。このようなテストが動作するためには、 `Auth0` テストアプリケーションが `password` グラントを有効にしている必要があります。このコード例では、追加のパラメータを渡す方法も示しています。 `Auth0` の場合は、 `audience` と `scope` のパラメータです。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The preferred approach for integration testing against Keycloak is xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak].\n"
"`Dev Services for Keycloak` will start and initialize a test container.\n"
"Then, it will create a `quarkus` realm and a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloakに対する統合テストには、 xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を使用します。 `Dev Services for Keycloak` 、テストコンテナを起動し、初期化します。次に、 `quarkus` realmと `quarkus-app` client ( `secret` secret)を作成し、 `alice` ( `admin` and `user` role)と `bob` ( `user` role)ユーザーを追加します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "First, add the following dependency, which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` that you can use in tests for acquiring the access tokens:"
msgstr "このクラスは、アクセス・トークンを取得するためのテストで使用できるユーティリティ・クラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Next, prepare your `application.properties` configuration file.\n"
"You can start with an empty `application.properties` file because `Dev Services for Keycloak` registers `quarkus.oidc.auth-server-url` and points it to the running test container, `quarkus.oidc.client-id=quarkus-app`, and `quarkus.oidc.credentials.secret=secret`."
msgstr "次に、 `application.properties` 構成ファイルを準備します。 `Dev Services for Keycloak` は `quarkus.oidc.auth-server-url` を登録し、実行中のテスト・コンテナ、 `quarkus.oidc.client-id=quarkus-app` 、および `quarkus.oidc.credentials.secret=secret` を指定するので、空の `application.properties` ファイルから始めることができます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "However, if you have already configured the required `quarkus-oidc` properties, then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, as shown in the following example:"
msgstr "ただし、必要な `quarkus-oidc` プロパティがすでに設定されている場合は、次の例に示すように、 `quarkus.oidc.auth-server-url` を `Dev Services for Keycloak` 用の `prod` プロファイルと関連付けるだけでコンテナを起動できます："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If a custom realm file has to be imported into Keycloak before running the tests, configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルをKeycloakにインポートする必要がある場合は、次のように `Dev Services for Keycloak` ："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Finally, write your test, which will be executed in JVM mode, as shown in the following examples:"
msgstr "最後に、以下の例のようにJVMモードで実行されるテストを書いてください："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Example of a test executed in JVM mode:"
msgstr "JVMモードでのテスト実行例："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Example of a test executed in native mode:"
msgstr "ネイティブモードでのテスト実行例："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For more information about initializing and configuring Dev Services for Keycloak, see the xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] guide."
msgstr "Dev Services for Keycloakの初期化と設定の詳細については、 xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] ガイドを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`KeycloakTestResourceLifecycleManager`"
msgstr "`KeycloakTestResourceLifecycleManager`"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can also use `KeycloakTestResourceLifecycleManager` for integration testing with Keycloak."
msgstr "また、 `KeycloakTestResourceLifecycleManager` 、Keycloakとの統合テストを行うこともできます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Use <<integration-testing-keycloak-devservices,Dev Services for Keycloak>> instead of `KeycloakTestResourceLifecycleManager` for integration testing with Keycloak, unless you have specific requirements for using `KeycloakTestResourceLifecycleManager`."
msgstr "`KeycloakTestResourceLifecycleManager` を使用する特別な要件がない限り、 xref:integration-testing-keycloak-devservices[Keycloak] との統合テストには `KeycloakTestResourceLifecycleManager` の代わりに xref:integration-testing-keycloak-devservices[Dev Services for Keycloak] を使用してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "First, add the following dependency:"
msgstr "まず、以下の依存関係を追加します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "It provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager`, which is an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` that starts a Keycloak container."
msgstr "`io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` これは、Keycloakコンテナを起動する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装です。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Configure the Maven Surefire plugin as follows, or similarly with `maven.failsafe.plugin` for native image testing:"
msgstr "Maven Surefireプラグインを次のように設定するか、ネイティブイメージテスト用に `maven.failsafe.plugin` ："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Prepare the REST test endpoint and set `application.properties` as outlined in the following example:"
msgstr "REST テスト・エンドポイントを用意し、 `application.properties` を次の例のように設定します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "Summary"
msgstr "まとめ"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"In the provided example, `KeycloakTestResourceLifecycleManager` registers two users: `alice` and `admin`.\n"
"By default:\n"
"* The user `alice` has the `user` role, which you can customize by using a `keycloak.token.user-roles` system property.\n"
"* The user `admin` has both the `user` and `admin` roles, which you can customize by using the `keycloak.token.admin-roles` system property."
msgstr "この例では、 `KeycloakTestResourceLifecycleManager` が、 `alice` と `admin` という2人のユーザーを登録しています。デフォルトでは* ユーザ `alice` は `user` のロールを持ちますが、これは `keycloak.token.user-roles` システム・プロパティを使用することでカスタマイズできます。 `keycloak.token.admin-roles` * ユーザ `admin` は `user` と `admin` の両方のロールを持ちます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance, and this can be disabled by using `keycloak.use.https=false`.\n"
"The default realm name is `quarkus`, and the client id is `quarkus-service-app`.\n"
"If you want to customize these values, set the `keycloak.realm` and `keycloak.service.client` system properties."
msgstr "デフォルトでは、 `KeycloakTestResourceLifecycleManager` 、Keycloakインスタンスを初期化するためにHTTPSを使用します。これは、 `keycloak.use.https=false` を使用して無効にすることができます。デフォルトのレルム名は `quarkus` で、クライアントIDは `quarkus-service-app` です。これらの値をカスタマイズしたい場合は、 `keycloak.realm` と `keycloak.service.client` システム・プロパティを設定します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Local public key"
msgstr "ローカル公開鍵"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can use a local inlined public key for testing your `quarkus-oidc` `service` applications, as shown in the following example:"
msgstr "以下の例に示すように、 `quarkus-oidc` `service` アプリケーションをテストするために、ローカルのインライン公開鍵を使用することができます："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"To generate JWT tokens, copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the preceding <<integration-testing-wiremock>> section.\n"
"You can use your own test keys, if preferred."
msgstr "JWT トークンを生成するには、 `main` Quarkus リポジトリの `integration-tests/oidc-tenancy` から `privateKey.pem` をコピーし、前述の <<integration-testing-wiremock>> セクションにあるものと同様のテストコードを使用します。必要に応じて、独自のテストキーを使用することもできます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"This approach provides limited coverage compared to the WireMock approach.\n"
"For example, the remote communication code is not covered."
msgstr "このアプローチでは、WireMockのアプローチに比べてカバーできる範囲が限定されます。例えば、リモート通信コードは対象外です。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations to test the `service` application endpoint code, which depends on either one, or all three, of the following injections:"
msgstr "`@TestSecurity` と `@OidcSecurity` のアノテーションを使用して、 `service` アプリケーションエンドポイントコードをテストすることができます。 アプリケーションエンドポイントコードは、次の注入のいずれか、または 3 つすべてに依存します："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`JsonWebToken`"
msgstr "`JsonWebToken`"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`OidcConfigurationMetadata`"
msgstr "`OidcConfigurationMetadata`"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Write a test code as outlined in the following example:"
msgstr "次の例のようにテストコードを書いてください："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The `ProtectedResource` class, which is used in this code example, might look like this:"
msgstr "このコード例で使用されている `ProtectedResource` クラスは次のようになります："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"You must always use the `@TestSecurity` annotation.\n"
"Its `user` property is returned as `JsonWebToken.getName()` and its `roles` property is returned as `JsonWebToken.getGroups()`.\n"
"The `@OidcSecurity` annotation is optional and you can use it to set the additional token claims and the `UserInfo` and `OidcConfigurationMetadata` properties.\n"
"Additionally, if the `quarkus.oidc.token.issuer` property is configured, it is used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr "常に `@TestSecurity` アノテーションを使用する必要があります。その `user` プロパティは `JsonWebToken.getName()` として返され、その `roles` プロパティは `JsonWebToken.getGroups()` として返されます。 `@OidcSecurity` アノテーションはオプションで、これを使用して、追加のトークン・クレームと `UserInfo` および `OidcConfigurationMetadata` プロパティを設定できます。さらに、 `quarkus.oidc.token.issuer` プロパティが設定されている場合は、 `OidcConfigurationMetadata` `issuer` プロパティ値として使用されます。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you work with opaque tokens, you can test them as shown in the following code example:"
msgstr "不透明なトークンを使用する場合は、次のコード例のようにテストすることができます："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "The  `ProtectedResource` class, which is used in this code example, might look like this:"
msgstr "このコード例で使用されている `ProtectedResource` クラスは次のようになります："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The `@TestSecurity`, `user`, and `roles` attributes are available as `TokenIntrospection`, `username`, and `scope` properties.\n"
"Use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties, such as an `email`, and so on."
msgstr "`@TestSecurity` 、 `user` 、 `roles` 属性は、 `TokenIntrospection` 、 `username` 、 `scope` プロパティとして利用できます。 `email` など、追加のイントロスペクション・レスポンス・プロパティを追加するには `io.quarkus.test.security.oidc.TokenIntrospection` を使用します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "`@TestSecurity` and `@OidcSecurity` can be combined in a meta-annotation, as outlined in the following example:"
msgstr "`@TestSecurity` と 、次の例のようにメタアノテーションで組み合わせることができます： `@OidcSecurity` "

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "This is particularly useful if multiple test methods must use the same set of security settings."
msgstr "これは、複数のテストメソッドが同じセキュリティ設定を使用しなければならない場合に特に便利です。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Check errors in the logs"
msgstr "ログのエラーチェック"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "To see more details about token verification errors, enable `io.quarkus.oidc.runtime.OidcProvider` and `TRACE` level logging:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` および `TRACE` レベルのロギングを有効にします："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "To see more details about `OidcProvider` client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` and `TRACE` level logging as follows:"
msgstr "`OidcProvider` クライアント初期化エラーの詳細を表示するには、以下のように `io.quarkus.oidc.runtime.OidcRecorder` および `TRACE` レベルのロギングを有効にします："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "External and internal access to OIDC providers"
msgstr "OIDCプロバイダーへの外部および内部アクセス"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The externally-accessible token of the OIDC provider and other endpoints might have different HTTP(S) URLs compared to the URLs that are auto-discovered or configured relative to the `quarkus.oidc.auth-server-url` internal URL.\n"
"For example, suppose your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a bearer token.\n"
"In that case, the endpoint might report an issuer verification failure."
msgstr "OIDCプロバイダやその他のエンドポイントの外部からアクセス可能なトークンは、自動検出されるURLや、 `quarkus.oidc.auth-server-url` 内部URLに対して構成されるURLと比較して、HTTP(S) URLが異なる場合があります。たとえば、SPAが外部のトークンエンドポイントアドレスからトークンを取得し、ベアラートークンとしてQuarkusに送信するとします。この場合、エンドポイントは発行者検証の失敗を報告する可能性があります。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"In such cases, if you work with Keycloak, start it with the `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other OIDC providers, refer to your provider's documentation."
msgstr "このような場合、Keycloakを使用する場合は、 `KEYCLOAK_FRONTEND_URL` システム・プロパティを外部からアクセス可能なベースURLに設定して起動してください。他のOIDCプロバイダーで作業する場合は、プロバイダーのドキュメントを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Using the `client-id` property"
msgstr "`client-id` プロパティの使用"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The `quarkus.oidc.client-id` property identifies the OIDC client that requested the current bearer token.\n"
"The OIDC client can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr "`quarkus.oidc.client-id` プロパティは、現在のベアラートークンを要求した OIDC クライアントを識別します。OIDCクライアントは、ブラウザで実行されるSPAアプリケーション、またはアクセストークンをQuarkus `service` アプリケーションに伝搬するQuarkus `web-app` 機密クライアントアプリケーションです。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"This property is required if the `service` application is expected to introspect the tokens remotely, which is always the case for the opaque tokens.\n"
"This property is optional for local JSON Web Token (JWT) verification only."
msgstr "このプロパティは、 `service` アプリケーションがトークンをリモートでイントロスペクトすることを想定している場合に必要です。このプロパティは、ローカルの JSON Web Token (JWT) 検証の場合のみオプションです。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Setting the `quarkus.oidc.client-id` property is encouraged even if the endpoint does not require access to the remote introspection endpoint.\n"
"This is because when `client-id` is set, it can be used to verify the token audience.\n"
"It will also be included in logs when the token verification fails, enabling better traceability of tokens issued to specific clients and analysis over a longer period."
msgstr "`quarkus.oidc.client-id` プロパティを設定することは、エンドポイントがリモートのイントロスペクション・エ ンドポイントへのアクセスを必要としない場合でも推奨されます。これは、 `client-id` が設定されると、トークン利用者の検証に使用できるためです。また、トークンの検証に失敗するとログに記録されるため、特定のクライアントに発行されたトークンのトレーサビリティが向上し、長期間にわたる分析が可能になります。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For example, if your OIDC provider sets a token audience, consider the following configuration pattern:"
msgstr "例えば、OIDCプロバイダーがトークン・オーディエンスを設定する場合、以下の構成パターンを考慮してください："

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If you set `quarkus.oidc.client-id`, but your endpoint does not require remote access to one of the OIDC provider endpoints (introspection, token acquisition, and so on), do not set a client secret with `quarkus.oidc.credentials` or similar properties because it will not be used."
msgstr "`quarkus.oidc.client-id` を設定しても、エンドポイントが OIDC プロバイダ・エンドポイントの 1 つへのリモート・アクセス（イントロスペクション、トークン取得など）を必要としない場合、 `quarkus.oidc.credentials` または同様のプロパティを持つクライアント・シークレットは使用されないため、設定しないでください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Quarkus `web-app` applications always require the `quarkus.oidc.client-id` property."
msgstr "Quarkus `web-app` アプリケーションは常に `quarkus.oidc.client-id` プロパティを必要とします。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Authentication after an HTTP request has completed"
msgstr "HTTPリクエスト完了後の認証"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"Sometimes, `SecurityIdentity` for a given token must be created when there is no active HTTP request context.\n"
"The `quarkus-oidc` extension provides `io.quarkus.oidc.TenantIdentityProvider` to convert a token to a `SecurityIdentity` instance.\n"
"For example, one situation when you must verify the token after the HTTP request has completed is when you are processing messages with xref:vertx.adoc#event-bus[Vert.x event bus].\n"
"The example below uses the 'product-order' message within different CDI request contexts.\n"
"Therefore, an injected `SecurityIdentity` would not correctly represent the verified identity and be anonymous."
msgstr "アクティブな HTTP リクエストコンテキストがないときに、与えられたトークンの `SecurityIdentity` を作成しなければならないことがあります。 `quarkus-oidc` エクステンションは、トークンを `SecurityIdentity` インスタンスに変換する `io.quarkus.oidc.TenantIdentityProvider` を提供します。たとえば、HTTP リクエストが完了した後にトークンを検証する必要がある状況として、 xref:vertx.adoc#event-bus[Vert.x イベントバス] でメッセージを処理している場合があります。以下の例では、異なる CDI リクエストコンテキスト内で「product-order」メッセージを使用しています。そのため、注入された `SecurityIdentity` は、検証された ID を正しく表すことができず、匿名になります。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "At this point, the token is not verified when proactive authentication is disabled."
msgstr "このとき、プロアクティブ認証が無効になっていると、トークンは検証されません。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "For the default tenant, the `TenantFeature` qualifier is optional."
msgstr "デフォルトのテナントでは、 `TenantFeature` 修飾子はオプションです。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Executes token verification and converts the token to a `SecurityIdentity`."
msgstr "トークン検証を実行し、トークンを `SecurityIdentity` に変換します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"When the provider is used during an HTTP request, the tenant configuration can be resolved as described in\n"
"the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide.\n"
"However, when there is no active HTTP request, you must select the tenant explicitly with the `io.quarkus.oidc.TenantFeature` qualifier."
msgstr "HTTP リクエスト中にプロバイダが使用されると、「 xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナントの使用] 」ガイドの説明に従ってテナント構成を解決できます。ただし、アクティブなHTTPリクエストがない場合は、 `io.quarkus.oidc.TenantFeature` 修飾子を使用して明示的にテナントを選択する必要があります。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[Dynamic tenant configuration resolution] is currently not supported.\n"
"Authentication that requires a dynamic tenant will fail."
msgstr "xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[動的なテナント構成の解決は] 現在サポートされていません。動的テナントを必要とする認証は失敗します。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "OIDC request filters"
msgstr "OIDCリクエストフィルター"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers, and log requests.\n"
"For more information, see xref:security-oidc-code-flow-authentication#oidc-request-filters[OIDC request filters]."
msgstr "QuarkusからOIDCプロバイダへのOIDCリクエストは、1つまたは複数の `OidcRequestFilter` 、リクエストヘッダの更新や追加、リクエストのログを記録する実装を登録することで、フィルタリングできます。詳細については、 xref:security-oidc-code-flow-authentication.adoc#oidc-request-filters[OIDCリクエスト] フィルターを参照してください。"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "References"
msgstr "参照"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティリファレンス]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication-tutorial.adoc[OIDCベアラートークン認証によるサービスアプリケーションの保護]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "link:https://www.keycloak.org/documentation.html[Keycloak documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[キークロークのドキュメント]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 client and filters reference guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID ConnectおよびOAuth2クライアントとフィルターのリファレンスガイド]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[JSONウェブトークン (JWT) のビルド、署名、暗号化]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[OpenID Connect、SmallRye JWT、OAuth2の認証メカニズムの選択]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Adminクライアント]"

#: _versions/main/guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connectマルチテナントの使用]"
